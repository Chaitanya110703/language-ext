// <auto-generated/>

using System;
using System.Linq;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Diagnostics.Contracts;
using LanguageExt.TypeClasses;
using LanguageExt.ClassInstances;
using static LanguageExt.Prelude;

namespace LanguageExt
{
    public static partial class ArrT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Arr&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Arr&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Arr&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Arr<Arr<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MArr<Arr<A>>, Arr<Arr<A>>, MArr<A>, Arr<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Arr&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Arr&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Arr&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Arr<Arr<A>> ma) =>
            default(SeqTrans<MArr<Arr<A>>, Arr<Arr<A>>, MArr<A>, Arr<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Arr&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Arr<B>> bindT< A, B>(Arr<Arr<A>> ma, Func<A, Arr<B>> f) =>
            default(SeqTrans<MArr<Arr<A>>, Arr<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MArr<Arr<B>>, Arr<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Arr&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Arr&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Arr&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Arr<Arr<B>> traverse< A, B>(Arr<Arr<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Arr&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Arr&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Arr<Arr<A>> sequence< A>(Arr<Arr<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Arr<B>> mapT< A, B>(Arr<Arr<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MArr<Arr<A>>, Arr<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Map<MArr<Arr<B>>, Arr<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Arr<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Arr<A>>, Arr<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Arr<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Arr<A>>, Arr<Arr<A>>, MArr<A>, Arr<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Arr<Arr<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Arr<A>>, Arr<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Arr<Arr<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Arr<A>>, Arr<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Arr&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Arr<Arr<A>> ma, Action<A> f) =>
            default(SeqTrans<MArr<Arr<A>>, Arr<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Arr&lt;Arr&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Arr<Arr<A>> filterT< A>(Arr<Arr<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MArr<Arr<A>>, Arr<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MArr<Arr<A>>, Arr<Arr<A>>, MArr<A>, Arr<A>, A>(ma, 
                    a => pred(a)
                        ? default(MArr<A>).Pure(a)
                        : default(MArr<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Arr&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Arr<Arr<A>> plusT<NUM,  A>(Arr<Arr<A>> x, Arr<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Arr&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Arr<Arr<A>> subtractT<NUM,  A>(Arr<Arr<A>> x, Arr<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Arr<Arr<A>> productT<NUM,  A>(Arr<Arr<A>> x, Arr<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Arr<Arr<A>> divideT<NUM,  A>(Arr<Arr<A>> x, Arr<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Arr<Arr<A>> appendT<SEMI,  A>(Arr<Arr<A>> x, Arr<Arr<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Arr<Arr<A>> x, Arr<Arr<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Arr<Arr<A>> x, Arr<Arr<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Arr<B>> applyT< A, B>(Func<A, B> fab, Arr<Arr<A>> fa) =>
            default(ApplArr< Arr<A>, Arr<B>>).Apply(
                 default(MArr< Func<Arr<A>, Arr<B>>>).Pure((Arr<A> a) => default(ApplArr< A, B>).Apply(
                     default(MArr< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Arr<B>> applyT< A, B>(Arr<Arr<Func<A, B>>> fab, Arr<Arr<A>> fa) =>
            default(MArr<Arr<Func<A, B>>>).Bind<MArr<Arr<B>>, Arr<Arr<B>>, Arr<B>>(fab, f =>
                default(MArr<Arr<A>>).Bind<MArr<Arr<B>>, Arr<Arr<B>>, Arr<B>>(fa, a => 
                    default(MArr<Arr<B>>).Pure(default(ApplArr< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Arr&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Arr&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Arr<Arr<C>> applyT< A, B, C>(Func<A, B, C> fabc, Arr<Arr<A>> fa, Arr<Arr<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class HashSetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Arr&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;HashSet&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Arr&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Arr<HashSet<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MArr<HashSet<A>>, Arr<HashSet<A>>, MHashSet<A>, HashSet<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Arr&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;HashSet&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Arr&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Arr<HashSet<A>> ma) =>
            default(SeqTrans<MArr<HashSet<A>>, Arr<HashSet<A>>, MHashSet<A>, HashSet<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Arr&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<HashSet<B>> bindT< A, B>(Arr<HashSet<A>> ma, Func<A, HashSet<B>> f) =>
            default(SeqTrans<MArr<HashSet<A>>, Arr<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MArr<HashSet<B>>, Arr<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Arr&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Arr&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Arr&lt;B&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Arr<B>> traverse< A, B>(Arr<HashSet<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Arr&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Arr&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Arr<A>> sequence< A>(Arr<HashSet<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<HashSet<B>> mapT< A, B>(Arr<HashSet<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MArr<HashSet<A>>, Arr<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Map<MArr<HashSet<B>>, Arr<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Arr<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<HashSet<A>>, Arr<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Arr<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<HashSet<A>>, Arr<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Arr<HashSet<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<HashSet<A>>, Arr<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Arr<HashSet<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<HashSet<A>>, Arr<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Arr&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Arr<HashSet<A>> ma, Action<A> f) =>
            default(SeqTrans<MArr<HashSet<A>>, Arr<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Arr&lt;HashSet&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Arr<HashSet<A>> filterT< A>(Arr<HashSet<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MArr<HashSet<A>>, Arr<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MArr<HashSet<A>>, Arr<HashSet<A>>, MHashSet<A>, HashSet<A>, A>(ma, 
                    a => pred(a)
                        ? default(MHashSet<A>).Pure(a)
                        : default(MHashSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Arr<HashSet<A>> plusT<NUM,  A>(Arr<HashSet<A>> x, Arr<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Arr<HashSet<A>> subtractT<NUM,  A>(Arr<HashSet<A>> x, Arr<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Arr<HashSet<A>> productT<NUM,  A>(Arr<HashSet<A>> x, Arr<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Arr<HashSet<A>> divideT<NUM,  A>(Arr<HashSet<A>> x, Arr<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Arr<HashSet<A>> appendT<SEMI,  A>(Arr<HashSet<A>> x, Arr<HashSet<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Arr<HashSet<A>> x, Arr<HashSet<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Arr<HashSet<A>> x, Arr<HashSet<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<HashSet<B>> applyT< A, B>(Func<A, B> fab, Arr<HashSet<A>> fa) =>
            default(ApplArr< HashSet<A>, HashSet<B>>).Apply(
                 default(MArr< Func<HashSet<A>, HashSet<B>>>).Pure((HashSet<A> a) => default(ApplHashSet< A, B>).Apply(
                     default(MHashSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<HashSet<B>> applyT< A, B>(Arr<HashSet<Func<A, B>>> fab, Arr<HashSet<A>> fa) =>
            default(MArr<HashSet<Func<A, B>>>).Bind<MArr<HashSet<B>>, Arr<HashSet<B>>, HashSet<B>>(fab, f =>
                default(MArr<HashSet<A>>).Bind<MArr<HashSet<B>>, Arr<HashSet<B>>, HashSet<B>>(fa, a => 
                    default(MArr<HashSet<B>>).Pure(default(ApplHashSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Arr&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Arr<HashSet<C>> applyT< A, B, C>(Func<A, B, C> fabc, Arr<HashSet<A>> fa, Arr<HashSet<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class LstT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Arr&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Lst&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Arr&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Arr<Lst<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MArr<Lst<A>>, Arr<Lst<A>>, MLst<A>, Lst<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Arr&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Lst&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Arr&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Arr<Lst<A>> ma) =>
            default(SeqTrans<MArr<Lst<A>>, Arr<Lst<A>>, MLst<A>, Lst<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Arr&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Lst<B>> bindT< A, B>(Arr<Lst<A>> ma, Func<A, Lst<B>> f) =>
            default(SeqTrans<MArr<Lst<A>>, Arr<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MArr<Lst<B>>, Arr<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Arr&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Arr&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Arr&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Lst<Arr<B>> traverse< A, B>(Arr<Lst<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Arr&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Arr&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Lst<Arr<A>> sequence< A>(Arr<Lst<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Lst<B>> mapT< A, B>(Arr<Lst<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MArr<Lst<A>>, Arr<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Map<MArr<Lst<B>>, Arr<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Arr<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Lst<A>>, Arr<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Arr<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Lst<A>>, Arr<Lst<A>>, MLst<A>, Lst<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Arr<Lst<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Lst<A>>, Arr<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Arr<Lst<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Lst<A>>, Arr<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Arr&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Arr<Lst<A>> ma, Action<A> f) =>
            default(SeqTrans<MArr<Lst<A>>, Arr<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Arr&lt;Lst&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Arr<Lst<A>> filterT< A>(Arr<Lst<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MArr<Lst<A>>, Arr<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MArr<Lst<A>>, Arr<Lst<A>>, MLst<A>, Lst<A>, A>(ma, 
                    a => pred(a)
                        ? default(MLst<A>).Pure(a)
                        : default(MLst<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Lst&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Arr<Lst<A>> plusT<NUM,  A>(Arr<Lst<A>> x, Arr<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Lst&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Arr<Lst<A>> subtractT<NUM,  A>(Arr<Lst<A>> x, Arr<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Arr<Lst<A>> productT<NUM,  A>(Arr<Lst<A>> x, Arr<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Arr<Lst<A>> divideT<NUM,  A>(Arr<Lst<A>> x, Arr<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Arr<Lst<A>> appendT<SEMI,  A>(Arr<Lst<A>> x, Arr<Lst<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Arr<Lst<A>> x, Arr<Lst<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Arr<Lst<A>> x, Arr<Lst<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Lst<B>> applyT< A, B>(Func<A, B> fab, Arr<Lst<A>> fa) =>
            default(ApplArr< Lst<A>, Lst<B>>).Apply(
                 default(MArr< Func<Lst<A>, Lst<B>>>).Pure((Lst<A> a) => default(ApplLst< A, B>).Apply(
                     default(MLst< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Lst<B>> applyT< A, B>(Arr<Lst<Func<A, B>>> fab, Arr<Lst<A>> fa) =>
            default(MArr<Lst<Func<A, B>>>).Bind<MArr<Lst<B>>, Arr<Lst<B>>, Lst<B>>(fab, f =>
                default(MArr<Lst<A>>).Bind<MArr<Lst<B>>, Arr<Lst<B>>, Lst<B>>(fa, a => 
                    default(MArr<Lst<B>>).Pure(default(ApplLst< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Lst&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Arr&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Arr<Lst<C>> applyT< A, B, C>(Func<A, B, C> fabc, Arr<Lst<A>> fa, Arr<Lst<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class FinT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Arr&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Fin&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Arr&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Arr<Fin<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MArr<Fin<A>>, Arr<Fin<A>>, MFin<A>, Fin<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Arr&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Fin&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Arr&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Arr<Fin<A>> ma) =>
            default(SeqTrans<MArr<Fin<A>>, Arr<Fin<A>>, MFin<A>, Fin<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Arr&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Fin<B>> bindT< A, B>(Arr<Fin<A>> ma, Func<A, Fin<B>> f) =>
            default(SeqTrans<MArr<Fin<A>>, Arr<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MArr<Fin<B>>, Arr<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Arr&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Arr&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Arr&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Fin<Arr<B>> traverse< A, B>(Arr<Fin<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Arr&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Arr&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Fin<Arr<A>> sequence< A>(Arr<Fin<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Fin<B>> mapT< A, B>(Arr<Fin<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MArr<Fin<A>>, Arr<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Map<MArr<Fin<B>>, Arr<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Arr<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Fin<A>>, Arr<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Arr<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Fin<A>>, Arr<Fin<A>>, MFin<A>, Fin<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Arr<Fin<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Fin<A>>, Arr<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Arr<Fin<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Fin<A>>, Arr<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Arr&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Arr<Fin<A>> ma, Action<A> f) =>
            default(SeqTrans<MArr<Fin<A>>, Arr<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Arr&lt;Fin&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Arr<Fin<A>> filterT< A>(Arr<Fin<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MArr<Fin<A>>, Arr<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MArr<Fin<A>>, Arr<Fin<A>>, MFin<A>, Fin<A>, A>(ma, 
                    a => pred(a)
                        ? default(MFin<A>).Pure(a)
                        : default(MFin<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Fin&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Arr<Fin<A>> plusT<NUM,  A>(Arr<Fin<A>> x, Arr<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Fin&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Arr<Fin<A>> subtractT<NUM,  A>(Arr<Fin<A>> x, Arr<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Arr<Fin<A>> productT<NUM,  A>(Arr<Fin<A>> x, Arr<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Arr<Fin<A>> divideT<NUM,  A>(Arr<Fin<A>> x, Arr<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Arr<Fin<A>> appendT<SEMI,  A>(Arr<Fin<A>> x, Arr<Fin<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Arr<Fin<A>> x, Arr<Fin<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Arr<Fin<A>> x, Arr<Fin<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Fin<B>> applyT< A, B>(Func<A, B> fab, Arr<Fin<A>> fa) =>
            default(ApplArr< Fin<A>, Fin<B>>).Apply(
                 default(MArr< Func<Fin<A>, Fin<B>>>).Pure((Fin<A> a) => default(ApplFin< A, B>).Apply(
                     default(MFin< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Fin<B>> applyT< A, B>(Arr<Fin<Func<A, B>>> fab, Arr<Fin<A>> fa) =>
            default(MArr<Fin<Func<A, B>>>).Bind<MArr<Fin<B>>, Arr<Fin<B>>, Fin<B>>(fab, f =>
                default(MArr<Fin<A>>).Bind<MArr<Fin<B>>, Arr<Fin<B>>, Fin<B>>(fa, a => 
                    default(MArr<Fin<B>>).Pure(default(ApplFin< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Fin&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Arr&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Arr<Fin<C>> applyT< A, B, C>(Func<A, B, C> fabc, Arr<Fin<A>> fa, Arr<Fin<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Arr&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Option&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Arr&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Arr<Option<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MArr<Option<A>>, Arr<Option<A>>, MOption<A>, Option<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Arr&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Option&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Arr&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Arr<Option<A>> ma) =>
            default(SeqTrans<MArr<Option<A>>, Arr<Option<A>>, MOption<A>, Option<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Arr&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Option<B>> bindT< A, B>(Arr<Option<A>> ma, Func<A, Option<B>> f) =>
            default(SeqTrans<MArr<Option<A>>, Arr<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MArr<Option<B>>, Arr<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Arr&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Arr&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Arr&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Option<Arr<B>> traverse< A, B>(Arr<Option<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Arr&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Arr&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Option<Arr<A>> sequence< A>(Arr<Option<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Option<B>> mapT< A, B>(Arr<Option<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MArr<Option<A>>, Arr<Option<A>>, MOption<A>, Option<A>, A>)
                .Map<MArr<Option<B>>, Arr<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Arr<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Option<A>>, Arr<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Arr<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Option<A>>, Arr<Option<A>>, MOption<A>, Option<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Arr<Option<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Option<A>>, Arr<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Arr<Option<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Option<A>>, Arr<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Arr&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Arr<Option<A>> ma, Action<A> f) =>
            default(SeqTrans<MArr<Option<A>>, Arr<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Arr&lt;Option&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Arr<Option<A>> filterT< A>(Arr<Option<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MArr<Option<A>>, Arr<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MArr<Option<A>>, Arr<Option<A>>, MOption<A>, Option<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOption<A>).Pure(a)
                        : default(MOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Option&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Arr<Option<A>> plusT<NUM,  A>(Arr<Option<A>> x, Arr<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Option&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Arr<Option<A>> subtractT<NUM,  A>(Arr<Option<A>> x, Arr<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Option&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Arr<Option<A>> productT<NUM,  A>(Arr<Option<A>> x, Arr<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Option&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Arr<Option<A>> divideT<NUM,  A>(Arr<Option<A>> x, Arr<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Option&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Arr<Option<A>> appendT<SEMI,  A>(Arr<Option<A>> x, Arr<Option<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Arr<Option<A>> x, Arr<Option<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Option&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Arr<Option<A>> x, Arr<Option<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Option<B>> applyT< A, B>(Func<A, B> fab, Arr<Option<A>> fa) =>
            default(ApplArr< Option<A>, Option<B>>).Apply(
                 default(MArr< Func<Option<A>, Option<B>>>).Pure((Option<A> a) => default(ApplOption< A, B>).Apply(
                     default(MOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Option<B>> applyT< A, B>(Arr<Option<Func<A, B>>> fab, Arr<Option<A>> fa) =>
            default(MArr<Option<Func<A, B>>>).Bind<MArr<Option<B>>, Arr<Option<B>>, Option<B>>(fab, f =>
                default(MArr<Option<A>>).Bind<MArr<Option<B>>, Arr<Option<B>>, Option<B>>(fa, a => 
                    default(MArr<Option<B>>).Pure(default(ApplOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Option&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Arr&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Option&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Arr<Option<C>> applyT< A, B, C>(Func<A, B, C> fabc, Arr<Option<A>> fa, Arr<Option<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Arr&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Arr&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Arr<OptionUnsafe<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MArr<OptionUnsafe<A>>, Arr<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Arr&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Arr&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Arr<OptionUnsafe<A>> ma) =>
            default(SeqTrans<MArr<OptionUnsafe<A>>, Arr<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Arr&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<OptionUnsafe<B>> bindT< A, B>(Arr<OptionUnsafe<A>> ma, Func<A, OptionUnsafe<B>> f) =>
            default(SeqTrans<MArr<OptionUnsafe<A>>, Arr<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MArr<OptionUnsafe<B>>, Arr<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Arr&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Arr&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Arr&lt;B&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Arr<B>> traverse< A, B>(Arr<OptionUnsafe<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Arr&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Arr&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Arr<A>> sequence< A>(Arr<OptionUnsafe<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<OptionUnsafe<B>> mapT< A, B>(Arr<OptionUnsafe<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MArr<OptionUnsafe<A>>, Arr<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Map<MArr<OptionUnsafe<B>>, Arr<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Arr<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<OptionUnsafe<A>>, Arr<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Arr<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<OptionUnsafe<A>>, Arr<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Arr<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<OptionUnsafe<A>>, Arr<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Arr<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<OptionUnsafe<A>>, Arr<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Arr&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Arr<OptionUnsafe<A>> ma, Action<A> f) =>
            default(SeqTrans<MArr<OptionUnsafe<A>>, Arr<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Arr&lt;OptionUnsafe&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Arr<OptionUnsafe<A>> filterT< A>(Arr<OptionUnsafe<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MArr<OptionUnsafe<A>>, Arr<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MArr<OptionUnsafe<A>>, Arr<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOptionUnsafe<A>).Pure(a)
                        : default(MOptionUnsafe<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Arr<OptionUnsafe<A>> plusT<NUM,  A>(Arr<OptionUnsafe<A>> x, Arr<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Arr<OptionUnsafe<A>> subtractT<NUM,  A>(Arr<OptionUnsafe<A>> x, Arr<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Arr<OptionUnsafe<A>> productT<NUM,  A>(Arr<OptionUnsafe<A>> x, Arr<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Arr<OptionUnsafe<A>> divideT<NUM,  A>(Arr<OptionUnsafe<A>> x, Arr<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Arr<OptionUnsafe<A>> appendT<SEMI,  A>(Arr<OptionUnsafe<A>> x, Arr<OptionUnsafe<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Arr<OptionUnsafe<A>> x, Arr<OptionUnsafe<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Arr<OptionUnsafe<A>> x, Arr<OptionUnsafe<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<OptionUnsafe<B>> applyT< A, B>(Func<A, B> fab, Arr<OptionUnsafe<A>> fa) =>
            default(ApplArr< OptionUnsafe<A>, OptionUnsafe<B>>).Apply(
                 default(MArr< Func<OptionUnsafe<A>, OptionUnsafe<B>>>).Pure((OptionUnsafe<A> a) => default(ApplOptionUnsafe< A, B>).Apply(
                     default(MOptionUnsafe< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<OptionUnsafe<B>> applyT< A, B>(Arr<OptionUnsafe<Func<A, B>>> fab, Arr<OptionUnsafe<A>> fa) =>
            default(MArr<OptionUnsafe<Func<A, B>>>).Bind<MArr<OptionUnsafe<B>>, Arr<OptionUnsafe<B>>, OptionUnsafe<B>>(fab, f =>
                default(MArr<OptionUnsafe<A>>).Bind<MArr<OptionUnsafe<B>>, Arr<OptionUnsafe<B>>, OptionUnsafe<B>>(fa, a => 
                    default(MArr<OptionUnsafe<B>>).Pure(default(ApplOptionUnsafe< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Arr&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Arr<OptionUnsafe<C>> applyT< A, B, C>(Func<A, B, C> fabc, Arr<OptionUnsafe<A>> fa, Arr<OptionUnsafe<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Arr&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Either&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Arr&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Arr<Either<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MArr<Either<L, A>>, Arr<Either<L, A>>, MEither<L, A>, Either<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Arr&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Either&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Arr&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Arr<Either<L, A>> ma) =>
            default(SeqTrans<MArr<Either<L, A>>, Arr<Either<L, A>>, MEither<L, A>, Either<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Arr&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Either<L, B>> bindT<L, A, B>(Arr<Either<L, A>> ma, Func<A, Either<L, B>> f) =>
            default(SeqTrans<MArr<Either<L, A>>, Arr<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MArr<Either<L, B>>, Arr<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Arr&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Arr&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Arr&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Arr<B>> traverse<L, A, B>(Arr<Either<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Arr&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Arr&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Arr<A>> sequence<L, A>(Arr<Either<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Either<L, B>> mapT<L, A, B>(Arr<Either<L, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MArr<Either<L, A>>, Arr<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Map<MArr<Either<L, B>>, Arr<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Arr<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Either<L, A>>, Arr<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Arr<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Either<L, A>>, Arr<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Arr<Either<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Either<L, A>>, Arr<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Arr<Either<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Either<L, A>>, Arr<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Arr&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Arr<Either<L, A>> ma, Action<A> f) =>
            default(SeqTrans<MArr<Either<L, A>>, Arr<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Arr&lt;Either&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Arr<Either<L, A>> filterT<L, A>(Arr<Either<L, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MArr<Either<L, A>>, Arr<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MArr<Either<L, A>>, Arr<Either<L, A>>, MEither<L, A>, Either<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEither<L, A>).Pure(a)
                        : default(MEither<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Arr<Either<L, A>> plusT<NUM, L, A>(Arr<Either<L, A>> x, Arr<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Arr<Either<L, A>> subtractT<NUM, L, A>(Arr<Either<L, A>> x, Arr<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Arr<Either<L, A>> productT<NUM, L, A>(Arr<Either<L, A>> x, Arr<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Arr<Either<L, A>> divideT<NUM, L, A>(Arr<Either<L, A>> x, Arr<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Arr<Either<L, A>> appendT<SEMI, L, A>(Arr<Either<L, A>> x, Arr<Either<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Arr<Either<L, A>> x, Arr<Either<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Arr<Either<L, A>> x, Arr<Either<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Either<L, B>> applyT<L, A, B>(Func<A, B> fab, Arr<Either<L, A>> fa) =>
            default(ApplArr< Either<L, A>, Either<L, B>>).Apply(
                 default(MArr< Func<Either<L, A>, Either<L, B>>>).Pure((Either<L, A> a) => default(ApplEither<L, A, B>).Apply(
                     default(MEither<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Either<L, B>> applyT<L, A, B>(Arr<Either<L, Func<A, B>>> fab, Arr<Either<L, A>> fa) =>
            default(MArr<Either<L, Func<A, B>>>).Bind<MArr<Either<L, B>>, Arr<Either<L, B>>, Either<L, B>>(fab, f =>
                default(MArr<Either<L, A>>).Bind<MArr<Either<L, B>>, Arr<Either<L, B>>, Either<L, B>>(fa, a => 
                    default(MArr<Either<L, B>>).Pure(default(ApplEither<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Arr&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Arr<Either<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Arr<Either<L, A>> fa, Arr<Either<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Arr<EitherUnsafe<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MArr<EitherUnsafe<L, A>>, Arr<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Arr<EitherUnsafe<L, A>> ma) =>
            default(SeqTrans<MArr<EitherUnsafe<L, A>>, Arr<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<EitherUnsafe<L, B>> bindT<L, A, B>(Arr<EitherUnsafe<L, A>> ma, Func<A, EitherUnsafe<L, B>> f) =>
            default(SeqTrans<MArr<EitherUnsafe<L, A>>, Arr<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MArr<EitherUnsafe<L, B>>, Arr<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Arr&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Arr&lt;B&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Arr<B>> traverse<L, A, B>(Arr<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Arr<A>> sequence<L, A>(Arr<EitherUnsafe<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<EitherUnsafe<L, B>> mapT<L, A, B>(Arr<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MArr<EitherUnsafe<L, A>>, Arr<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Map<MArr<EitherUnsafe<L, B>>, Arr<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Arr<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<EitherUnsafe<L, A>>, Arr<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Arr<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<EitherUnsafe<L, A>>, Arr<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Arr<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<EitherUnsafe<L, A>>, Arr<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Arr<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<EitherUnsafe<L, A>>, Arr<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Arr<EitherUnsafe<L, A>> ma, Action<A> f) =>
            default(SeqTrans<MArr<EitherUnsafe<L, A>>, Arr<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Arr<EitherUnsafe<L, A>> filterT<L, A>(Arr<EitherUnsafe<L, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MArr<EitherUnsafe<L, A>>, Arr<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MArr<EitherUnsafe<L, A>>, Arr<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEitherUnsafe<L, A>).Pure(a)
                        : default(MEitherUnsafe<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Arr<EitherUnsafe<L, A>> plusT<NUM, L, A>(Arr<EitherUnsafe<L, A>> x, Arr<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Arr<EitherUnsafe<L, A>> subtractT<NUM, L, A>(Arr<EitherUnsafe<L, A>> x, Arr<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Arr<EitherUnsafe<L, A>> productT<NUM, L, A>(Arr<EitherUnsafe<L, A>> x, Arr<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Arr<EitherUnsafe<L, A>> divideT<NUM, L, A>(Arr<EitherUnsafe<L, A>> x, Arr<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Arr<EitherUnsafe<L, A>> appendT<SEMI, L, A>(Arr<EitherUnsafe<L, A>> x, Arr<EitherUnsafe<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Arr<EitherUnsafe<L, A>> x, Arr<EitherUnsafe<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Arr<EitherUnsafe<L, A>> x, Arr<EitherUnsafe<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<EitherUnsafe<L, B>> applyT<L, A, B>(Func<A, B> fab, Arr<EitherUnsafe<L, A>> fa) =>
            default(ApplArr< EitherUnsafe<L, A>, EitherUnsafe<L, B>>).Apply(
                 default(MArr< Func<EitherUnsafe<L, A>, EitherUnsafe<L, B>>>).Pure((EitherUnsafe<L, A> a) => default(ApplEitherUnsafe<L, A, B>).Apply(
                     default(MEitherUnsafe<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<EitherUnsafe<L, B>> applyT<L, A, B>(Arr<EitherUnsafe<L, Func<A, B>>> fab, Arr<EitherUnsafe<L, A>> fa) =>
            default(MArr<EitherUnsafe<L, Func<A, B>>>).Bind<MArr<EitherUnsafe<L, B>>, Arr<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fab, f =>
                default(MArr<EitherUnsafe<L, A>>).Bind<MArr<EitherUnsafe<L, B>>, Arr<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fa, a => 
                    default(MArr<EitherUnsafe<L, B>>).Pure(default(ApplEitherUnsafe<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Arr<EitherUnsafe<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Arr<EitherUnsafe<L, A>> fa, Arr<EitherUnsafe<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Arr&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Try&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Arr&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Arr<Try<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MArr<Try<A>>, Arr<Try<A>>, MTry<A>, Try<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Arr&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Try&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Arr&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Arr<Try<A>> ma) =>
            default(SeqTrans<MArr<Try<A>>, Arr<Try<A>>, MTry<A>, Try<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Arr&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Try<B>> bindT< A, B>(Arr<Try<A>> ma, Func<A, Try<B>> f) =>
            default(SeqTrans<MArr<Try<A>>, Arr<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MArr<Try<B>>, Arr<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Arr&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Arr&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Arr&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Try<Arr<B>> traverse< A, B>(Arr<Try<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Arr&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Arr&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Try<Arr<A>> sequence< A>(Arr<Try<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Try<B>> mapT< A, B>(Arr<Try<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MArr<Try<A>>, Arr<Try<A>>, MTry<A>, Try<A>, A>)
                .Map<MArr<Try<B>>, Arr<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Arr<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Try<A>>, Arr<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Arr<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Try<A>>, Arr<Try<A>>, MTry<A>, Try<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Arr<Try<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Try<A>>, Arr<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Arr<Try<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Try<A>>, Arr<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Arr&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Arr<Try<A>> ma, Action<A> f) =>
            default(SeqTrans<MArr<Try<A>>, Arr<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Arr&lt;Try&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Arr<Try<A>> filterT< A>(Arr<Try<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MArr<Try<A>>, Arr<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MArr<Try<A>>, Arr<Try<A>>, MTry<A>, Try<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTry<A>).Pure(a)
                        : default(MTry<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Try&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Arr<Try<A>> plusT<NUM,  A>(Arr<Try<A>> x, Arr<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Try&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Arr<Try<A>> subtractT<NUM,  A>(Arr<Try<A>> x, Arr<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Try&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Arr<Try<A>> productT<NUM,  A>(Arr<Try<A>> x, Arr<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Try&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Arr<Try<A>> divideT<NUM,  A>(Arr<Try<A>> x, Arr<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Try&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Arr<Try<A>> appendT<SEMI,  A>(Arr<Try<A>> x, Arr<Try<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Arr<Try<A>> x, Arr<Try<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Try&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Arr<Try<A>> x, Arr<Try<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Try<B>> applyT< A, B>(Func<A, B> fab, Arr<Try<A>> fa) =>
            default(ApplArr< Try<A>, Try<B>>).Apply(
                 default(MArr< Func<Try<A>, Try<B>>>).Pure((Try<A> a) => default(ApplTry< A, B>).Apply(
                     default(MTry< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Try<B>> applyT< A, B>(Arr<Try<Func<A, B>>> fab, Arr<Try<A>> fa) =>
            default(MArr<Try<Func<A, B>>>).Bind<MArr<Try<B>>, Arr<Try<B>>, Try<B>>(fab, f =>
                default(MArr<Try<A>>).Bind<MArr<Try<B>>, Arr<Try<B>>, Try<B>>(fa, a => 
                    default(MArr<Try<B>>).Pure(default(ApplTry< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Try&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Arr&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Try&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Arr<Try<C>> applyT< A, B, C>(Func<A, B, C> fabc, Arr<Try<A>> fa, Arr<Try<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryOptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Arr&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;TryOption&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Arr&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Arr<TryOption<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MArr<TryOption<A>>, Arr<TryOption<A>>, MTryOption<A>, TryOption<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Arr&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;TryOption&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Arr&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Arr<TryOption<A>> ma) =>
            default(SeqTrans<MArr<TryOption<A>>, Arr<TryOption<A>>, MTryOption<A>, TryOption<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Arr&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<TryOption<B>> bindT< A, B>(Arr<TryOption<A>> ma, Func<A, TryOption<B>> f) =>
            default(SeqTrans<MArr<TryOption<A>>, Arr<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MArr<TryOption<B>>, Arr<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Arr&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Arr&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Arr&lt;B&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Arr<B>> traverse< A, B>(Arr<TryOption<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Arr&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Arr&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Arr<A>> sequence< A>(Arr<TryOption<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<TryOption<B>> mapT< A, B>(Arr<TryOption<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MArr<TryOption<A>>, Arr<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Map<MArr<TryOption<B>>, Arr<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Arr<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<TryOption<A>>, Arr<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Arr<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<TryOption<A>>, Arr<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Arr<TryOption<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<TryOption<A>>, Arr<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Arr<TryOption<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<TryOption<A>>, Arr<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Arr&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Arr<TryOption<A>> ma, Action<A> f) =>
            default(SeqTrans<MArr<TryOption<A>>, Arr<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Arr&lt;TryOption&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Arr<TryOption<A>> filterT< A>(Arr<TryOption<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MArr<TryOption<A>>, Arr<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MArr<TryOption<A>>, Arr<TryOption<A>>, MTryOption<A>, TryOption<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTryOption<A>).Pure(a)
                        : default(MTryOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Arr<TryOption<A>> plusT<NUM,  A>(Arr<TryOption<A>> x, Arr<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Arr<TryOption<A>> subtractT<NUM,  A>(Arr<TryOption<A>> x, Arr<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Arr<TryOption<A>> productT<NUM,  A>(Arr<TryOption<A>> x, Arr<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Arr<TryOption<A>> divideT<NUM,  A>(Arr<TryOption<A>> x, Arr<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Arr<TryOption<A>> appendT<SEMI,  A>(Arr<TryOption<A>> x, Arr<TryOption<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Arr<TryOption<A>> x, Arr<TryOption<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Arr<TryOption<A>> x, Arr<TryOption<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<TryOption<B>> applyT< A, B>(Func<A, B> fab, Arr<TryOption<A>> fa) =>
            default(ApplArr< TryOption<A>, TryOption<B>>).Apply(
                 default(MArr< Func<TryOption<A>, TryOption<B>>>).Pure((TryOption<A> a) => default(ApplTryOption< A, B>).Apply(
                     default(MTryOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<TryOption<B>> applyT< A, B>(Arr<TryOption<Func<A, B>>> fab, Arr<TryOption<A>> fa) =>
            default(MArr<TryOption<Func<A, B>>>).Bind<MArr<TryOption<B>>, Arr<TryOption<B>>, TryOption<B>>(fab, f =>
                default(MArr<TryOption<A>>).Bind<MArr<TryOption<B>>, Arr<TryOption<B>>, TryOption<B>>(fa, a => 
                    default(MArr<TryOption<B>>).Pure(default(ApplTryOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Arr&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Arr<TryOption<C>> applyT< A, B, C>(Func<A, B, C> fabc, Arr<TryOption<A>> fa, Arr<TryOption<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class IEnumerableT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Arr&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;IEnumerable&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Arr&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Arr<IEnumerable<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MArr<IEnumerable<A>>, Arr<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Arr&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;IEnumerable&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Arr&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Arr<IEnumerable<A>> ma) =>
            default(SeqTrans<MArr<IEnumerable<A>>, Arr<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Arr&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<IEnumerable<B>> bindT< A, B>(Arr<IEnumerable<A>> ma, Func<A, IEnumerable<B>> f) =>
            default(SeqTrans<MArr<IEnumerable<A>>, Arr<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MArr<IEnumerable<B>>, Arr<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Arr&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Arr&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Arr&lt;B&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Arr<B>> traverse< A, B>(Arr<IEnumerable<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Arr&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Arr&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Arr<A>> sequence< A>(Arr<IEnumerable<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<IEnumerable<B>> mapT< A, B>(Arr<IEnumerable<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MArr<IEnumerable<A>>, Arr<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Map<MArr<IEnumerable<B>>, Arr<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Arr<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<IEnumerable<A>>, Arr<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Arr<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<IEnumerable<A>>, Arr<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Arr<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<IEnumerable<A>>, Arr<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Arr<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<IEnumerable<A>>, Arr<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Arr&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Arr<IEnumerable<A>> ma, Action<A> f) =>
            default(SeqTrans<MArr<IEnumerable<A>>, Arr<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Arr&lt;IEnumerable&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Arr<IEnumerable<A>> filterT< A>(Arr<IEnumerable<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MArr<IEnumerable<A>>, Arr<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MArr<IEnumerable<A>>, Arr<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>(ma, 
                    a => pred(a)
                        ? default(MEnumerable<A>).Pure(a)
                        : default(MEnumerable<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Arr<IEnumerable<A>> plusT<NUM,  A>(Arr<IEnumerable<A>> x, Arr<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Arr<IEnumerable<A>> subtractT<NUM,  A>(Arr<IEnumerable<A>> x, Arr<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Arr<IEnumerable<A>> productT<NUM,  A>(Arr<IEnumerable<A>> x, Arr<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Arr<IEnumerable<A>> divideT<NUM,  A>(Arr<IEnumerable<A>> x, Arr<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Arr<IEnumerable<A>> appendT<SEMI,  A>(Arr<IEnumerable<A>> x, Arr<IEnumerable<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Arr<IEnumerable<A>> x, Arr<IEnumerable<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Arr<IEnumerable<A>> x, Arr<IEnumerable<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<IEnumerable<B>> applyT< A, B>(Func<A, B> fab, Arr<IEnumerable<A>> fa) =>
            default(ApplArr< IEnumerable<A>, IEnumerable<B>>).Apply(
                 default(MArr< Func<IEnumerable<A>, IEnumerable<B>>>).Pure((IEnumerable<A> a) => default(ApplEnumerable< A, B>).Apply(
                     default(MEnumerable< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<IEnumerable<B>> applyT< A, B>(Arr<IEnumerable<Func<A, B>>> fab, Arr<IEnumerable<A>> fa) =>
            default(MArr<IEnumerable<Func<A, B>>>).Bind<MArr<IEnumerable<B>>, Arr<IEnumerable<B>>, IEnumerable<B>>(fab, f =>
                default(MArr<IEnumerable<A>>).Bind<MArr<IEnumerable<B>>, Arr<IEnumerable<B>>, IEnumerable<B>>(fa, a => 
                    default(MArr<IEnumerable<B>>).Pure(default(ApplEnumerable< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Arr&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Arr<IEnumerable<C>> applyT< A, B, C>(Func<A, B, C> fabc, Arr<IEnumerable<A>> fa, Arr<IEnumerable<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SeqT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Arr&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Seq&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Arr&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Arr<Seq<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MArr<Seq<A>>, Arr<Seq<A>>, MSeq<A>, Seq<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Arr&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Seq&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Arr&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Arr<Seq<A>> ma) =>
            default(SeqTrans<MArr<Seq<A>>, Arr<Seq<A>>, MSeq<A>, Seq<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Arr&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Seq<B>> bindT< A, B>(Arr<Seq<A>> ma, Func<A, Seq<B>> f) =>
            default(SeqTrans<MArr<Seq<A>>, Arr<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MArr<Seq<B>>, Arr<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Arr&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Arr&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Arr&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Seq<Arr<B>> traverse< A, B>(Arr<Seq<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Arr&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Arr&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Seq<Arr<A>> sequence< A>(Arr<Seq<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Seq<B>> mapT< A, B>(Arr<Seq<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MArr<Seq<A>>, Arr<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Map<MArr<Seq<B>>, Arr<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Arr<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Seq<A>>, Arr<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Arr<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Seq<A>>, Arr<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Arr<Seq<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Seq<A>>, Arr<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Arr<Seq<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Seq<A>>, Arr<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Arr&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Arr<Seq<A>> ma, Action<A> f) =>
            default(SeqTrans<MArr<Seq<A>>, Arr<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Arr&lt;Seq&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Arr<Seq<A>> filterT< A>(Arr<Seq<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MArr<Seq<A>>, Arr<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MArr<Seq<A>>, Arr<Seq<A>>, MSeq<A>, Seq<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSeq<A>).Pure(a)
                        : default(MSeq<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Seq&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Arr<Seq<A>> plusT<NUM,  A>(Arr<Seq<A>> x, Arr<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Seq&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Arr<Seq<A>> subtractT<NUM,  A>(Arr<Seq<A>> x, Arr<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Arr<Seq<A>> productT<NUM,  A>(Arr<Seq<A>> x, Arr<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Arr<Seq<A>> divideT<NUM,  A>(Arr<Seq<A>> x, Arr<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Arr<Seq<A>> appendT<SEMI,  A>(Arr<Seq<A>> x, Arr<Seq<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Arr<Seq<A>> x, Arr<Seq<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Arr<Seq<A>> x, Arr<Seq<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Seq<B>> applyT< A, B>(Func<A, B> fab, Arr<Seq<A>> fa) =>
            default(ApplArr< Seq<A>, Seq<B>>).Apply(
                 default(MArr< Func<Seq<A>, Seq<B>>>).Pure((Seq<A> a) => default(ApplSeq< A, B>).Apply(
                     default(MSeq< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Seq<B>> applyT< A, B>(Arr<Seq<Func<A, B>>> fab, Arr<Seq<A>> fa) =>
            default(MArr<Seq<Func<A, B>>>).Bind<MArr<Seq<B>>, Arr<Seq<B>>, Seq<B>>(fab, f =>
                default(MArr<Seq<A>>).Bind<MArr<Seq<B>>, Arr<Seq<B>>, Seq<B>>(fa, a => 
                    default(MArr<Seq<B>>).Pure(default(ApplSeq< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Seq&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Arr&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Arr<Seq<C>> applyT< A, B, C>(Func<A, B, C> fabc, Arr<Seq<A>> fa, Arr<Seq<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Arr&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Set&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Arr&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Arr<Set<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MArr<Set<A>>, Arr<Set<A>>, MSet<A>, Set<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Arr&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Set&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Arr&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Arr<Set<A>> ma) =>
            default(SeqTrans<MArr<Set<A>>, Arr<Set<A>>, MSet<A>, Set<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Arr&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Set<B>> bindT< A, B>(Arr<Set<A>> ma, Func<A, Set<B>> f) =>
            default(SeqTrans<MArr<Set<A>>, Arr<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MArr<Set<B>>, Arr<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Arr&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Arr&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Arr&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Set<Arr<B>> traverse< A, B>(Arr<Set<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Arr&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Arr&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Set<Arr<A>> sequence< A>(Arr<Set<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Set<B>> mapT< A, B>(Arr<Set<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MArr<Set<A>>, Arr<Set<A>>, MSet<A>, Set<A>, A>)
                .Map<MArr<Set<B>>, Arr<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Arr<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Set<A>>, Arr<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Arr<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Set<A>>, Arr<Set<A>>, MSet<A>, Set<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Arr<Set<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Set<A>>, Arr<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Arr<Set<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Set<A>>, Arr<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Arr&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Arr<Set<A>> ma, Action<A> f) =>
            default(SeqTrans<MArr<Set<A>>, Arr<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Arr&lt;Set&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Arr<Set<A>> filterT< A>(Arr<Set<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MArr<Set<A>>, Arr<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MArr<Set<A>>, Arr<Set<A>>, MSet<A>, Set<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSet<A>).Pure(a)
                        : default(MSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Set&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Arr<Set<A>> plusT<NUM,  A>(Arr<Set<A>> x, Arr<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Set&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Arr<Set<A>> subtractT<NUM,  A>(Arr<Set<A>> x, Arr<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Set&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Arr<Set<A>> productT<NUM,  A>(Arr<Set<A>> x, Arr<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Set&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Arr<Set<A>> divideT<NUM,  A>(Arr<Set<A>> x, Arr<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Set&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Arr<Set<A>> appendT<SEMI,  A>(Arr<Set<A>> x, Arr<Set<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Arr<Set<A>> x, Arr<Set<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Set&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Arr<Set<A>> x, Arr<Set<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Set<B>> applyT< A, B>(Func<A, B> fab, Arr<Set<A>> fa) =>
            default(ApplArr< Set<A>, Set<B>>).Apply(
                 default(MArr< Func<Set<A>, Set<B>>>).Pure((Set<A> a) => default(ApplSet< A, B>).Apply(
                     default(MSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Set<B>> applyT< A, B>(Arr<Set<Func<A, B>>> fab, Arr<Set<A>> fa) =>
            default(MArr<Set<Func<A, B>>>).Bind<MArr<Set<B>>, Arr<Set<B>>, Set<B>>(fab, f =>
                default(MArr<Set<A>>).Bind<MArr<Set<B>>, Arr<Set<B>>, Set<B>>(fa, a => 
                    default(MArr<Set<B>>).Pure(default(ApplSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Set&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Arr&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Set&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Arr<Set<C>> applyT< A, B, C>(Func<A, B, C> fabc, Arr<Set<A>> fa, Arr<Set<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ValidationT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Arr&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Arr&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Arr<Validation<FAIL, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MArr<Validation<FAIL, A>>, Arr<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Arr&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Arr&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Arr<Validation<FAIL, A>> ma) =>
            default(SeqTrans<MArr<Validation<FAIL, A>>, Arr<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Arr&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Validation<FAIL, B>> bindT<FAIL, A, B>(Arr<Validation<FAIL, A>> ma, Func<A, Validation<FAIL, B>> f) =>
            default(SeqTrans<MArr<Validation<FAIL, A>>, Arr<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MArr<Validation<FAIL, B>>, Arr<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Arr&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Arr&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Arr&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Arr<B>> traverse<FAIL, A, B>(Arr<Validation<FAIL, A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Arr&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Arr&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Arr<A>> sequence<FAIL, A>(Arr<Validation<FAIL, A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Arr<Validation<FAIL, B>> mapT<FAIL, A, B>(Arr<Validation<FAIL, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MArr<Validation<FAIL, A>>, Arr<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Map<MArr<Validation<FAIL, B>>, Arr<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Arr<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Validation<FAIL, A>>, Arr<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Arr&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Arr<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MArr<Validation<FAIL, A>>, Arr<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Arr<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Validation<FAIL, A>>, Arr<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Arr<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MArr<Validation<FAIL, A>>, Arr<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Arr&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Arr<Validation<FAIL, A>> ma, Action<A> f) =>
            default(SeqTrans<MArr<Validation<FAIL, A>>, Arr<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Arr&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Arr&lt;Validation&lt;FAIL, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Arr<Validation<FAIL, A>> filterT<FAIL, A>(Arr<Validation<FAIL, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MArr<Validation<FAIL, A>>, Arr<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MArr<Validation<FAIL, A>>, Arr<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>(ma, 
                    a => pred(a)
                        ? default(MValidation<FAIL, A>).Pure(a)
                        : default(MValidation<FAIL, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Arr<Validation<FAIL, A>> plusT<NUM, FAIL, A>(Arr<Validation<FAIL, A>> x, Arr<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Arr<Validation<FAIL, A>> subtractT<NUM, FAIL, A>(Arr<Validation<FAIL, A>> x, Arr<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Arr<Validation<FAIL, A>> productT<NUM, FAIL, A>(Arr<Validation<FAIL, A>> x, Arr<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Arr<Validation<FAIL, A>> divideT<NUM, FAIL, A>(Arr<Validation<FAIL, A>> x, Arr<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Arr<Validation<FAIL, A>> appendT<SEMI, FAIL, A>(Arr<Validation<FAIL, A>> x, Arr<Validation<FAIL, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Arr<Validation<FAIL, A>> x, Arr<Validation<FAIL, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Arr&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Arr<Validation<FAIL, A>> x, Arr<Validation<FAIL, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Validation<FAIL, B>> applyT<FAIL, A, B>(Func<A, B> fab, Arr<Validation<FAIL, A>> fa) =>
            default(ApplArr< Validation<FAIL, A>, Validation<FAIL, B>>).Apply(
                 default(MArr< Func<Validation<FAIL, A>, Validation<FAIL, B>>>).Pure((Validation<FAIL, A> a) => default(ApplValidation<FAIL, A, B>).Apply(
                     default(MValidation<FAIL, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Arr<Validation<FAIL, B>> applyT<FAIL, A, B>(Arr<Validation<FAIL, Func<A, B>>> fab, Arr<Validation<FAIL, A>> fa) =>
            default(MArr<Validation<FAIL, Func<A, B>>>).Bind<MArr<Validation<FAIL, B>>, Arr<Validation<FAIL, B>>, Validation<FAIL, B>>(fab, f =>
                default(MArr<Validation<FAIL, A>>).Bind<MArr<Validation<FAIL, B>>, Arr<Validation<FAIL, B>>, Validation<FAIL, B>>(fa, a => 
                    default(MArr<Validation<FAIL, B>>).Pure(default(ApplValidation<FAIL, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Arr&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Arr&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Arr&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Arr<Validation<FAIL, C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Arr<Validation<FAIL, A>> fa, Arr<Validation<FAIL, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ArrT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `HashSet&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Arr&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `HashSet&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(HashSet<Arr<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MHashSet<Arr<A>>, HashSet<Arr<A>>, MArr<A>, Arr<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `HashSet&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Arr&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `HashSet&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(HashSet<Arr<A>> ma) =>
            default(SeqTrans<MHashSet<Arr<A>>, HashSet<Arr<A>>, MArr<A>, Arr<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`HashSet&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Arr<B>> bindT< A, B>(HashSet<Arr<A>> ma, Func<A, Arr<B>> f) =>
            default(SeqTrans<MHashSet<Arr<A>>, HashSet<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MHashSet<Arr<B>>, HashSet<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `HashSet&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;HashSet&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;HashSet&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Arr<HashSet<B>> traverse< A, B>(HashSet<Arr<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `HashSet&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;HashSet&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Arr<HashSet<A>> sequence< A>(HashSet<Arr<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Arr<B>> mapT< A, B>(HashSet<Arr<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MHashSet<Arr<A>>, HashSet<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Map<MHashSet<Arr<B>>, HashSet<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(HashSet<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Arr<A>>, HashSet<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(HashSet<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Arr<A>>, HashSet<Arr<A>>, MArr<A>, Arr<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(HashSet<Arr<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Arr<A>>, HashSet<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(HashSet<Arr<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Arr<A>>, HashSet<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `HashSet&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(HashSet<Arr<A>> ma, Action<A> f) =>
            default(SeqTrans<MHashSet<Arr<A>>, HashSet<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`HashSet&lt;Arr&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static HashSet<Arr<A>> filterT< A>(HashSet<Arr<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MHashSet<Arr<A>>, HashSet<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MHashSet<Arr<A>>, HashSet<Arr<A>>, MArr<A>, Arr<A>, A>(ma, 
                    a => pred(a)
                        ? default(MArr<A>).Pure(a)
                        : default(MArr<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Arr&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static HashSet<Arr<A>> plusT<NUM,  A>(HashSet<Arr<A>> x, HashSet<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Arr&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static HashSet<Arr<A>> subtractT<NUM,  A>(HashSet<Arr<A>> x, HashSet<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static HashSet<Arr<A>> productT<NUM,  A>(HashSet<Arr<A>> x, HashSet<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static HashSet<Arr<A>> divideT<NUM,  A>(HashSet<Arr<A>> x, HashSet<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static HashSet<Arr<A>> appendT<SEMI,  A>(HashSet<Arr<A>> x, HashSet<Arr<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(HashSet<Arr<A>> x, HashSet<Arr<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(HashSet<Arr<A>> x, HashSet<Arr<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Arr<B>> applyT< A, B>(Func<A, B> fab, HashSet<Arr<A>> fa) =>
            default(ApplHashSet< Arr<A>, Arr<B>>).Apply(
                 default(MHashSet< Func<Arr<A>, Arr<B>>>).Pure((Arr<A> a) => default(ApplArr< A, B>).Apply(
                     default(MArr< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Arr<B>> applyT< A, B>(HashSet<Arr<Func<A, B>>> fab, HashSet<Arr<A>> fa) =>
            default(MHashSet<Arr<Func<A, B>>>).Bind<MHashSet<Arr<B>>, HashSet<Arr<B>>, Arr<B>>(fab, f =>
                default(MHashSet<Arr<A>>).Bind<MHashSet<Arr<B>>, HashSet<Arr<B>>, Arr<B>>(fa, a => 
                    default(MHashSet<Arr<B>>).Pure(default(ApplArr< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Arr&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `HashSet&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static HashSet<Arr<C>> applyT< A, B, C>(Func<A, B, C> fabc, HashSet<Arr<A>> fa, HashSet<Arr<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class HashSetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `HashSet&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;HashSet&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `HashSet&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(HashSet<HashSet<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MHashSet<HashSet<A>>, HashSet<HashSet<A>>, MHashSet<A>, HashSet<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `HashSet&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;HashSet&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `HashSet&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(HashSet<HashSet<A>> ma) =>
            default(SeqTrans<MHashSet<HashSet<A>>, HashSet<HashSet<A>>, MHashSet<A>, HashSet<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`HashSet&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<HashSet<B>> bindT< A, B>(HashSet<HashSet<A>> ma, Func<A, HashSet<B>> f) =>
            default(SeqTrans<MHashSet<HashSet<A>>, HashSet<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MHashSet<HashSet<B>>, HashSet<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `HashSet&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;HashSet&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;HashSet&lt;B&gt;&gt;`</returns>
        [Pure]
        public static HashSet<HashSet<B>> traverse< A, B>(HashSet<HashSet<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `HashSet&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;HashSet&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static HashSet<HashSet<A>> sequence< A>(HashSet<HashSet<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<HashSet<B>> mapT< A, B>(HashSet<HashSet<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MHashSet<HashSet<A>>, HashSet<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Map<MHashSet<HashSet<B>>, HashSet<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(HashSet<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<HashSet<A>>, HashSet<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(HashSet<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<HashSet<A>>, HashSet<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(HashSet<HashSet<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<HashSet<A>>, HashSet<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(HashSet<HashSet<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<HashSet<A>>, HashSet<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `HashSet&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(HashSet<HashSet<A>> ma, Action<A> f) =>
            default(SeqTrans<MHashSet<HashSet<A>>, HashSet<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`HashSet&lt;HashSet&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static HashSet<HashSet<A>> filterT< A>(HashSet<HashSet<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MHashSet<HashSet<A>>, HashSet<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MHashSet<HashSet<A>>, HashSet<HashSet<A>>, MHashSet<A>, HashSet<A>, A>(ma, 
                    a => pred(a)
                        ? default(MHashSet<A>).Pure(a)
                        : default(MHashSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static HashSet<HashSet<A>> plusT<NUM,  A>(HashSet<HashSet<A>> x, HashSet<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static HashSet<HashSet<A>> subtractT<NUM,  A>(HashSet<HashSet<A>> x, HashSet<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static HashSet<HashSet<A>> productT<NUM,  A>(HashSet<HashSet<A>> x, HashSet<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static HashSet<HashSet<A>> divideT<NUM,  A>(HashSet<HashSet<A>> x, HashSet<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static HashSet<HashSet<A>> appendT<SEMI,  A>(HashSet<HashSet<A>> x, HashSet<HashSet<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(HashSet<HashSet<A>> x, HashSet<HashSet<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(HashSet<HashSet<A>> x, HashSet<HashSet<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<HashSet<B>> applyT< A, B>(Func<A, B> fab, HashSet<HashSet<A>> fa) =>
            default(ApplHashSet< HashSet<A>, HashSet<B>>).Apply(
                 default(MHashSet< Func<HashSet<A>, HashSet<B>>>).Pure((HashSet<A> a) => default(ApplHashSet< A, B>).Apply(
                     default(MHashSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<HashSet<B>> applyT< A, B>(HashSet<HashSet<Func<A, B>>> fab, HashSet<HashSet<A>> fa) =>
            default(MHashSet<HashSet<Func<A, B>>>).Bind<MHashSet<HashSet<B>>, HashSet<HashSet<B>>, HashSet<B>>(fab, f =>
                default(MHashSet<HashSet<A>>).Bind<MHashSet<HashSet<B>>, HashSet<HashSet<B>>, HashSet<B>>(fa, a => 
                    default(MHashSet<HashSet<B>>).Pure(default(ApplHashSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `HashSet&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static HashSet<HashSet<C>> applyT< A, B, C>(Func<A, B, C> fabc, HashSet<HashSet<A>> fa, HashSet<HashSet<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class LstT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `HashSet&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Lst&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `HashSet&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(HashSet<Lst<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MHashSet<Lst<A>>, HashSet<Lst<A>>, MLst<A>, Lst<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `HashSet&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Lst&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `HashSet&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(HashSet<Lst<A>> ma) =>
            default(SeqTrans<MHashSet<Lst<A>>, HashSet<Lst<A>>, MLst<A>, Lst<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`HashSet&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Lst<B>> bindT< A, B>(HashSet<Lst<A>> ma, Func<A, Lst<B>> f) =>
            default(SeqTrans<MHashSet<Lst<A>>, HashSet<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MHashSet<Lst<B>>, HashSet<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `HashSet&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;HashSet&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;HashSet&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Lst<HashSet<B>> traverse< A, B>(HashSet<Lst<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `HashSet&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;HashSet&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Lst<HashSet<A>> sequence< A>(HashSet<Lst<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Lst<B>> mapT< A, B>(HashSet<Lst<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MHashSet<Lst<A>>, HashSet<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Map<MHashSet<Lst<B>>, HashSet<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(HashSet<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Lst<A>>, HashSet<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(HashSet<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Lst<A>>, HashSet<Lst<A>>, MLst<A>, Lst<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(HashSet<Lst<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Lst<A>>, HashSet<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(HashSet<Lst<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Lst<A>>, HashSet<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `HashSet&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(HashSet<Lst<A>> ma, Action<A> f) =>
            default(SeqTrans<MHashSet<Lst<A>>, HashSet<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`HashSet&lt;Lst&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static HashSet<Lst<A>> filterT< A>(HashSet<Lst<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MHashSet<Lst<A>>, HashSet<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MHashSet<Lst<A>>, HashSet<Lst<A>>, MLst<A>, Lst<A>, A>(ma, 
                    a => pred(a)
                        ? default(MLst<A>).Pure(a)
                        : default(MLst<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Lst&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static HashSet<Lst<A>> plusT<NUM,  A>(HashSet<Lst<A>> x, HashSet<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Lst&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static HashSet<Lst<A>> subtractT<NUM,  A>(HashSet<Lst<A>> x, HashSet<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static HashSet<Lst<A>> productT<NUM,  A>(HashSet<Lst<A>> x, HashSet<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static HashSet<Lst<A>> divideT<NUM,  A>(HashSet<Lst<A>> x, HashSet<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static HashSet<Lst<A>> appendT<SEMI,  A>(HashSet<Lst<A>> x, HashSet<Lst<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(HashSet<Lst<A>> x, HashSet<Lst<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(HashSet<Lst<A>> x, HashSet<Lst<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Lst<B>> applyT< A, B>(Func<A, B> fab, HashSet<Lst<A>> fa) =>
            default(ApplHashSet< Lst<A>, Lst<B>>).Apply(
                 default(MHashSet< Func<Lst<A>, Lst<B>>>).Pure((Lst<A> a) => default(ApplLst< A, B>).Apply(
                     default(MLst< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Lst<B>> applyT< A, B>(HashSet<Lst<Func<A, B>>> fab, HashSet<Lst<A>> fa) =>
            default(MHashSet<Lst<Func<A, B>>>).Bind<MHashSet<Lst<B>>, HashSet<Lst<B>>, Lst<B>>(fab, f =>
                default(MHashSet<Lst<A>>).Bind<MHashSet<Lst<B>>, HashSet<Lst<B>>, Lst<B>>(fa, a => 
                    default(MHashSet<Lst<B>>).Pure(default(ApplLst< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Lst&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `HashSet&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static HashSet<Lst<C>> applyT< A, B, C>(Func<A, B, C> fabc, HashSet<Lst<A>> fa, HashSet<Lst<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class FinT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `HashSet&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Fin&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `HashSet&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(HashSet<Fin<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MHashSet<Fin<A>>, HashSet<Fin<A>>, MFin<A>, Fin<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `HashSet&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Fin&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `HashSet&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(HashSet<Fin<A>> ma) =>
            default(SeqTrans<MHashSet<Fin<A>>, HashSet<Fin<A>>, MFin<A>, Fin<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`HashSet&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Fin<B>> bindT< A, B>(HashSet<Fin<A>> ma, Func<A, Fin<B>> f) =>
            default(SeqTrans<MHashSet<Fin<A>>, HashSet<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MHashSet<Fin<B>>, HashSet<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `HashSet&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;HashSet&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;HashSet&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Fin<HashSet<B>> traverse< A, B>(HashSet<Fin<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `HashSet&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;HashSet&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Fin<HashSet<A>> sequence< A>(HashSet<Fin<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Fin<B>> mapT< A, B>(HashSet<Fin<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MHashSet<Fin<A>>, HashSet<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Map<MHashSet<Fin<B>>, HashSet<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(HashSet<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Fin<A>>, HashSet<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(HashSet<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Fin<A>>, HashSet<Fin<A>>, MFin<A>, Fin<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(HashSet<Fin<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Fin<A>>, HashSet<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(HashSet<Fin<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Fin<A>>, HashSet<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `HashSet&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(HashSet<Fin<A>> ma, Action<A> f) =>
            default(SeqTrans<MHashSet<Fin<A>>, HashSet<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`HashSet&lt;Fin&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static HashSet<Fin<A>> filterT< A>(HashSet<Fin<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MHashSet<Fin<A>>, HashSet<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MHashSet<Fin<A>>, HashSet<Fin<A>>, MFin<A>, Fin<A>, A>(ma, 
                    a => pred(a)
                        ? default(MFin<A>).Pure(a)
                        : default(MFin<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Fin&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static HashSet<Fin<A>> plusT<NUM,  A>(HashSet<Fin<A>> x, HashSet<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Fin&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static HashSet<Fin<A>> subtractT<NUM,  A>(HashSet<Fin<A>> x, HashSet<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static HashSet<Fin<A>> productT<NUM,  A>(HashSet<Fin<A>> x, HashSet<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static HashSet<Fin<A>> divideT<NUM,  A>(HashSet<Fin<A>> x, HashSet<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static HashSet<Fin<A>> appendT<SEMI,  A>(HashSet<Fin<A>> x, HashSet<Fin<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(HashSet<Fin<A>> x, HashSet<Fin<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(HashSet<Fin<A>> x, HashSet<Fin<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Fin<B>> applyT< A, B>(Func<A, B> fab, HashSet<Fin<A>> fa) =>
            default(ApplHashSet< Fin<A>, Fin<B>>).Apply(
                 default(MHashSet< Func<Fin<A>, Fin<B>>>).Pure((Fin<A> a) => default(ApplFin< A, B>).Apply(
                     default(MFin< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Fin<B>> applyT< A, B>(HashSet<Fin<Func<A, B>>> fab, HashSet<Fin<A>> fa) =>
            default(MHashSet<Fin<Func<A, B>>>).Bind<MHashSet<Fin<B>>, HashSet<Fin<B>>, Fin<B>>(fab, f =>
                default(MHashSet<Fin<A>>).Bind<MHashSet<Fin<B>>, HashSet<Fin<B>>, Fin<B>>(fa, a => 
                    default(MHashSet<Fin<B>>).Pure(default(ApplFin< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Fin&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `HashSet&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static HashSet<Fin<C>> applyT< A, B, C>(Func<A, B, C> fabc, HashSet<Fin<A>> fa, HashSet<Fin<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `HashSet&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Option&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `HashSet&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(HashSet<Option<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MHashSet<Option<A>>, HashSet<Option<A>>, MOption<A>, Option<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `HashSet&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Option&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `HashSet&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(HashSet<Option<A>> ma) =>
            default(SeqTrans<MHashSet<Option<A>>, HashSet<Option<A>>, MOption<A>, Option<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`HashSet&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Option<B>> bindT< A, B>(HashSet<Option<A>> ma, Func<A, Option<B>> f) =>
            default(SeqTrans<MHashSet<Option<A>>, HashSet<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MHashSet<Option<B>>, HashSet<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `HashSet&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;HashSet&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;HashSet&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Option<HashSet<B>> traverse< A, B>(HashSet<Option<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `HashSet&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;HashSet&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Option<HashSet<A>> sequence< A>(HashSet<Option<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Option<B>> mapT< A, B>(HashSet<Option<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MHashSet<Option<A>>, HashSet<Option<A>>, MOption<A>, Option<A>, A>)
                .Map<MHashSet<Option<B>>, HashSet<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(HashSet<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Option<A>>, HashSet<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(HashSet<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Option<A>>, HashSet<Option<A>>, MOption<A>, Option<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(HashSet<Option<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Option<A>>, HashSet<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(HashSet<Option<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Option<A>>, HashSet<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `HashSet&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(HashSet<Option<A>> ma, Action<A> f) =>
            default(SeqTrans<MHashSet<Option<A>>, HashSet<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`HashSet&lt;Option&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static HashSet<Option<A>> filterT< A>(HashSet<Option<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MHashSet<Option<A>>, HashSet<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MHashSet<Option<A>>, HashSet<Option<A>>, MOption<A>, Option<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOption<A>).Pure(a)
                        : default(MOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Option&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static HashSet<Option<A>> plusT<NUM,  A>(HashSet<Option<A>> x, HashSet<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Option&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static HashSet<Option<A>> subtractT<NUM,  A>(HashSet<Option<A>> x, HashSet<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Option&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static HashSet<Option<A>> productT<NUM,  A>(HashSet<Option<A>> x, HashSet<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Option&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static HashSet<Option<A>> divideT<NUM,  A>(HashSet<Option<A>> x, HashSet<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Option&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static HashSet<Option<A>> appendT<SEMI,  A>(HashSet<Option<A>> x, HashSet<Option<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(HashSet<Option<A>> x, HashSet<Option<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Option&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(HashSet<Option<A>> x, HashSet<Option<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Option<B>> applyT< A, B>(Func<A, B> fab, HashSet<Option<A>> fa) =>
            default(ApplHashSet< Option<A>, Option<B>>).Apply(
                 default(MHashSet< Func<Option<A>, Option<B>>>).Pure((Option<A> a) => default(ApplOption< A, B>).Apply(
                     default(MOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Option<B>> applyT< A, B>(HashSet<Option<Func<A, B>>> fab, HashSet<Option<A>> fa) =>
            default(MHashSet<Option<Func<A, B>>>).Bind<MHashSet<Option<B>>, HashSet<Option<B>>, Option<B>>(fab, f =>
                default(MHashSet<Option<A>>).Bind<MHashSet<Option<B>>, HashSet<Option<B>>, Option<B>>(fa, a => 
                    default(MHashSet<Option<B>>).Pure(default(ApplOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Option&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `HashSet&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Option&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static HashSet<Option<C>> applyT< A, B, C>(Func<A, B, C> fabc, HashSet<Option<A>> fa, HashSet<Option<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(HashSet<OptionUnsafe<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MHashSet<OptionUnsafe<A>>, HashSet<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(HashSet<OptionUnsafe<A>> ma) =>
            default(SeqTrans<MHashSet<OptionUnsafe<A>>, HashSet<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`HashSet&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<OptionUnsafe<B>> bindT< A, B>(HashSet<OptionUnsafe<A>> ma, Func<A, OptionUnsafe<B>> f) =>
            default(SeqTrans<MHashSet<OptionUnsafe<A>>, HashSet<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MHashSet<OptionUnsafe<B>>, HashSet<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;HashSet&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;HashSet&lt;B&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<HashSet<B>> traverse< A, B>(HashSet<OptionUnsafe<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<HashSet<A>> sequence< A>(HashSet<OptionUnsafe<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<OptionUnsafe<B>> mapT< A, B>(HashSet<OptionUnsafe<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MHashSet<OptionUnsafe<A>>, HashSet<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Map<MHashSet<OptionUnsafe<B>>, HashSet<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(HashSet<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<OptionUnsafe<A>>, HashSet<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(HashSet<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<OptionUnsafe<A>>, HashSet<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(HashSet<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<OptionUnsafe<A>>, HashSet<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(HashSet<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<OptionUnsafe<A>>, HashSet<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(HashSet<OptionUnsafe<A>> ma, Action<A> f) =>
            default(SeqTrans<MHashSet<OptionUnsafe<A>>, HashSet<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static HashSet<OptionUnsafe<A>> filterT< A>(HashSet<OptionUnsafe<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MHashSet<OptionUnsafe<A>>, HashSet<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MHashSet<OptionUnsafe<A>>, HashSet<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOptionUnsafe<A>).Pure(a)
                        : default(MOptionUnsafe<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static HashSet<OptionUnsafe<A>> plusT<NUM,  A>(HashSet<OptionUnsafe<A>> x, HashSet<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static HashSet<OptionUnsafe<A>> subtractT<NUM,  A>(HashSet<OptionUnsafe<A>> x, HashSet<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static HashSet<OptionUnsafe<A>> productT<NUM,  A>(HashSet<OptionUnsafe<A>> x, HashSet<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static HashSet<OptionUnsafe<A>> divideT<NUM,  A>(HashSet<OptionUnsafe<A>> x, HashSet<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static HashSet<OptionUnsafe<A>> appendT<SEMI,  A>(HashSet<OptionUnsafe<A>> x, HashSet<OptionUnsafe<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(HashSet<OptionUnsafe<A>> x, HashSet<OptionUnsafe<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(HashSet<OptionUnsafe<A>> x, HashSet<OptionUnsafe<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<OptionUnsafe<B>> applyT< A, B>(Func<A, B> fab, HashSet<OptionUnsafe<A>> fa) =>
            default(ApplHashSet< OptionUnsafe<A>, OptionUnsafe<B>>).Apply(
                 default(MHashSet< Func<OptionUnsafe<A>, OptionUnsafe<B>>>).Pure((OptionUnsafe<A> a) => default(ApplOptionUnsafe< A, B>).Apply(
                     default(MOptionUnsafe< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<OptionUnsafe<B>> applyT< A, B>(HashSet<OptionUnsafe<Func<A, B>>> fab, HashSet<OptionUnsafe<A>> fa) =>
            default(MHashSet<OptionUnsafe<Func<A, B>>>).Bind<MHashSet<OptionUnsafe<B>>, HashSet<OptionUnsafe<B>>, OptionUnsafe<B>>(fab, f =>
                default(MHashSet<OptionUnsafe<A>>).Bind<MHashSet<OptionUnsafe<B>>, HashSet<OptionUnsafe<B>>, OptionUnsafe<B>>(fa, a => 
                    default(MHashSet<OptionUnsafe<B>>).Pure(default(ApplOptionUnsafe< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static HashSet<OptionUnsafe<C>> applyT< A, B, C>(Func<A, B, C> fabc, HashSet<OptionUnsafe<A>> fa, HashSet<OptionUnsafe<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `HashSet&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Either&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `HashSet&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(HashSet<Either<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MHashSet<Either<L, A>>, HashSet<Either<L, A>>, MEither<L, A>, Either<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `HashSet&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Either&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `HashSet&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(HashSet<Either<L, A>> ma) =>
            default(SeqTrans<MHashSet<Either<L, A>>, HashSet<Either<L, A>>, MEither<L, A>, Either<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`HashSet&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Either<L, B>> bindT<L, A, B>(HashSet<Either<L, A>> ma, Func<A, Either<L, B>> f) =>
            default(SeqTrans<MHashSet<Either<L, A>>, HashSet<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MHashSet<Either<L, B>>, HashSet<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `HashSet&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, HashSet&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, HashSet&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Either<L, HashSet<B>> traverse<L, A, B>(HashSet<Either<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `HashSet&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, HashSet&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Either<L, HashSet<A>> sequence<L, A>(HashSet<Either<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Either<L, B>> mapT<L, A, B>(HashSet<Either<L, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MHashSet<Either<L, A>>, HashSet<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Map<MHashSet<Either<L, B>>, HashSet<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(HashSet<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Either<L, A>>, HashSet<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(HashSet<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Either<L, A>>, HashSet<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(HashSet<Either<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Either<L, A>>, HashSet<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(HashSet<Either<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Either<L, A>>, HashSet<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `HashSet&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(HashSet<Either<L, A>> ma, Action<A> f) =>
            default(SeqTrans<MHashSet<Either<L, A>>, HashSet<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`HashSet&lt;Either&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static HashSet<Either<L, A>> filterT<L, A>(HashSet<Either<L, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MHashSet<Either<L, A>>, HashSet<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MHashSet<Either<L, A>>, HashSet<Either<L, A>>, MEither<L, A>, Either<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEither<L, A>).Pure(a)
                        : default(MEither<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static HashSet<Either<L, A>> plusT<NUM, L, A>(HashSet<Either<L, A>> x, HashSet<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static HashSet<Either<L, A>> subtractT<NUM, L, A>(HashSet<Either<L, A>> x, HashSet<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static HashSet<Either<L, A>> productT<NUM, L, A>(HashSet<Either<L, A>> x, HashSet<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static HashSet<Either<L, A>> divideT<NUM, L, A>(HashSet<Either<L, A>> x, HashSet<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static HashSet<Either<L, A>> appendT<SEMI, L, A>(HashSet<Either<L, A>> x, HashSet<Either<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(HashSet<Either<L, A>> x, HashSet<Either<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(HashSet<Either<L, A>> x, HashSet<Either<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Either<L, B>> applyT<L, A, B>(Func<A, B> fab, HashSet<Either<L, A>> fa) =>
            default(ApplHashSet< Either<L, A>, Either<L, B>>).Apply(
                 default(MHashSet< Func<Either<L, A>, Either<L, B>>>).Pure((Either<L, A> a) => default(ApplEither<L, A, B>).Apply(
                     default(MEither<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Either<L, B>> applyT<L, A, B>(HashSet<Either<L, Func<A, B>>> fab, HashSet<Either<L, A>> fa) =>
            default(MHashSet<Either<L, Func<A, B>>>).Bind<MHashSet<Either<L, B>>, HashSet<Either<L, B>>, Either<L, B>>(fab, f =>
                default(MHashSet<Either<L, A>>).Bind<MHashSet<Either<L, B>>, HashSet<Either<L, B>>, Either<L, B>>(fa, a => 
                    default(MHashSet<Either<L, B>>).Pure(default(ApplEither<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `HashSet&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static HashSet<Either<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, HashSet<Either<L, A>> fa, HashSet<Either<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(HashSet<EitherUnsafe<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MHashSet<EitherUnsafe<L, A>>, HashSet<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(HashSet<EitherUnsafe<L, A>> ma) =>
            default(SeqTrans<MHashSet<EitherUnsafe<L, A>>, HashSet<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<EitherUnsafe<L, B>> bindT<L, A, B>(HashSet<EitherUnsafe<L, A>> ma, Func<A, EitherUnsafe<L, B>> f) =>
            default(SeqTrans<MHashSet<EitherUnsafe<L, A>>, HashSet<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MHashSet<EitherUnsafe<L, B>>, HashSet<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, HashSet&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, HashSet&lt;B&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, HashSet<B>> traverse<L, A, B>(HashSet<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, HashSet<A>> sequence<L, A>(HashSet<EitherUnsafe<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<EitherUnsafe<L, B>> mapT<L, A, B>(HashSet<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MHashSet<EitherUnsafe<L, A>>, HashSet<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Map<MHashSet<EitherUnsafe<L, B>>, HashSet<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(HashSet<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<EitherUnsafe<L, A>>, HashSet<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(HashSet<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<EitherUnsafe<L, A>>, HashSet<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(HashSet<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<EitherUnsafe<L, A>>, HashSet<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(HashSet<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<EitherUnsafe<L, A>>, HashSet<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(HashSet<EitherUnsafe<L, A>> ma, Action<A> f) =>
            default(SeqTrans<MHashSet<EitherUnsafe<L, A>>, HashSet<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static HashSet<EitherUnsafe<L, A>> filterT<L, A>(HashSet<EitherUnsafe<L, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MHashSet<EitherUnsafe<L, A>>, HashSet<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MHashSet<EitherUnsafe<L, A>>, HashSet<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEitherUnsafe<L, A>).Pure(a)
                        : default(MEitherUnsafe<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static HashSet<EitherUnsafe<L, A>> plusT<NUM, L, A>(HashSet<EitherUnsafe<L, A>> x, HashSet<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static HashSet<EitherUnsafe<L, A>> subtractT<NUM, L, A>(HashSet<EitherUnsafe<L, A>> x, HashSet<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static HashSet<EitherUnsafe<L, A>> productT<NUM, L, A>(HashSet<EitherUnsafe<L, A>> x, HashSet<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static HashSet<EitherUnsafe<L, A>> divideT<NUM, L, A>(HashSet<EitherUnsafe<L, A>> x, HashSet<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static HashSet<EitherUnsafe<L, A>> appendT<SEMI, L, A>(HashSet<EitherUnsafe<L, A>> x, HashSet<EitherUnsafe<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(HashSet<EitherUnsafe<L, A>> x, HashSet<EitherUnsafe<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(HashSet<EitherUnsafe<L, A>> x, HashSet<EitherUnsafe<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<EitherUnsafe<L, B>> applyT<L, A, B>(Func<A, B> fab, HashSet<EitherUnsafe<L, A>> fa) =>
            default(ApplHashSet< EitherUnsafe<L, A>, EitherUnsafe<L, B>>).Apply(
                 default(MHashSet< Func<EitherUnsafe<L, A>, EitherUnsafe<L, B>>>).Pure((EitherUnsafe<L, A> a) => default(ApplEitherUnsafe<L, A, B>).Apply(
                     default(MEitherUnsafe<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<EitherUnsafe<L, B>> applyT<L, A, B>(HashSet<EitherUnsafe<L, Func<A, B>>> fab, HashSet<EitherUnsafe<L, A>> fa) =>
            default(MHashSet<EitherUnsafe<L, Func<A, B>>>).Bind<MHashSet<EitherUnsafe<L, B>>, HashSet<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fab, f =>
                default(MHashSet<EitherUnsafe<L, A>>).Bind<MHashSet<EitherUnsafe<L, B>>, HashSet<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fa, a => 
                    default(MHashSet<EitherUnsafe<L, B>>).Pure(default(ApplEitherUnsafe<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static HashSet<EitherUnsafe<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, HashSet<EitherUnsafe<L, A>> fa, HashSet<EitherUnsafe<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `HashSet&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Try&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `HashSet&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(HashSet<Try<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MHashSet<Try<A>>, HashSet<Try<A>>, MTry<A>, Try<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `HashSet&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Try&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `HashSet&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(HashSet<Try<A>> ma) =>
            default(SeqTrans<MHashSet<Try<A>>, HashSet<Try<A>>, MTry<A>, Try<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`HashSet&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Try<B>> bindT< A, B>(HashSet<Try<A>> ma, Func<A, Try<B>> f) =>
            default(SeqTrans<MHashSet<Try<A>>, HashSet<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MHashSet<Try<B>>, HashSet<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `HashSet&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;HashSet&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;HashSet&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Try<HashSet<B>> traverse< A, B>(HashSet<Try<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `HashSet&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;HashSet&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Try<HashSet<A>> sequence< A>(HashSet<Try<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Try<B>> mapT< A, B>(HashSet<Try<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MHashSet<Try<A>>, HashSet<Try<A>>, MTry<A>, Try<A>, A>)
                .Map<MHashSet<Try<B>>, HashSet<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(HashSet<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Try<A>>, HashSet<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(HashSet<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Try<A>>, HashSet<Try<A>>, MTry<A>, Try<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(HashSet<Try<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Try<A>>, HashSet<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(HashSet<Try<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Try<A>>, HashSet<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `HashSet&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(HashSet<Try<A>> ma, Action<A> f) =>
            default(SeqTrans<MHashSet<Try<A>>, HashSet<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`HashSet&lt;Try&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static HashSet<Try<A>> filterT< A>(HashSet<Try<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MHashSet<Try<A>>, HashSet<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MHashSet<Try<A>>, HashSet<Try<A>>, MTry<A>, Try<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTry<A>).Pure(a)
                        : default(MTry<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Try&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static HashSet<Try<A>> plusT<NUM,  A>(HashSet<Try<A>> x, HashSet<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Try&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static HashSet<Try<A>> subtractT<NUM,  A>(HashSet<Try<A>> x, HashSet<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Try&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static HashSet<Try<A>> productT<NUM,  A>(HashSet<Try<A>> x, HashSet<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Try&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static HashSet<Try<A>> divideT<NUM,  A>(HashSet<Try<A>> x, HashSet<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Try&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static HashSet<Try<A>> appendT<SEMI,  A>(HashSet<Try<A>> x, HashSet<Try<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(HashSet<Try<A>> x, HashSet<Try<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Try&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(HashSet<Try<A>> x, HashSet<Try<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Try<B>> applyT< A, B>(Func<A, B> fab, HashSet<Try<A>> fa) =>
            default(ApplHashSet< Try<A>, Try<B>>).Apply(
                 default(MHashSet< Func<Try<A>, Try<B>>>).Pure((Try<A> a) => default(ApplTry< A, B>).Apply(
                     default(MTry< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Try<B>> applyT< A, B>(HashSet<Try<Func<A, B>>> fab, HashSet<Try<A>> fa) =>
            default(MHashSet<Try<Func<A, B>>>).Bind<MHashSet<Try<B>>, HashSet<Try<B>>, Try<B>>(fab, f =>
                default(MHashSet<Try<A>>).Bind<MHashSet<Try<B>>, HashSet<Try<B>>, Try<B>>(fa, a => 
                    default(MHashSet<Try<B>>).Pure(default(ApplTry< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Try&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `HashSet&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Try&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static HashSet<Try<C>> applyT< A, B, C>(Func<A, B, C> fabc, HashSet<Try<A>> fa, HashSet<Try<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryOptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `HashSet&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;TryOption&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `HashSet&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(HashSet<TryOption<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MHashSet<TryOption<A>>, HashSet<TryOption<A>>, MTryOption<A>, TryOption<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `HashSet&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;TryOption&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `HashSet&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(HashSet<TryOption<A>> ma) =>
            default(SeqTrans<MHashSet<TryOption<A>>, HashSet<TryOption<A>>, MTryOption<A>, TryOption<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`HashSet&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<TryOption<B>> bindT< A, B>(HashSet<TryOption<A>> ma, Func<A, TryOption<B>> f) =>
            default(SeqTrans<MHashSet<TryOption<A>>, HashSet<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MHashSet<TryOption<B>>, HashSet<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `HashSet&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;HashSet&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;HashSet&lt;B&gt;&gt;`</returns>
        [Pure]
        public static TryOption<HashSet<B>> traverse< A, B>(HashSet<TryOption<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `HashSet&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;HashSet&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static TryOption<HashSet<A>> sequence< A>(HashSet<TryOption<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<TryOption<B>> mapT< A, B>(HashSet<TryOption<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MHashSet<TryOption<A>>, HashSet<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Map<MHashSet<TryOption<B>>, HashSet<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(HashSet<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<TryOption<A>>, HashSet<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(HashSet<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<TryOption<A>>, HashSet<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(HashSet<TryOption<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<TryOption<A>>, HashSet<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(HashSet<TryOption<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<TryOption<A>>, HashSet<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `HashSet&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(HashSet<TryOption<A>> ma, Action<A> f) =>
            default(SeqTrans<MHashSet<TryOption<A>>, HashSet<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`HashSet&lt;TryOption&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static HashSet<TryOption<A>> filterT< A>(HashSet<TryOption<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MHashSet<TryOption<A>>, HashSet<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MHashSet<TryOption<A>>, HashSet<TryOption<A>>, MTryOption<A>, TryOption<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTryOption<A>).Pure(a)
                        : default(MTryOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static HashSet<TryOption<A>> plusT<NUM,  A>(HashSet<TryOption<A>> x, HashSet<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static HashSet<TryOption<A>> subtractT<NUM,  A>(HashSet<TryOption<A>> x, HashSet<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static HashSet<TryOption<A>> productT<NUM,  A>(HashSet<TryOption<A>> x, HashSet<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static HashSet<TryOption<A>> divideT<NUM,  A>(HashSet<TryOption<A>> x, HashSet<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static HashSet<TryOption<A>> appendT<SEMI,  A>(HashSet<TryOption<A>> x, HashSet<TryOption<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(HashSet<TryOption<A>> x, HashSet<TryOption<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(HashSet<TryOption<A>> x, HashSet<TryOption<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<TryOption<B>> applyT< A, B>(Func<A, B> fab, HashSet<TryOption<A>> fa) =>
            default(ApplHashSet< TryOption<A>, TryOption<B>>).Apply(
                 default(MHashSet< Func<TryOption<A>, TryOption<B>>>).Pure((TryOption<A> a) => default(ApplTryOption< A, B>).Apply(
                     default(MTryOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<TryOption<B>> applyT< A, B>(HashSet<TryOption<Func<A, B>>> fab, HashSet<TryOption<A>> fa) =>
            default(MHashSet<TryOption<Func<A, B>>>).Bind<MHashSet<TryOption<B>>, HashSet<TryOption<B>>, TryOption<B>>(fab, f =>
                default(MHashSet<TryOption<A>>).Bind<MHashSet<TryOption<B>>, HashSet<TryOption<B>>, TryOption<B>>(fa, a => 
                    default(MHashSet<TryOption<B>>).Pure(default(ApplTryOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `HashSet&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static HashSet<TryOption<C>> applyT< A, B, C>(Func<A, B, C> fabc, HashSet<TryOption<A>> fa, HashSet<TryOption<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class IEnumerableT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `HashSet&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;IEnumerable&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `HashSet&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(HashSet<IEnumerable<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MHashSet<IEnumerable<A>>, HashSet<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `HashSet&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;IEnumerable&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `HashSet&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(HashSet<IEnumerable<A>> ma) =>
            default(SeqTrans<MHashSet<IEnumerable<A>>, HashSet<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`HashSet&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<IEnumerable<B>> bindT< A, B>(HashSet<IEnumerable<A>> ma, Func<A, IEnumerable<B>> f) =>
            default(SeqTrans<MHashSet<IEnumerable<A>>, HashSet<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MHashSet<IEnumerable<B>>, HashSet<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `HashSet&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;HashSet&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;HashSet&lt;B&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<HashSet<B>> traverse< A, B>(HashSet<IEnumerable<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `HashSet&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;HashSet&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<HashSet<A>> sequence< A>(HashSet<IEnumerable<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<IEnumerable<B>> mapT< A, B>(HashSet<IEnumerable<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MHashSet<IEnumerable<A>>, HashSet<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Map<MHashSet<IEnumerable<B>>, HashSet<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(HashSet<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<IEnumerable<A>>, HashSet<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(HashSet<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<IEnumerable<A>>, HashSet<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(HashSet<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<IEnumerable<A>>, HashSet<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(HashSet<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<IEnumerable<A>>, HashSet<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `HashSet&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(HashSet<IEnumerable<A>> ma, Action<A> f) =>
            default(SeqTrans<MHashSet<IEnumerable<A>>, HashSet<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`HashSet&lt;IEnumerable&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static HashSet<IEnumerable<A>> filterT< A>(HashSet<IEnumerable<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MHashSet<IEnumerable<A>>, HashSet<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MHashSet<IEnumerable<A>>, HashSet<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>(ma, 
                    a => pred(a)
                        ? default(MEnumerable<A>).Pure(a)
                        : default(MEnumerable<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static HashSet<IEnumerable<A>> plusT<NUM,  A>(HashSet<IEnumerable<A>> x, HashSet<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static HashSet<IEnumerable<A>> subtractT<NUM,  A>(HashSet<IEnumerable<A>> x, HashSet<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static HashSet<IEnumerable<A>> productT<NUM,  A>(HashSet<IEnumerable<A>> x, HashSet<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static HashSet<IEnumerable<A>> divideT<NUM,  A>(HashSet<IEnumerable<A>> x, HashSet<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static HashSet<IEnumerable<A>> appendT<SEMI,  A>(HashSet<IEnumerable<A>> x, HashSet<IEnumerable<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(HashSet<IEnumerable<A>> x, HashSet<IEnumerable<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(HashSet<IEnumerable<A>> x, HashSet<IEnumerable<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<IEnumerable<B>> applyT< A, B>(Func<A, B> fab, HashSet<IEnumerable<A>> fa) =>
            default(ApplHashSet< IEnumerable<A>, IEnumerable<B>>).Apply(
                 default(MHashSet< Func<IEnumerable<A>, IEnumerable<B>>>).Pure((IEnumerable<A> a) => default(ApplEnumerable< A, B>).Apply(
                     default(MEnumerable< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<IEnumerable<B>> applyT< A, B>(HashSet<IEnumerable<Func<A, B>>> fab, HashSet<IEnumerable<A>> fa) =>
            default(MHashSet<IEnumerable<Func<A, B>>>).Bind<MHashSet<IEnumerable<B>>, HashSet<IEnumerable<B>>, IEnumerable<B>>(fab, f =>
                default(MHashSet<IEnumerable<A>>).Bind<MHashSet<IEnumerable<B>>, HashSet<IEnumerable<B>>, IEnumerable<B>>(fa, a => 
                    default(MHashSet<IEnumerable<B>>).Pure(default(ApplEnumerable< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `HashSet&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static HashSet<IEnumerable<C>> applyT< A, B, C>(Func<A, B, C> fabc, HashSet<IEnumerable<A>> fa, HashSet<IEnumerable<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SeqT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `HashSet&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Seq&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `HashSet&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(HashSet<Seq<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MHashSet<Seq<A>>, HashSet<Seq<A>>, MSeq<A>, Seq<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `HashSet&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Seq&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `HashSet&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(HashSet<Seq<A>> ma) =>
            default(SeqTrans<MHashSet<Seq<A>>, HashSet<Seq<A>>, MSeq<A>, Seq<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`HashSet&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Seq<B>> bindT< A, B>(HashSet<Seq<A>> ma, Func<A, Seq<B>> f) =>
            default(SeqTrans<MHashSet<Seq<A>>, HashSet<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MHashSet<Seq<B>>, HashSet<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `HashSet&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;HashSet&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;HashSet&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Seq<HashSet<B>> traverse< A, B>(HashSet<Seq<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `HashSet&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;HashSet&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Seq<HashSet<A>> sequence< A>(HashSet<Seq<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Seq<B>> mapT< A, B>(HashSet<Seq<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MHashSet<Seq<A>>, HashSet<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Map<MHashSet<Seq<B>>, HashSet<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(HashSet<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Seq<A>>, HashSet<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(HashSet<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Seq<A>>, HashSet<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(HashSet<Seq<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Seq<A>>, HashSet<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(HashSet<Seq<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Seq<A>>, HashSet<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `HashSet&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(HashSet<Seq<A>> ma, Action<A> f) =>
            default(SeqTrans<MHashSet<Seq<A>>, HashSet<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`HashSet&lt;Seq&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static HashSet<Seq<A>> filterT< A>(HashSet<Seq<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MHashSet<Seq<A>>, HashSet<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MHashSet<Seq<A>>, HashSet<Seq<A>>, MSeq<A>, Seq<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSeq<A>).Pure(a)
                        : default(MSeq<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Seq&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static HashSet<Seq<A>> plusT<NUM,  A>(HashSet<Seq<A>> x, HashSet<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Seq&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static HashSet<Seq<A>> subtractT<NUM,  A>(HashSet<Seq<A>> x, HashSet<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static HashSet<Seq<A>> productT<NUM,  A>(HashSet<Seq<A>> x, HashSet<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static HashSet<Seq<A>> divideT<NUM,  A>(HashSet<Seq<A>> x, HashSet<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static HashSet<Seq<A>> appendT<SEMI,  A>(HashSet<Seq<A>> x, HashSet<Seq<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(HashSet<Seq<A>> x, HashSet<Seq<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(HashSet<Seq<A>> x, HashSet<Seq<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Seq<B>> applyT< A, B>(Func<A, B> fab, HashSet<Seq<A>> fa) =>
            default(ApplHashSet< Seq<A>, Seq<B>>).Apply(
                 default(MHashSet< Func<Seq<A>, Seq<B>>>).Pure((Seq<A> a) => default(ApplSeq< A, B>).Apply(
                     default(MSeq< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Seq<B>> applyT< A, B>(HashSet<Seq<Func<A, B>>> fab, HashSet<Seq<A>> fa) =>
            default(MHashSet<Seq<Func<A, B>>>).Bind<MHashSet<Seq<B>>, HashSet<Seq<B>>, Seq<B>>(fab, f =>
                default(MHashSet<Seq<A>>).Bind<MHashSet<Seq<B>>, HashSet<Seq<B>>, Seq<B>>(fa, a => 
                    default(MHashSet<Seq<B>>).Pure(default(ApplSeq< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Seq&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `HashSet&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static HashSet<Seq<C>> applyT< A, B, C>(Func<A, B, C> fabc, HashSet<Seq<A>> fa, HashSet<Seq<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `HashSet&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Set&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `HashSet&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(HashSet<Set<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MHashSet<Set<A>>, HashSet<Set<A>>, MSet<A>, Set<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `HashSet&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Set&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `HashSet&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(HashSet<Set<A>> ma) =>
            default(SeqTrans<MHashSet<Set<A>>, HashSet<Set<A>>, MSet<A>, Set<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`HashSet&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Set<B>> bindT< A, B>(HashSet<Set<A>> ma, Func<A, Set<B>> f) =>
            default(SeqTrans<MHashSet<Set<A>>, HashSet<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MHashSet<Set<B>>, HashSet<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `HashSet&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;HashSet&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;HashSet&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Set<HashSet<B>> traverse< A, B>(HashSet<Set<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `HashSet&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;HashSet&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Set<HashSet<A>> sequence< A>(HashSet<Set<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Set<B>> mapT< A, B>(HashSet<Set<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MHashSet<Set<A>>, HashSet<Set<A>>, MSet<A>, Set<A>, A>)
                .Map<MHashSet<Set<B>>, HashSet<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(HashSet<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Set<A>>, HashSet<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(HashSet<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Set<A>>, HashSet<Set<A>>, MSet<A>, Set<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(HashSet<Set<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Set<A>>, HashSet<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(HashSet<Set<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Set<A>>, HashSet<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `HashSet&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(HashSet<Set<A>> ma, Action<A> f) =>
            default(SeqTrans<MHashSet<Set<A>>, HashSet<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`HashSet&lt;Set&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static HashSet<Set<A>> filterT< A>(HashSet<Set<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MHashSet<Set<A>>, HashSet<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MHashSet<Set<A>>, HashSet<Set<A>>, MSet<A>, Set<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSet<A>).Pure(a)
                        : default(MSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Set&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static HashSet<Set<A>> plusT<NUM,  A>(HashSet<Set<A>> x, HashSet<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Set&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static HashSet<Set<A>> subtractT<NUM,  A>(HashSet<Set<A>> x, HashSet<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Set&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static HashSet<Set<A>> productT<NUM,  A>(HashSet<Set<A>> x, HashSet<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Set&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static HashSet<Set<A>> divideT<NUM,  A>(HashSet<Set<A>> x, HashSet<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Set&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static HashSet<Set<A>> appendT<SEMI,  A>(HashSet<Set<A>> x, HashSet<Set<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(HashSet<Set<A>> x, HashSet<Set<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Set&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(HashSet<Set<A>> x, HashSet<Set<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Set<B>> applyT< A, B>(Func<A, B> fab, HashSet<Set<A>> fa) =>
            default(ApplHashSet< Set<A>, Set<B>>).Apply(
                 default(MHashSet< Func<Set<A>, Set<B>>>).Pure((Set<A> a) => default(ApplSet< A, B>).Apply(
                     default(MSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Set<B>> applyT< A, B>(HashSet<Set<Func<A, B>>> fab, HashSet<Set<A>> fa) =>
            default(MHashSet<Set<Func<A, B>>>).Bind<MHashSet<Set<B>>, HashSet<Set<B>>, Set<B>>(fab, f =>
                default(MHashSet<Set<A>>).Bind<MHashSet<Set<B>>, HashSet<Set<B>>, Set<B>>(fa, a => 
                    default(MHashSet<Set<B>>).Pure(default(ApplSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Set&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `HashSet&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Set&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static HashSet<Set<C>> applyT< A, B, C>(Func<A, B, C> fabc, HashSet<Set<A>> fa, HashSet<Set<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ValidationT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(HashSet<Validation<FAIL, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MHashSet<Validation<FAIL, A>>, HashSet<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(HashSet<Validation<FAIL, A>> ma) =>
            default(SeqTrans<MHashSet<Validation<FAIL, A>>, HashSet<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`HashSet&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Validation<FAIL, B>> bindT<FAIL, A, B>(HashSet<Validation<FAIL, A>> ma, Func<A, Validation<FAIL, B>> f) =>
            default(SeqTrans<MHashSet<Validation<FAIL, A>>, HashSet<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MHashSet<Validation<FAIL, B>>, HashSet<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, HashSet&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, HashSet&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, HashSet<B>> traverse<FAIL, A, B>(HashSet<Validation<FAIL, A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, HashSet<A>> sequence<FAIL, A>(HashSet<Validation<FAIL, A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static HashSet<Validation<FAIL, B>> mapT<FAIL, A, B>(HashSet<Validation<FAIL, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MHashSet<Validation<FAIL, A>>, HashSet<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Map<MHashSet<Validation<FAIL, B>>, HashSet<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(HashSet<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Validation<FAIL, A>>, HashSet<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(HashSet<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MHashSet<Validation<FAIL, A>>, HashSet<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(HashSet<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Validation<FAIL, A>>, HashSet<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(HashSet<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MHashSet<Validation<FAIL, A>>, HashSet<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(HashSet<Validation<FAIL, A>> ma, Action<A> f) =>
            default(SeqTrans<MHashSet<Validation<FAIL, A>>, HashSet<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static HashSet<Validation<FAIL, A>> filterT<FAIL, A>(HashSet<Validation<FAIL, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MHashSet<Validation<FAIL, A>>, HashSet<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MHashSet<Validation<FAIL, A>>, HashSet<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>(ma, 
                    a => pred(a)
                        ? default(MValidation<FAIL, A>).Pure(a)
                        : default(MValidation<FAIL, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static HashSet<Validation<FAIL, A>> plusT<NUM, FAIL, A>(HashSet<Validation<FAIL, A>> x, HashSet<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static HashSet<Validation<FAIL, A>> subtractT<NUM, FAIL, A>(HashSet<Validation<FAIL, A>> x, HashSet<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static HashSet<Validation<FAIL, A>> productT<NUM, FAIL, A>(HashSet<Validation<FAIL, A>> x, HashSet<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static HashSet<Validation<FAIL, A>> divideT<NUM, FAIL, A>(HashSet<Validation<FAIL, A>> x, HashSet<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static HashSet<Validation<FAIL, A>> appendT<SEMI, FAIL, A>(HashSet<Validation<FAIL, A>> x, HashSet<Validation<FAIL, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(HashSet<Validation<FAIL, A>> x, HashSet<Validation<FAIL, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`HashSet&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(HashSet<Validation<FAIL, A>> x, HashSet<Validation<FAIL, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Validation<FAIL, B>> applyT<FAIL, A, B>(Func<A, B> fab, HashSet<Validation<FAIL, A>> fa) =>
            default(ApplHashSet< Validation<FAIL, A>, Validation<FAIL, B>>).Apply(
                 default(MHashSet< Func<Validation<FAIL, A>, Validation<FAIL, B>>>).Pure((Validation<FAIL, A> a) => default(ApplValidation<FAIL, A, B>).Apply(
                     default(MValidation<FAIL, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static HashSet<Validation<FAIL, B>> applyT<FAIL, A, B>(HashSet<Validation<FAIL, Func<A, B>>> fab, HashSet<Validation<FAIL, A>> fa) =>
            default(MHashSet<Validation<FAIL, Func<A, B>>>).Bind<MHashSet<Validation<FAIL, B>>, HashSet<Validation<FAIL, B>>, Validation<FAIL, B>>(fab, f =>
                default(MHashSet<Validation<FAIL, A>>).Bind<MHashSet<Validation<FAIL, B>>, HashSet<Validation<FAIL, B>>, Validation<FAIL, B>>(fa, a => 
                    default(MHashSet<Validation<FAIL, B>>).Pure(default(ApplValidation<FAIL, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`HashSet&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static HashSet<Validation<FAIL, C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, HashSet<Validation<FAIL, A>> fa, HashSet<Validation<FAIL, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ArrT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Lst&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Arr&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Lst&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Lst<Arr<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MLst<Arr<A>>, Lst<Arr<A>>, MArr<A>, Arr<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Lst&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Arr&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Lst&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Lst<Arr<A>> ma) =>
            default(SeqTrans<MLst<Arr<A>>, Lst<Arr<A>>, MArr<A>, Arr<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Lst&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Arr<B>> bindT< A, B>(Lst<Arr<A>> ma, Func<A, Arr<B>> f) =>
            default(SeqTrans<MLst<Arr<A>>, Lst<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MLst<Arr<B>>, Lst<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Lst&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Lst&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Lst&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Arr<Lst<B>> traverse< A, B>(Lst<Arr<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Lst&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Lst&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Arr<Lst<A>> sequence< A>(Lst<Arr<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Arr<B>> mapT< A, B>(Lst<Arr<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MLst<Arr<A>>, Lst<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Map<MLst<Arr<B>>, Lst<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Lst<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Arr<A>>, Lst<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Lst<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Arr<A>>, Lst<Arr<A>>, MArr<A>, Arr<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Lst<Arr<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Arr<A>>, Lst<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Lst<Arr<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Arr<A>>, Lst<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Lst&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Lst<Arr<A>> ma, Action<A> f) =>
            default(SeqTrans<MLst<Arr<A>>, Lst<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Lst&lt;Arr&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Lst<Arr<A>> filterT< A>(Lst<Arr<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MLst<Arr<A>>, Lst<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MLst<Arr<A>>, Lst<Arr<A>>, MArr<A>, Arr<A>, A>(ma, 
                    a => pred(a)
                        ? default(MArr<A>).Pure(a)
                        : default(MArr<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Arr&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Lst<Arr<A>> plusT<NUM,  A>(Lst<Arr<A>> x, Lst<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Arr&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Lst<Arr<A>> subtractT<NUM,  A>(Lst<Arr<A>> x, Lst<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Lst<Arr<A>> productT<NUM,  A>(Lst<Arr<A>> x, Lst<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Lst<Arr<A>> divideT<NUM,  A>(Lst<Arr<A>> x, Lst<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Lst<Arr<A>> appendT<SEMI,  A>(Lst<Arr<A>> x, Lst<Arr<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Lst<Arr<A>> x, Lst<Arr<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Lst<Arr<A>> x, Lst<Arr<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Arr<B>> applyT< A, B>(Func<A, B> fab, Lst<Arr<A>> fa) =>
            default(ApplLst< Arr<A>, Arr<B>>).Apply(
                 default(MLst< Func<Arr<A>, Arr<B>>>).Pure((Arr<A> a) => default(ApplArr< A, B>).Apply(
                     default(MArr< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Arr<B>> applyT< A, B>(Lst<Arr<Func<A, B>>> fab, Lst<Arr<A>> fa) =>
            default(MLst<Arr<Func<A, B>>>).Bind<MLst<Arr<B>>, Lst<Arr<B>>, Arr<B>>(fab, f =>
                default(MLst<Arr<A>>).Bind<MLst<Arr<B>>, Lst<Arr<B>>, Arr<B>>(fa, a => 
                    default(MLst<Arr<B>>).Pure(default(ApplArr< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Arr&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Lst&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Lst<Arr<C>> applyT< A, B, C>(Func<A, B, C> fabc, Lst<Arr<A>> fa, Lst<Arr<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class HashSetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Lst&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;HashSet&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Lst&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Lst<HashSet<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MLst<HashSet<A>>, Lst<HashSet<A>>, MHashSet<A>, HashSet<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Lst&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;HashSet&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Lst&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Lst<HashSet<A>> ma) =>
            default(SeqTrans<MLst<HashSet<A>>, Lst<HashSet<A>>, MHashSet<A>, HashSet<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Lst&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<HashSet<B>> bindT< A, B>(Lst<HashSet<A>> ma, Func<A, HashSet<B>> f) =>
            default(SeqTrans<MLst<HashSet<A>>, Lst<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MLst<HashSet<B>>, Lst<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Lst&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Lst&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Lst&lt;B&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Lst<B>> traverse< A, B>(Lst<HashSet<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Lst&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Lst&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Lst<A>> sequence< A>(Lst<HashSet<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<HashSet<B>> mapT< A, B>(Lst<HashSet<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MLst<HashSet<A>>, Lst<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Map<MLst<HashSet<B>>, Lst<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Lst<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<HashSet<A>>, Lst<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Lst<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<HashSet<A>>, Lst<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Lst<HashSet<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<HashSet<A>>, Lst<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Lst<HashSet<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<HashSet<A>>, Lst<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Lst&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Lst<HashSet<A>> ma, Action<A> f) =>
            default(SeqTrans<MLst<HashSet<A>>, Lst<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Lst&lt;HashSet&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Lst<HashSet<A>> filterT< A>(Lst<HashSet<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MLst<HashSet<A>>, Lst<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MLst<HashSet<A>>, Lst<HashSet<A>>, MHashSet<A>, HashSet<A>, A>(ma, 
                    a => pred(a)
                        ? default(MHashSet<A>).Pure(a)
                        : default(MHashSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Lst<HashSet<A>> plusT<NUM,  A>(Lst<HashSet<A>> x, Lst<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Lst<HashSet<A>> subtractT<NUM,  A>(Lst<HashSet<A>> x, Lst<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Lst<HashSet<A>> productT<NUM,  A>(Lst<HashSet<A>> x, Lst<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Lst<HashSet<A>> divideT<NUM,  A>(Lst<HashSet<A>> x, Lst<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Lst<HashSet<A>> appendT<SEMI,  A>(Lst<HashSet<A>> x, Lst<HashSet<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Lst<HashSet<A>> x, Lst<HashSet<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Lst<HashSet<A>> x, Lst<HashSet<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<HashSet<B>> applyT< A, B>(Func<A, B> fab, Lst<HashSet<A>> fa) =>
            default(ApplLst< HashSet<A>, HashSet<B>>).Apply(
                 default(MLst< Func<HashSet<A>, HashSet<B>>>).Pure((HashSet<A> a) => default(ApplHashSet< A, B>).Apply(
                     default(MHashSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<HashSet<B>> applyT< A, B>(Lst<HashSet<Func<A, B>>> fab, Lst<HashSet<A>> fa) =>
            default(MLst<HashSet<Func<A, B>>>).Bind<MLst<HashSet<B>>, Lst<HashSet<B>>, HashSet<B>>(fab, f =>
                default(MLst<HashSet<A>>).Bind<MLst<HashSet<B>>, Lst<HashSet<B>>, HashSet<B>>(fa, a => 
                    default(MLst<HashSet<B>>).Pure(default(ApplHashSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Lst&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Lst<HashSet<C>> applyT< A, B, C>(Func<A, B, C> fabc, Lst<HashSet<A>> fa, Lst<HashSet<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class LstT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Lst&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Lst&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Lst&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Lst<Lst<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MLst<Lst<A>>, Lst<Lst<A>>, MLst<A>, Lst<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Lst&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Lst&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Lst&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Lst<Lst<A>> ma) =>
            default(SeqTrans<MLst<Lst<A>>, Lst<Lst<A>>, MLst<A>, Lst<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Lst&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Lst<B>> bindT< A, B>(Lst<Lst<A>> ma, Func<A, Lst<B>> f) =>
            default(SeqTrans<MLst<Lst<A>>, Lst<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MLst<Lst<B>>, Lst<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Lst&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Lst&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Lst&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Lst<Lst<B>> traverse< A, B>(Lst<Lst<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Lst&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Lst&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Lst<Lst<A>> sequence< A>(Lst<Lst<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Lst<B>> mapT< A, B>(Lst<Lst<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MLst<Lst<A>>, Lst<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Map<MLst<Lst<B>>, Lst<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Lst<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Lst<A>>, Lst<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Lst<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Lst<A>>, Lst<Lst<A>>, MLst<A>, Lst<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Lst<Lst<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Lst<A>>, Lst<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Lst<Lst<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Lst<A>>, Lst<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Lst&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Lst<Lst<A>> ma, Action<A> f) =>
            default(SeqTrans<MLst<Lst<A>>, Lst<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Lst&lt;Lst&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Lst<Lst<A>> filterT< A>(Lst<Lst<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MLst<Lst<A>>, Lst<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MLst<Lst<A>>, Lst<Lst<A>>, MLst<A>, Lst<A>, A>(ma, 
                    a => pred(a)
                        ? default(MLst<A>).Pure(a)
                        : default(MLst<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Lst&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Lst<Lst<A>> plusT<NUM,  A>(Lst<Lst<A>> x, Lst<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Lst&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Lst<Lst<A>> subtractT<NUM,  A>(Lst<Lst<A>> x, Lst<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Lst<Lst<A>> productT<NUM,  A>(Lst<Lst<A>> x, Lst<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Lst<Lst<A>> divideT<NUM,  A>(Lst<Lst<A>> x, Lst<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Lst<Lst<A>> appendT<SEMI,  A>(Lst<Lst<A>> x, Lst<Lst<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Lst<Lst<A>> x, Lst<Lst<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Lst<Lst<A>> x, Lst<Lst<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Lst<B>> applyT< A, B>(Func<A, B> fab, Lst<Lst<A>> fa) =>
            default(ApplLst< Lst<A>, Lst<B>>).Apply(
                 default(MLst< Func<Lst<A>, Lst<B>>>).Pure((Lst<A> a) => default(ApplLst< A, B>).Apply(
                     default(MLst< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Lst<B>> applyT< A, B>(Lst<Lst<Func<A, B>>> fab, Lst<Lst<A>> fa) =>
            default(MLst<Lst<Func<A, B>>>).Bind<MLst<Lst<B>>, Lst<Lst<B>>, Lst<B>>(fab, f =>
                default(MLst<Lst<A>>).Bind<MLst<Lst<B>>, Lst<Lst<B>>, Lst<B>>(fa, a => 
                    default(MLst<Lst<B>>).Pure(default(ApplLst< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Lst&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Lst&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Lst<Lst<C>> applyT< A, B, C>(Func<A, B, C> fabc, Lst<Lst<A>> fa, Lst<Lst<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class FinT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Lst&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Fin&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Lst&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Lst<Fin<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MLst<Fin<A>>, Lst<Fin<A>>, MFin<A>, Fin<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Lst&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Fin&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Lst&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Lst<Fin<A>> ma) =>
            default(SeqTrans<MLst<Fin<A>>, Lst<Fin<A>>, MFin<A>, Fin<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Lst&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Fin<B>> bindT< A, B>(Lst<Fin<A>> ma, Func<A, Fin<B>> f) =>
            default(SeqTrans<MLst<Fin<A>>, Lst<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MLst<Fin<B>>, Lst<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Lst&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Lst&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Lst&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Fin<Lst<B>> traverse< A, B>(Lst<Fin<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Lst&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Lst&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Fin<Lst<A>> sequence< A>(Lst<Fin<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Fin<B>> mapT< A, B>(Lst<Fin<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MLst<Fin<A>>, Lst<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Map<MLst<Fin<B>>, Lst<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Lst<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Fin<A>>, Lst<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Lst<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Fin<A>>, Lst<Fin<A>>, MFin<A>, Fin<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Lst<Fin<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Fin<A>>, Lst<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Lst<Fin<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Fin<A>>, Lst<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Lst&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Lst<Fin<A>> ma, Action<A> f) =>
            default(SeqTrans<MLst<Fin<A>>, Lst<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Lst&lt;Fin&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Lst<Fin<A>> filterT< A>(Lst<Fin<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MLst<Fin<A>>, Lst<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MLst<Fin<A>>, Lst<Fin<A>>, MFin<A>, Fin<A>, A>(ma, 
                    a => pred(a)
                        ? default(MFin<A>).Pure(a)
                        : default(MFin<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Fin&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Lst<Fin<A>> plusT<NUM,  A>(Lst<Fin<A>> x, Lst<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Fin&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Lst<Fin<A>> subtractT<NUM,  A>(Lst<Fin<A>> x, Lst<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Lst<Fin<A>> productT<NUM,  A>(Lst<Fin<A>> x, Lst<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Lst<Fin<A>> divideT<NUM,  A>(Lst<Fin<A>> x, Lst<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Lst<Fin<A>> appendT<SEMI,  A>(Lst<Fin<A>> x, Lst<Fin<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Lst<Fin<A>> x, Lst<Fin<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Lst<Fin<A>> x, Lst<Fin<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Fin<B>> applyT< A, B>(Func<A, B> fab, Lst<Fin<A>> fa) =>
            default(ApplLst< Fin<A>, Fin<B>>).Apply(
                 default(MLst< Func<Fin<A>, Fin<B>>>).Pure((Fin<A> a) => default(ApplFin< A, B>).Apply(
                     default(MFin< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Fin<B>> applyT< A, B>(Lst<Fin<Func<A, B>>> fab, Lst<Fin<A>> fa) =>
            default(MLst<Fin<Func<A, B>>>).Bind<MLst<Fin<B>>, Lst<Fin<B>>, Fin<B>>(fab, f =>
                default(MLst<Fin<A>>).Bind<MLst<Fin<B>>, Lst<Fin<B>>, Fin<B>>(fa, a => 
                    default(MLst<Fin<B>>).Pure(default(ApplFin< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Fin&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Lst&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Lst<Fin<C>> applyT< A, B, C>(Func<A, B, C> fabc, Lst<Fin<A>> fa, Lst<Fin<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Lst&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Option&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Lst&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Lst<Option<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MLst<Option<A>>, Lst<Option<A>>, MOption<A>, Option<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Lst&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Option&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Lst&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Lst<Option<A>> ma) =>
            default(SeqTrans<MLst<Option<A>>, Lst<Option<A>>, MOption<A>, Option<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Lst&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Option<B>> bindT< A, B>(Lst<Option<A>> ma, Func<A, Option<B>> f) =>
            default(SeqTrans<MLst<Option<A>>, Lst<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MLst<Option<B>>, Lst<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Lst&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Lst&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Lst&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Option<Lst<B>> traverse< A, B>(Lst<Option<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Lst&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Lst&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Option<Lst<A>> sequence< A>(Lst<Option<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Option<B>> mapT< A, B>(Lst<Option<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MLst<Option<A>>, Lst<Option<A>>, MOption<A>, Option<A>, A>)
                .Map<MLst<Option<B>>, Lst<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Lst<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Option<A>>, Lst<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Lst<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Option<A>>, Lst<Option<A>>, MOption<A>, Option<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Lst<Option<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Option<A>>, Lst<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Lst<Option<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Option<A>>, Lst<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Lst&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Lst<Option<A>> ma, Action<A> f) =>
            default(SeqTrans<MLst<Option<A>>, Lst<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Lst&lt;Option&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Lst<Option<A>> filterT< A>(Lst<Option<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MLst<Option<A>>, Lst<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MLst<Option<A>>, Lst<Option<A>>, MOption<A>, Option<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOption<A>).Pure(a)
                        : default(MOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Option&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Lst<Option<A>> plusT<NUM,  A>(Lst<Option<A>> x, Lst<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Option&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Lst<Option<A>> subtractT<NUM,  A>(Lst<Option<A>> x, Lst<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Option&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Lst<Option<A>> productT<NUM,  A>(Lst<Option<A>> x, Lst<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Option&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Lst<Option<A>> divideT<NUM,  A>(Lst<Option<A>> x, Lst<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Option&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Lst<Option<A>> appendT<SEMI,  A>(Lst<Option<A>> x, Lst<Option<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Lst<Option<A>> x, Lst<Option<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Option&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Lst<Option<A>> x, Lst<Option<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Option<B>> applyT< A, B>(Func<A, B> fab, Lst<Option<A>> fa) =>
            default(ApplLst< Option<A>, Option<B>>).Apply(
                 default(MLst< Func<Option<A>, Option<B>>>).Pure((Option<A> a) => default(ApplOption< A, B>).Apply(
                     default(MOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Option<B>> applyT< A, B>(Lst<Option<Func<A, B>>> fab, Lst<Option<A>> fa) =>
            default(MLst<Option<Func<A, B>>>).Bind<MLst<Option<B>>, Lst<Option<B>>, Option<B>>(fab, f =>
                default(MLst<Option<A>>).Bind<MLst<Option<B>>, Lst<Option<B>>, Option<B>>(fa, a => 
                    default(MLst<Option<B>>).Pure(default(ApplOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Option&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Lst&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Option&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Lst<Option<C>> applyT< A, B, C>(Func<A, B, C> fabc, Lst<Option<A>> fa, Lst<Option<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Lst&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Lst&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Lst<OptionUnsafe<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MLst<OptionUnsafe<A>>, Lst<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Lst&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Lst&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Lst<OptionUnsafe<A>> ma) =>
            default(SeqTrans<MLst<OptionUnsafe<A>>, Lst<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Lst&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<OptionUnsafe<B>> bindT< A, B>(Lst<OptionUnsafe<A>> ma, Func<A, OptionUnsafe<B>> f) =>
            default(SeqTrans<MLst<OptionUnsafe<A>>, Lst<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MLst<OptionUnsafe<B>>, Lst<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Lst&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Lst&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Lst&lt;B&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Lst<B>> traverse< A, B>(Lst<OptionUnsafe<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Lst&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Lst&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Lst<A>> sequence< A>(Lst<OptionUnsafe<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<OptionUnsafe<B>> mapT< A, B>(Lst<OptionUnsafe<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MLst<OptionUnsafe<A>>, Lst<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Map<MLst<OptionUnsafe<B>>, Lst<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Lst<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<OptionUnsafe<A>>, Lst<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Lst<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<OptionUnsafe<A>>, Lst<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Lst<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<OptionUnsafe<A>>, Lst<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Lst<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<OptionUnsafe<A>>, Lst<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Lst&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Lst<OptionUnsafe<A>> ma, Action<A> f) =>
            default(SeqTrans<MLst<OptionUnsafe<A>>, Lst<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Lst&lt;OptionUnsafe&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Lst<OptionUnsafe<A>> filterT< A>(Lst<OptionUnsafe<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MLst<OptionUnsafe<A>>, Lst<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MLst<OptionUnsafe<A>>, Lst<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOptionUnsafe<A>).Pure(a)
                        : default(MOptionUnsafe<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Lst<OptionUnsafe<A>> plusT<NUM,  A>(Lst<OptionUnsafe<A>> x, Lst<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Lst<OptionUnsafe<A>> subtractT<NUM,  A>(Lst<OptionUnsafe<A>> x, Lst<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Lst<OptionUnsafe<A>> productT<NUM,  A>(Lst<OptionUnsafe<A>> x, Lst<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Lst<OptionUnsafe<A>> divideT<NUM,  A>(Lst<OptionUnsafe<A>> x, Lst<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Lst<OptionUnsafe<A>> appendT<SEMI,  A>(Lst<OptionUnsafe<A>> x, Lst<OptionUnsafe<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Lst<OptionUnsafe<A>> x, Lst<OptionUnsafe<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Lst<OptionUnsafe<A>> x, Lst<OptionUnsafe<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<OptionUnsafe<B>> applyT< A, B>(Func<A, B> fab, Lst<OptionUnsafe<A>> fa) =>
            default(ApplLst< OptionUnsafe<A>, OptionUnsafe<B>>).Apply(
                 default(MLst< Func<OptionUnsafe<A>, OptionUnsafe<B>>>).Pure((OptionUnsafe<A> a) => default(ApplOptionUnsafe< A, B>).Apply(
                     default(MOptionUnsafe< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<OptionUnsafe<B>> applyT< A, B>(Lst<OptionUnsafe<Func<A, B>>> fab, Lst<OptionUnsafe<A>> fa) =>
            default(MLst<OptionUnsafe<Func<A, B>>>).Bind<MLst<OptionUnsafe<B>>, Lst<OptionUnsafe<B>>, OptionUnsafe<B>>(fab, f =>
                default(MLst<OptionUnsafe<A>>).Bind<MLst<OptionUnsafe<B>>, Lst<OptionUnsafe<B>>, OptionUnsafe<B>>(fa, a => 
                    default(MLst<OptionUnsafe<B>>).Pure(default(ApplOptionUnsafe< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Lst&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Lst<OptionUnsafe<C>> applyT< A, B, C>(Func<A, B, C> fabc, Lst<OptionUnsafe<A>> fa, Lst<OptionUnsafe<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Lst&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Either&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Lst&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Lst<Either<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MLst<Either<L, A>>, Lst<Either<L, A>>, MEither<L, A>, Either<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Lst&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Either&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Lst&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Lst<Either<L, A>> ma) =>
            default(SeqTrans<MLst<Either<L, A>>, Lst<Either<L, A>>, MEither<L, A>, Either<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Lst&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Either<L, B>> bindT<L, A, B>(Lst<Either<L, A>> ma, Func<A, Either<L, B>> f) =>
            default(SeqTrans<MLst<Either<L, A>>, Lst<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MLst<Either<L, B>>, Lst<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Lst&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Lst&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Lst&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Lst<B>> traverse<L, A, B>(Lst<Either<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Lst&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Lst&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Lst<A>> sequence<L, A>(Lst<Either<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Either<L, B>> mapT<L, A, B>(Lst<Either<L, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MLst<Either<L, A>>, Lst<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Map<MLst<Either<L, B>>, Lst<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Lst<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Either<L, A>>, Lst<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Lst<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Either<L, A>>, Lst<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Lst<Either<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Either<L, A>>, Lst<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Lst<Either<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Either<L, A>>, Lst<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Lst&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Lst<Either<L, A>> ma, Action<A> f) =>
            default(SeqTrans<MLst<Either<L, A>>, Lst<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Lst&lt;Either&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Lst<Either<L, A>> filterT<L, A>(Lst<Either<L, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MLst<Either<L, A>>, Lst<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MLst<Either<L, A>>, Lst<Either<L, A>>, MEither<L, A>, Either<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEither<L, A>).Pure(a)
                        : default(MEither<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Lst<Either<L, A>> plusT<NUM, L, A>(Lst<Either<L, A>> x, Lst<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Lst<Either<L, A>> subtractT<NUM, L, A>(Lst<Either<L, A>> x, Lst<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Lst<Either<L, A>> productT<NUM, L, A>(Lst<Either<L, A>> x, Lst<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Lst<Either<L, A>> divideT<NUM, L, A>(Lst<Either<L, A>> x, Lst<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Lst<Either<L, A>> appendT<SEMI, L, A>(Lst<Either<L, A>> x, Lst<Either<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Lst<Either<L, A>> x, Lst<Either<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Lst<Either<L, A>> x, Lst<Either<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Either<L, B>> applyT<L, A, B>(Func<A, B> fab, Lst<Either<L, A>> fa) =>
            default(ApplLst< Either<L, A>, Either<L, B>>).Apply(
                 default(MLst< Func<Either<L, A>, Either<L, B>>>).Pure((Either<L, A> a) => default(ApplEither<L, A, B>).Apply(
                     default(MEither<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Either<L, B>> applyT<L, A, B>(Lst<Either<L, Func<A, B>>> fab, Lst<Either<L, A>> fa) =>
            default(MLst<Either<L, Func<A, B>>>).Bind<MLst<Either<L, B>>, Lst<Either<L, B>>, Either<L, B>>(fab, f =>
                default(MLst<Either<L, A>>).Bind<MLst<Either<L, B>>, Lst<Either<L, B>>, Either<L, B>>(fa, a => 
                    default(MLst<Either<L, B>>).Pure(default(ApplEither<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Lst&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Lst<Either<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Lst<Either<L, A>> fa, Lst<Either<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Lst<EitherUnsafe<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MLst<EitherUnsafe<L, A>>, Lst<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Lst<EitherUnsafe<L, A>> ma) =>
            default(SeqTrans<MLst<EitherUnsafe<L, A>>, Lst<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<EitherUnsafe<L, B>> bindT<L, A, B>(Lst<EitherUnsafe<L, A>> ma, Func<A, EitherUnsafe<L, B>> f) =>
            default(SeqTrans<MLst<EitherUnsafe<L, A>>, Lst<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MLst<EitherUnsafe<L, B>>, Lst<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Lst&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Lst&lt;B&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Lst<B>> traverse<L, A, B>(Lst<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Lst<A>> sequence<L, A>(Lst<EitherUnsafe<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<EitherUnsafe<L, B>> mapT<L, A, B>(Lst<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MLst<EitherUnsafe<L, A>>, Lst<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Map<MLst<EitherUnsafe<L, B>>, Lst<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Lst<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<EitherUnsafe<L, A>>, Lst<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Lst<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<EitherUnsafe<L, A>>, Lst<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Lst<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<EitherUnsafe<L, A>>, Lst<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Lst<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<EitherUnsafe<L, A>>, Lst<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Lst<EitherUnsafe<L, A>> ma, Action<A> f) =>
            default(SeqTrans<MLst<EitherUnsafe<L, A>>, Lst<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Lst<EitherUnsafe<L, A>> filterT<L, A>(Lst<EitherUnsafe<L, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MLst<EitherUnsafe<L, A>>, Lst<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MLst<EitherUnsafe<L, A>>, Lst<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEitherUnsafe<L, A>).Pure(a)
                        : default(MEitherUnsafe<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Lst<EitherUnsafe<L, A>> plusT<NUM, L, A>(Lst<EitherUnsafe<L, A>> x, Lst<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Lst<EitherUnsafe<L, A>> subtractT<NUM, L, A>(Lst<EitherUnsafe<L, A>> x, Lst<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Lst<EitherUnsafe<L, A>> productT<NUM, L, A>(Lst<EitherUnsafe<L, A>> x, Lst<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Lst<EitherUnsafe<L, A>> divideT<NUM, L, A>(Lst<EitherUnsafe<L, A>> x, Lst<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Lst<EitherUnsafe<L, A>> appendT<SEMI, L, A>(Lst<EitherUnsafe<L, A>> x, Lst<EitherUnsafe<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Lst<EitherUnsafe<L, A>> x, Lst<EitherUnsafe<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Lst<EitherUnsafe<L, A>> x, Lst<EitherUnsafe<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<EitherUnsafe<L, B>> applyT<L, A, B>(Func<A, B> fab, Lst<EitherUnsafe<L, A>> fa) =>
            default(ApplLst< EitherUnsafe<L, A>, EitherUnsafe<L, B>>).Apply(
                 default(MLst< Func<EitherUnsafe<L, A>, EitherUnsafe<L, B>>>).Pure((EitherUnsafe<L, A> a) => default(ApplEitherUnsafe<L, A, B>).Apply(
                     default(MEitherUnsafe<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<EitherUnsafe<L, B>> applyT<L, A, B>(Lst<EitherUnsafe<L, Func<A, B>>> fab, Lst<EitherUnsafe<L, A>> fa) =>
            default(MLst<EitherUnsafe<L, Func<A, B>>>).Bind<MLst<EitherUnsafe<L, B>>, Lst<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fab, f =>
                default(MLst<EitherUnsafe<L, A>>).Bind<MLst<EitherUnsafe<L, B>>, Lst<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fa, a => 
                    default(MLst<EitherUnsafe<L, B>>).Pure(default(ApplEitherUnsafe<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Lst<EitherUnsafe<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Lst<EitherUnsafe<L, A>> fa, Lst<EitherUnsafe<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Lst&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Try&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Lst&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Lst<Try<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MLst<Try<A>>, Lst<Try<A>>, MTry<A>, Try<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Lst&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Try&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Lst&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Lst<Try<A>> ma) =>
            default(SeqTrans<MLst<Try<A>>, Lst<Try<A>>, MTry<A>, Try<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Lst&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Try<B>> bindT< A, B>(Lst<Try<A>> ma, Func<A, Try<B>> f) =>
            default(SeqTrans<MLst<Try<A>>, Lst<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MLst<Try<B>>, Lst<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Lst&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Lst&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Lst&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Try<Lst<B>> traverse< A, B>(Lst<Try<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Lst&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Lst&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Try<Lst<A>> sequence< A>(Lst<Try<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Try<B>> mapT< A, B>(Lst<Try<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MLst<Try<A>>, Lst<Try<A>>, MTry<A>, Try<A>, A>)
                .Map<MLst<Try<B>>, Lst<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Lst<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Try<A>>, Lst<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Lst<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Try<A>>, Lst<Try<A>>, MTry<A>, Try<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Lst<Try<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Try<A>>, Lst<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Lst<Try<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Try<A>>, Lst<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Lst&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Lst<Try<A>> ma, Action<A> f) =>
            default(SeqTrans<MLst<Try<A>>, Lst<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Lst&lt;Try&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Lst<Try<A>> filterT< A>(Lst<Try<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MLst<Try<A>>, Lst<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MLst<Try<A>>, Lst<Try<A>>, MTry<A>, Try<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTry<A>).Pure(a)
                        : default(MTry<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Try&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Lst<Try<A>> plusT<NUM,  A>(Lst<Try<A>> x, Lst<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Try&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Lst<Try<A>> subtractT<NUM,  A>(Lst<Try<A>> x, Lst<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Try&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Lst<Try<A>> productT<NUM,  A>(Lst<Try<A>> x, Lst<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Try&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Lst<Try<A>> divideT<NUM,  A>(Lst<Try<A>> x, Lst<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Try&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Lst<Try<A>> appendT<SEMI,  A>(Lst<Try<A>> x, Lst<Try<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Lst<Try<A>> x, Lst<Try<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Try&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Lst<Try<A>> x, Lst<Try<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Try<B>> applyT< A, B>(Func<A, B> fab, Lst<Try<A>> fa) =>
            default(ApplLst< Try<A>, Try<B>>).Apply(
                 default(MLst< Func<Try<A>, Try<B>>>).Pure((Try<A> a) => default(ApplTry< A, B>).Apply(
                     default(MTry< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Try<B>> applyT< A, B>(Lst<Try<Func<A, B>>> fab, Lst<Try<A>> fa) =>
            default(MLst<Try<Func<A, B>>>).Bind<MLst<Try<B>>, Lst<Try<B>>, Try<B>>(fab, f =>
                default(MLst<Try<A>>).Bind<MLst<Try<B>>, Lst<Try<B>>, Try<B>>(fa, a => 
                    default(MLst<Try<B>>).Pure(default(ApplTry< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Try&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Lst&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Try&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Lst<Try<C>> applyT< A, B, C>(Func<A, B, C> fabc, Lst<Try<A>> fa, Lst<Try<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryOptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Lst&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;TryOption&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Lst&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Lst<TryOption<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MLst<TryOption<A>>, Lst<TryOption<A>>, MTryOption<A>, TryOption<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Lst&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;TryOption&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Lst&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Lst<TryOption<A>> ma) =>
            default(SeqTrans<MLst<TryOption<A>>, Lst<TryOption<A>>, MTryOption<A>, TryOption<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Lst&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<TryOption<B>> bindT< A, B>(Lst<TryOption<A>> ma, Func<A, TryOption<B>> f) =>
            default(SeqTrans<MLst<TryOption<A>>, Lst<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MLst<TryOption<B>>, Lst<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Lst&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Lst&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Lst&lt;B&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Lst<B>> traverse< A, B>(Lst<TryOption<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Lst&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Lst&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Lst<A>> sequence< A>(Lst<TryOption<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<TryOption<B>> mapT< A, B>(Lst<TryOption<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MLst<TryOption<A>>, Lst<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Map<MLst<TryOption<B>>, Lst<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Lst<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<TryOption<A>>, Lst<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Lst<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<TryOption<A>>, Lst<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Lst<TryOption<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<TryOption<A>>, Lst<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Lst<TryOption<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<TryOption<A>>, Lst<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Lst&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Lst<TryOption<A>> ma, Action<A> f) =>
            default(SeqTrans<MLst<TryOption<A>>, Lst<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Lst&lt;TryOption&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Lst<TryOption<A>> filterT< A>(Lst<TryOption<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MLst<TryOption<A>>, Lst<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MLst<TryOption<A>>, Lst<TryOption<A>>, MTryOption<A>, TryOption<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTryOption<A>).Pure(a)
                        : default(MTryOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Lst<TryOption<A>> plusT<NUM,  A>(Lst<TryOption<A>> x, Lst<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Lst<TryOption<A>> subtractT<NUM,  A>(Lst<TryOption<A>> x, Lst<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Lst<TryOption<A>> productT<NUM,  A>(Lst<TryOption<A>> x, Lst<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Lst<TryOption<A>> divideT<NUM,  A>(Lst<TryOption<A>> x, Lst<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Lst<TryOption<A>> appendT<SEMI,  A>(Lst<TryOption<A>> x, Lst<TryOption<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Lst<TryOption<A>> x, Lst<TryOption<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Lst<TryOption<A>> x, Lst<TryOption<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<TryOption<B>> applyT< A, B>(Func<A, B> fab, Lst<TryOption<A>> fa) =>
            default(ApplLst< TryOption<A>, TryOption<B>>).Apply(
                 default(MLst< Func<TryOption<A>, TryOption<B>>>).Pure((TryOption<A> a) => default(ApplTryOption< A, B>).Apply(
                     default(MTryOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<TryOption<B>> applyT< A, B>(Lst<TryOption<Func<A, B>>> fab, Lst<TryOption<A>> fa) =>
            default(MLst<TryOption<Func<A, B>>>).Bind<MLst<TryOption<B>>, Lst<TryOption<B>>, TryOption<B>>(fab, f =>
                default(MLst<TryOption<A>>).Bind<MLst<TryOption<B>>, Lst<TryOption<B>>, TryOption<B>>(fa, a => 
                    default(MLst<TryOption<B>>).Pure(default(ApplTryOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Lst&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Lst<TryOption<C>> applyT< A, B, C>(Func<A, B, C> fabc, Lst<TryOption<A>> fa, Lst<TryOption<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class IEnumerableT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Lst&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;IEnumerable&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Lst&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Lst<IEnumerable<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MLst<IEnumerable<A>>, Lst<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Lst&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;IEnumerable&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Lst&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Lst<IEnumerable<A>> ma) =>
            default(SeqTrans<MLst<IEnumerable<A>>, Lst<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Lst&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<IEnumerable<B>> bindT< A, B>(Lst<IEnumerable<A>> ma, Func<A, IEnumerable<B>> f) =>
            default(SeqTrans<MLst<IEnumerable<A>>, Lst<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MLst<IEnumerable<B>>, Lst<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Lst&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Lst&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Lst&lt;B&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Lst<B>> traverse< A, B>(Lst<IEnumerable<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Lst&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Lst&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Lst<A>> sequence< A>(Lst<IEnumerable<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<IEnumerable<B>> mapT< A, B>(Lst<IEnumerable<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MLst<IEnumerable<A>>, Lst<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Map<MLst<IEnumerable<B>>, Lst<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Lst<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<IEnumerable<A>>, Lst<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Lst<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<IEnumerable<A>>, Lst<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Lst<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<IEnumerable<A>>, Lst<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Lst<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<IEnumerable<A>>, Lst<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Lst&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Lst<IEnumerable<A>> ma, Action<A> f) =>
            default(SeqTrans<MLst<IEnumerable<A>>, Lst<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Lst&lt;IEnumerable&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Lst<IEnumerable<A>> filterT< A>(Lst<IEnumerable<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MLst<IEnumerable<A>>, Lst<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MLst<IEnumerable<A>>, Lst<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>(ma, 
                    a => pred(a)
                        ? default(MEnumerable<A>).Pure(a)
                        : default(MEnumerable<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Lst<IEnumerable<A>> plusT<NUM,  A>(Lst<IEnumerable<A>> x, Lst<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Lst<IEnumerable<A>> subtractT<NUM,  A>(Lst<IEnumerable<A>> x, Lst<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Lst<IEnumerable<A>> productT<NUM,  A>(Lst<IEnumerable<A>> x, Lst<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Lst<IEnumerable<A>> divideT<NUM,  A>(Lst<IEnumerable<A>> x, Lst<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Lst<IEnumerable<A>> appendT<SEMI,  A>(Lst<IEnumerable<A>> x, Lst<IEnumerable<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Lst<IEnumerable<A>> x, Lst<IEnumerable<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Lst<IEnumerable<A>> x, Lst<IEnumerable<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<IEnumerable<B>> applyT< A, B>(Func<A, B> fab, Lst<IEnumerable<A>> fa) =>
            default(ApplLst< IEnumerable<A>, IEnumerable<B>>).Apply(
                 default(MLst< Func<IEnumerable<A>, IEnumerable<B>>>).Pure((IEnumerable<A> a) => default(ApplEnumerable< A, B>).Apply(
                     default(MEnumerable< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<IEnumerable<B>> applyT< A, B>(Lst<IEnumerable<Func<A, B>>> fab, Lst<IEnumerable<A>> fa) =>
            default(MLst<IEnumerable<Func<A, B>>>).Bind<MLst<IEnumerable<B>>, Lst<IEnumerable<B>>, IEnumerable<B>>(fab, f =>
                default(MLst<IEnumerable<A>>).Bind<MLst<IEnumerable<B>>, Lst<IEnumerable<B>>, IEnumerable<B>>(fa, a => 
                    default(MLst<IEnumerable<B>>).Pure(default(ApplEnumerable< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Lst&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Lst<IEnumerable<C>> applyT< A, B, C>(Func<A, B, C> fabc, Lst<IEnumerable<A>> fa, Lst<IEnumerable<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SeqT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Lst&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Seq&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Lst&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Lst<Seq<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MLst<Seq<A>>, Lst<Seq<A>>, MSeq<A>, Seq<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Lst&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Seq&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Lst&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Lst<Seq<A>> ma) =>
            default(SeqTrans<MLst<Seq<A>>, Lst<Seq<A>>, MSeq<A>, Seq<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Lst&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Seq<B>> bindT< A, B>(Lst<Seq<A>> ma, Func<A, Seq<B>> f) =>
            default(SeqTrans<MLst<Seq<A>>, Lst<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MLst<Seq<B>>, Lst<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Lst&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Lst&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Lst&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Seq<Lst<B>> traverse< A, B>(Lst<Seq<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Lst&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Lst&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Seq<Lst<A>> sequence< A>(Lst<Seq<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Seq<B>> mapT< A, B>(Lst<Seq<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MLst<Seq<A>>, Lst<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Map<MLst<Seq<B>>, Lst<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Lst<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Seq<A>>, Lst<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Lst<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Seq<A>>, Lst<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Lst<Seq<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Seq<A>>, Lst<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Lst<Seq<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Seq<A>>, Lst<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Lst&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Lst<Seq<A>> ma, Action<A> f) =>
            default(SeqTrans<MLst<Seq<A>>, Lst<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Lst&lt;Seq&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Lst<Seq<A>> filterT< A>(Lst<Seq<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MLst<Seq<A>>, Lst<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MLst<Seq<A>>, Lst<Seq<A>>, MSeq<A>, Seq<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSeq<A>).Pure(a)
                        : default(MSeq<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Seq&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Lst<Seq<A>> plusT<NUM,  A>(Lst<Seq<A>> x, Lst<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Seq&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Lst<Seq<A>> subtractT<NUM,  A>(Lst<Seq<A>> x, Lst<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Lst<Seq<A>> productT<NUM,  A>(Lst<Seq<A>> x, Lst<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Lst<Seq<A>> divideT<NUM,  A>(Lst<Seq<A>> x, Lst<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Lst<Seq<A>> appendT<SEMI,  A>(Lst<Seq<A>> x, Lst<Seq<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Lst<Seq<A>> x, Lst<Seq<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Lst<Seq<A>> x, Lst<Seq<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Seq<B>> applyT< A, B>(Func<A, B> fab, Lst<Seq<A>> fa) =>
            default(ApplLst< Seq<A>, Seq<B>>).Apply(
                 default(MLst< Func<Seq<A>, Seq<B>>>).Pure((Seq<A> a) => default(ApplSeq< A, B>).Apply(
                     default(MSeq< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Seq<B>> applyT< A, B>(Lst<Seq<Func<A, B>>> fab, Lst<Seq<A>> fa) =>
            default(MLst<Seq<Func<A, B>>>).Bind<MLst<Seq<B>>, Lst<Seq<B>>, Seq<B>>(fab, f =>
                default(MLst<Seq<A>>).Bind<MLst<Seq<B>>, Lst<Seq<B>>, Seq<B>>(fa, a => 
                    default(MLst<Seq<B>>).Pure(default(ApplSeq< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Seq&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Lst&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Lst<Seq<C>> applyT< A, B, C>(Func<A, B, C> fabc, Lst<Seq<A>> fa, Lst<Seq<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Lst&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Set&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Lst&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Lst<Set<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MLst<Set<A>>, Lst<Set<A>>, MSet<A>, Set<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Lst&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Set&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Lst&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Lst<Set<A>> ma) =>
            default(SeqTrans<MLst<Set<A>>, Lst<Set<A>>, MSet<A>, Set<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Lst&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Set<B>> bindT< A, B>(Lst<Set<A>> ma, Func<A, Set<B>> f) =>
            default(SeqTrans<MLst<Set<A>>, Lst<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MLst<Set<B>>, Lst<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Lst&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Lst&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Lst&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Set<Lst<B>> traverse< A, B>(Lst<Set<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Lst&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Lst&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Set<Lst<A>> sequence< A>(Lst<Set<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Set<B>> mapT< A, B>(Lst<Set<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MLst<Set<A>>, Lst<Set<A>>, MSet<A>, Set<A>, A>)
                .Map<MLst<Set<B>>, Lst<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Lst<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Set<A>>, Lst<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Lst<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Set<A>>, Lst<Set<A>>, MSet<A>, Set<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Lst<Set<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Set<A>>, Lst<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Lst<Set<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Set<A>>, Lst<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Lst&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Lst<Set<A>> ma, Action<A> f) =>
            default(SeqTrans<MLst<Set<A>>, Lst<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Lst&lt;Set&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Lst<Set<A>> filterT< A>(Lst<Set<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MLst<Set<A>>, Lst<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MLst<Set<A>>, Lst<Set<A>>, MSet<A>, Set<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSet<A>).Pure(a)
                        : default(MSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Set&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Lst<Set<A>> plusT<NUM,  A>(Lst<Set<A>> x, Lst<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Set&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Lst<Set<A>> subtractT<NUM,  A>(Lst<Set<A>> x, Lst<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Set&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Lst<Set<A>> productT<NUM,  A>(Lst<Set<A>> x, Lst<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Set&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Lst<Set<A>> divideT<NUM,  A>(Lst<Set<A>> x, Lst<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Set&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Lst<Set<A>> appendT<SEMI,  A>(Lst<Set<A>> x, Lst<Set<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Lst<Set<A>> x, Lst<Set<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Set&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Lst<Set<A>> x, Lst<Set<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Set<B>> applyT< A, B>(Func<A, B> fab, Lst<Set<A>> fa) =>
            default(ApplLst< Set<A>, Set<B>>).Apply(
                 default(MLst< Func<Set<A>, Set<B>>>).Pure((Set<A> a) => default(ApplSet< A, B>).Apply(
                     default(MSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Set<B>> applyT< A, B>(Lst<Set<Func<A, B>>> fab, Lst<Set<A>> fa) =>
            default(MLst<Set<Func<A, B>>>).Bind<MLst<Set<B>>, Lst<Set<B>>, Set<B>>(fab, f =>
                default(MLst<Set<A>>).Bind<MLst<Set<B>>, Lst<Set<B>>, Set<B>>(fa, a => 
                    default(MLst<Set<B>>).Pure(default(ApplSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Set&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Lst&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Set&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Lst<Set<C>> applyT< A, B, C>(Func<A, B, C> fabc, Lst<Set<A>> fa, Lst<Set<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ValidationT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Lst&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Lst&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Lst<Validation<FAIL, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MLst<Validation<FAIL, A>>, Lst<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Lst&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Lst&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Lst<Validation<FAIL, A>> ma) =>
            default(SeqTrans<MLst<Validation<FAIL, A>>, Lst<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Lst&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Validation<FAIL, B>> bindT<FAIL, A, B>(Lst<Validation<FAIL, A>> ma, Func<A, Validation<FAIL, B>> f) =>
            default(SeqTrans<MLst<Validation<FAIL, A>>, Lst<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MLst<Validation<FAIL, B>>, Lst<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Lst&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Lst&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Lst&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Lst<B>> traverse<FAIL, A, B>(Lst<Validation<FAIL, A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Lst&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Lst&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Lst<A>> sequence<FAIL, A>(Lst<Validation<FAIL, A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Lst<Validation<FAIL, B>> mapT<FAIL, A, B>(Lst<Validation<FAIL, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MLst<Validation<FAIL, A>>, Lst<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Map<MLst<Validation<FAIL, B>>, Lst<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Lst<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Validation<FAIL, A>>, Lst<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Lst&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Lst<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MLst<Validation<FAIL, A>>, Lst<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Lst<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Validation<FAIL, A>>, Lst<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Lst<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MLst<Validation<FAIL, A>>, Lst<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Lst&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Lst<Validation<FAIL, A>> ma, Action<A> f) =>
            default(SeqTrans<MLst<Validation<FAIL, A>>, Lst<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Lst&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Lst&lt;Validation&lt;FAIL, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Lst<Validation<FAIL, A>> filterT<FAIL, A>(Lst<Validation<FAIL, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MLst<Validation<FAIL, A>>, Lst<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MLst<Validation<FAIL, A>>, Lst<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>(ma, 
                    a => pred(a)
                        ? default(MValidation<FAIL, A>).Pure(a)
                        : default(MValidation<FAIL, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Lst<Validation<FAIL, A>> plusT<NUM, FAIL, A>(Lst<Validation<FAIL, A>> x, Lst<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Lst<Validation<FAIL, A>> subtractT<NUM, FAIL, A>(Lst<Validation<FAIL, A>> x, Lst<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Lst<Validation<FAIL, A>> productT<NUM, FAIL, A>(Lst<Validation<FAIL, A>> x, Lst<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Lst<Validation<FAIL, A>> divideT<NUM, FAIL, A>(Lst<Validation<FAIL, A>> x, Lst<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Lst<Validation<FAIL, A>> appendT<SEMI, FAIL, A>(Lst<Validation<FAIL, A>> x, Lst<Validation<FAIL, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Lst<Validation<FAIL, A>> x, Lst<Validation<FAIL, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Lst&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Lst<Validation<FAIL, A>> x, Lst<Validation<FAIL, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Validation<FAIL, B>> applyT<FAIL, A, B>(Func<A, B> fab, Lst<Validation<FAIL, A>> fa) =>
            default(ApplLst< Validation<FAIL, A>, Validation<FAIL, B>>).Apply(
                 default(MLst< Func<Validation<FAIL, A>, Validation<FAIL, B>>>).Pure((Validation<FAIL, A> a) => default(ApplValidation<FAIL, A, B>).Apply(
                     default(MValidation<FAIL, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Lst<Validation<FAIL, B>> applyT<FAIL, A, B>(Lst<Validation<FAIL, Func<A, B>>> fab, Lst<Validation<FAIL, A>> fa) =>
            default(MLst<Validation<FAIL, Func<A, B>>>).Bind<MLst<Validation<FAIL, B>>, Lst<Validation<FAIL, B>>, Validation<FAIL, B>>(fab, f =>
                default(MLst<Validation<FAIL, A>>).Bind<MLst<Validation<FAIL, B>>, Lst<Validation<FAIL, B>>, Validation<FAIL, B>>(fa, a => 
                    default(MLst<Validation<FAIL, B>>).Pure(default(ApplValidation<FAIL, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Lst&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Lst&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Lst&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Lst<Validation<FAIL, C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Lst<Validation<FAIL, A>> fa, Lst<Validation<FAIL, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ArrT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Fin&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Arr&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Fin&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Fin<Arr<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MFin<Arr<A>>, Fin<Arr<A>>, MArr<A>, Arr<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Fin&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Arr&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Fin&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Fin<Arr<A>> ma) =>
            default(Trans<MFin<Arr<A>>, Fin<Arr<A>>, MArr<A>, Arr<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Fin&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Arr<B>> bindT< A, B>(Fin<Arr<A>> ma, Func<A, Arr<B>> f) =>
            default(Trans<MFin<Arr<A>>, Fin<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MFin<Arr<B>>, Fin<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Fin&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Fin&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Fin&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Arr<Fin<B>> traverse< A, B>(Fin<Arr<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Fin&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Fin&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Arr<Fin<A>> sequence< A>(Fin<Arr<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Arr<B>> mapT< A, B>(Fin<Arr<A>> ma, Func<A, B> f) =>
            default(Trans<MFin<Arr<A>>, Fin<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Map<MFin<Arr<B>>, Fin<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Fin<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Arr<A>>, Fin<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Fin<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Arr<A>>, Fin<Arr<A>>, MArr<A>, Arr<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Fin<Arr<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Arr<A>>, Fin<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Fin<Arr<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Arr<A>>, Fin<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Fin&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Fin<Arr<A>> ma, Action<A> f) =>
            default(Trans<MFin<Arr<A>>, Fin<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Fin&lt;Arr&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Fin<Arr<A>> filterT< A>(Fin<Arr<A>> ma, Func<A, bool> pred) =>
            default(Trans<MFin<Arr<A>>, Fin<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MFin<Arr<A>>, Fin<Arr<A>>, MArr<A>, Arr<A>, A>(ma, 
                    a => pred(a)
                        ? default(MArr<A>).Pure(a)
                        : default(MArr<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Arr&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Fin<Arr<A>> plusT<NUM,  A>(Fin<Arr<A>> x, Fin<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Arr&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Fin<Arr<A>> subtractT<NUM,  A>(Fin<Arr<A>> x, Fin<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Fin<Arr<A>> productT<NUM,  A>(Fin<Arr<A>> x, Fin<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Fin<Arr<A>> divideT<NUM,  A>(Fin<Arr<A>> x, Fin<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Fin<Arr<A>> appendT<SEMI,  A>(Fin<Arr<A>> x, Fin<Arr<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Fin<Arr<A>> x, Fin<Arr<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Fin<Arr<A>> x, Fin<Arr<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Arr<B>> applyT< A, B>(Func<A, B> fab, Fin<Arr<A>> fa) =>
            default(ApplFin< Arr<A>, Arr<B>>).Apply(
                 default(MFin< Func<Arr<A>, Arr<B>>>).Pure((Arr<A> a) => default(ApplArr< A, B>).Apply(
                     default(MArr< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Arr<B>> applyT< A, B>(Fin<Arr<Func<A, B>>> fab, Fin<Arr<A>> fa) =>
            default(MFin<Arr<Func<A, B>>>).Bind<MFin<Arr<B>>, Fin<Arr<B>>, Arr<B>>(fab, f =>
                default(MFin<Arr<A>>).Bind<MFin<Arr<B>>, Fin<Arr<B>>, Arr<B>>(fa, a => 
                    default(MFin<Arr<B>>).Pure(default(ApplArr< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Arr&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Fin&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Fin<Arr<C>> applyT< A, B, C>(Func<A, B, C> fabc, Fin<Arr<A>> fa, Fin<Arr<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class HashSetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Fin&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;HashSet&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Fin&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Fin<HashSet<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MFin<HashSet<A>>, Fin<HashSet<A>>, MHashSet<A>, HashSet<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Fin&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;HashSet&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Fin&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Fin<HashSet<A>> ma) =>
            default(Trans<MFin<HashSet<A>>, Fin<HashSet<A>>, MHashSet<A>, HashSet<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Fin&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<HashSet<B>> bindT< A, B>(Fin<HashSet<A>> ma, Func<A, HashSet<B>> f) =>
            default(Trans<MFin<HashSet<A>>, Fin<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MFin<HashSet<B>>, Fin<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Fin&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Fin&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Fin&lt;B&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Fin<B>> traverse< A, B>(Fin<HashSet<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Fin&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Fin&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Fin<A>> sequence< A>(Fin<HashSet<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<HashSet<B>> mapT< A, B>(Fin<HashSet<A>> ma, Func<A, B> f) =>
            default(Trans<MFin<HashSet<A>>, Fin<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Map<MFin<HashSet<B>>, Fin<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Fin<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<HashSet<A>>, Fin<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Fin<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<HashSet<A>>, Fin<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Fin<HashSet<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<HashSet<A>>, Fin<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Fin<HashSet<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<HashSet<A>>, Fin<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Fin&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Fin<HashSet<A>> ma, Action<A> f) =>
            default(Trans<MFin<HashSet<A>>, Fin<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Fin&lt;HashSet&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Fin<HashSet<A>> filterT< A>(Fin<HashSet<A>> ma, Func<A, bool> pred) =>
            default(Trans<MFin<HashSet<A>>, Fin<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MFin<HashSet<A>>, Fin<HashSet<A>>, MHashSet<A>, HashSet<A>, A>(ma, 
                    a => pred(a)
                        ? default(MHashSet<A>).Pure(a)
                        : default(MHashSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Fin<HashSet<A>> plusT<NUM,  A>(Fin<HashSet<A>> x, Fin<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Fin<HashSet<A>> subtractT<NUM,  A>(Fin<HashSet<A>> x, Fin<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Fin<HashSet<A>> productT<NUM,  A>(Fin<HashSet<A>> x, Fin<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Fin<HashSet<A>> divideT<NUM,  A>(Fin<HashSet<A>> x, Fin<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Fin<HashSet<A>> appendT<SEMI,  A>(Fin<HashSet<A>> x, Fin<HashSet<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Fin<HashSet<A>> x, Fin<HashSet<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Fin<HashSet<A>> x, Fin<HashSet<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<HashSet<B>> applyT< A, B>(Func<A, B> fab, Fin<HashSet<A>> fa) =>
            default(ApplFin< HashSet<A>, HashSet<B>>).Apply(
                 default(MFin< Func<HashSet<A>, HashSet<B>>>).Pure((HashSet<A> a) => default(ApplHashSet< A, B>).Apply(
                     default(MHashSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<HashSet<B>> applyT< A, B>(Fin<HashSet<Func<A, B>>> fab, Fin<HashSet<A>> fa) =>
            default(MFin<HashSet<Func<A, B>>>).Bind<MFin<HashSet<B>>, Fin<HashSet<B>>, HashSet<B>>(fab, f =>
                default(MFin<HashSet<A>>).Bind<MFin<HashSet<B>>, Fin<HashSet<B>>, HashSet<B>>(fa, a => 
                    default(MFin<HashSet<B>>).Pure(default(ApplHashSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Fin&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Fin<HashSet<C>> applyT< A, B, C>(Func<A, B, C> fabc, Fin<HashSet<A>> fa, Fin<HashSet<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class LstT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Fin&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Lst&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Fin&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Fin<Lst<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MFin<Lst<A>>, Fin<Lst<A>>, MLst<A>, Lst<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Fin&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Lst&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Fin&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Fin<Lst<A>> ma) =>
            default(Trans<MFin<Lst<A>>, Fin<Lst<A>>, MLst<A>, Lst<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Fin&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Lst<B>> bindT< A, B>(Fin<Lst<A>> ma, Func<A, Lst<B>> f) =>
            default(Trans<MFin<Lst<A>>, Fin<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MFin<Lst<B>>, Fin<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Fin&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Fin&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Fin&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Lst<Fin<B>> traverse< A, B>(Fin<Lst<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Fin&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Fin&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Lst<Fin<A>> sequence< A>(Fin<Lst<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Lst<B>> mapT< A, B>(Fin<Lst<A>> ma, Func<A, B> f) =>
            default(Trans<MFin<Lst<A>>, Fin<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Map<MFin<Lst<B>>, Fin<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Fin<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Lst<A>>, Fin<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Fin<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Lst<A>>, Fin<Lst<A>>, MLst<A>, Lst<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Fin<Lst<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Lst<A>>, Fin<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Fin<Lst<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Lst<A>>, Fin<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Fin&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Fin<Lst<A>> ma, Action<A> f) =>
            default(Trans<MFin<Lst<A>>, Fin<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Fin&lt;Lst&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Fin<Lst<A>> filterT< A>(Fin<Lst<A>> ma, Func<A, bool> pred) =>
            default(Trans<MFin<Lst<A>>, Fin<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MFin<Lst<A>>, Fin<Lst<A>>, MLst<A>, Lst<A>, A>(ma, 
                    a => pred(a)
                        ? default(MLst<A>).Pure(a)
                        : default(MLst<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Lst&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Fin<Lst<A>> plusT<NUM,  A>(Fin<Lst<A>> x, Fin<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Lst&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Fin<Lst<A>> subtractT<NUM,  A>(Fin<Lst<A>> x, Fin<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Fin<Lst<A>> productT<NUM,  A>(Fin<Lst<A>> x, Fin<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Fin<Lst<A>> divideT<NUM,  A>(Fin<Lst<A>> x, Fin<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Fin<Lst<A>> appendT<SEMI,  A>(Fin<Lst<A>> x, Fin<Lst<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Fin<Lst<A>> x, Fin<Lst<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Fin<Lst<A>> x, Fin<Lst<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Lst<B>> applyT< A, B>(Func<A, B> fab, Fin<Lst<A>> fa) =>
            default(ApplFin< Lst<A>, Lst<B>>).Apply(
                 default(MFin< Func<Lst<A>, Lst<B>>>).Pure((Lst<A> a) => default(ApplLst< A, B>).Apply(
                     default(MLst< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Lst<B>> applyT< A, B>(Fin<Lst<Func<A, B>>> fab, Fin<Lst<A>> fa) =>
            default(MFin<Lst<Func<A, B>>>).Bind<MFin<Lst<B>>, Fin<Lst<B>>, Lst<B>>(fab, f =>
                default(MFin<Lst<A>>).Bind<MFin<Lst<B>>, Fin<Lst<B>>, Lst<B>>(fa, a => 
                    default(MFin<Lst<B>>).Pure(default(ApplLst< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Lst&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Fin&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Fin<Lst<C>> applyT< A, B, C>(Func<A, B, C> fabc, Fin<Lst<A>> fa, Fin<Lst<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class FinT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Fin&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Fin&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Fin&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Fin<Fin<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MFin<Fin<A>>, Fin<Fin<A>>, MFin<A>, Fin<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Fin&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Fin&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Fin&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Fin<Fin<A>> ma) =>
            default(Trans<MFin<Fin<A>>, Fin<Fin<A>>, MFin<A>, Fin<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Fin&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Fin<B>> bindT< A, B>(Fin<Fin<A>> ma, Func<A, Fin<B>> f) =>
            default(Trans<MFin<Fin<A>>, Fin<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MFin<Fin<B>>, Fin<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Fin&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Fin&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Fin&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Fin<Fin<B>> traverse< A, B>(Fin<Fin<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Fin&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Fin&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Fin<Fin<A>> sequence< A>(Fin<Fin<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Fin<B>> mapT< A, B>(Fin<Fin<A>> ma, Func<A, B> f) =>
            default(Trans<MFin<Fin<A>>, Fin<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Map<MFin<Fin<B>>, Fin<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Fin<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Fin<A>>, Fin<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Fin<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Fin<A>>, Fin<Fin<A>>, MFin<A>, Fin<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Fin<Fin<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Fin<A>>, Fin<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Fin<Fin<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Fin<A>>, Fin<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Fin&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Fin<Fin<A>> ma, Action<A> f) =>
            default(Trans<MFin<Fin<A>>, Fin<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Fin&lt;Fin&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Fin<Fin<A>> filterT< A>(Fin<Fin<A>> ma, Func<A, bool> pred) =>
            default(Trans<MFin<Fin<A>>, Fin<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MFin<Fin<A>>, Fin<Fin<A>>, MFin<A>, Fin<A>, A>(ma, 
                    a => pred(a)
                        ? default(MFin<A>).Pure(a)
                        : default(MFin<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Fin&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Fin<Fin<A>> plusT<NUM,  A>(Fin<Fin<A>> x, Fin<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Fin&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Fin<Fin<A>> subtractT<NUM,  A>(Fin<Fin<A>> x, Fin<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Fin<Fin<A>> productT<NUM,  A>(Fin<Fin<A>> x, Fin<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Fin<Fin<A>> divideT<NUM,  A>(Fin<Fin<A>> x, Fin<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Fin<Fin<A>> appendT<SEMI,  A>(Fin<Fin<A>> x, Fin<Fin<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Fin<Fin<A>> x, Fin<Fin<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Fin<Fin<A>> x, Fin<Fin<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Fin<B>> applyT< A, B>(Func<A, B> fab, Fin<Fin<A>> fa) =>
            default(ApplFin< Fin<A>, Fin<B>>).Apply(
                 default(MFin< Func<Fin<A>, Fin<B>>>).Pure((Fin<A> a) => default(ApplFin< A, B>).Apply(
                     default(MFin< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Fin<B>> applyT< A, B>(Fin<Fin<Func<A, B>>> fab, Fin<Fin<A>> fa) =>
            default(MFin<Fin<Func<A, B>>>).Bind<MFin<Fin<B>>, Fin<Fin<B>>, Fin<B>>(fab, f =>
                default(MFin<Fin<A>>).Bind<MFin<Fin<B>>, Fin<Fin<B>>, Fin<B>>(fa, a => 
                    default(MFin<Fin<B>>).Pure(default(ApplFin< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Fin&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Fin&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Fin<Fin<C>> applyT< A, B, C>(Func<A, B, C> fabc, Fin<Fin<A>> fa, Fin<Fin<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Fin&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Option&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Fin&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Fin<Option<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MFin<Option<A>>, Fin<Option<A>>, MOption<A>, Option<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Fin&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Option&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Fin&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Fin<Option<A>> ma) =>
            default(Trans<MFin<Option<A>>, Fin<Option<A>>, MOption<A>, Option<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Fin&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Option<B>> bindT< A, B>(Fin<Option<A>> ma, Func<A, Option<B>> f) =>
            default(Trans<MFin<Option<A>>, Fin<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MFin<Option<B>>, Fin<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Fin&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Fin&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Fin&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Option<Fin<B>> traverse< A, B>(Fin<Option<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Fin&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Fin&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Option<Fin<A>> sequence< A>(Fin<Option<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Option<B>> mapT< A, B>(Fin<Option<A>> ma, Func<A, B> f) =>
            default(Trans<MFin<Option<A>>, Fin<Option<A>>, MOption<A>, Option<A>, A>)
                .Map<MFin<Option<B>>, Fin<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Fin<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Option<A>>, Fin<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Fin<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Option<A>>, Fin<Option<A>>, MOption<A>, Option<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Fin<Option<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Option<A>>, Fin<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Fin<Option<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Option<A>>, Fin<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Fin&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Fin<Option<A>> ma, Action<A> f) =>
            default(Trans<MFin<Option<A>>, Fin<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Fin&lt;Option&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Fin<Option<A>> filterT< A>(Fin<Option<A>> ma, Func<A, bool> pred) =>
            default(Trans<MFin<Option<A>>, Fin<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MFin<Option<A>>, Fin<Option<A>>, MOption<A>, Option<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOption<A>).Pure(a)
                        : default(MOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Option&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Fin<Option<A>> plusT<NUM,  A>(Fin<Option<A>> x, Fin<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Option&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Fin<Option<A>> subtractT<NUM,  A>(Fin<Option<A>> x, Fin<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Option&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Fin<Option<A>> productT<NUM,  A>(Fin<Option<A>> x, Fin<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Option&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Fin<Option<A>> divideT<NUM,  A>(Fin<Option<A>> x, Fin<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Option&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Fin<Option<A>> appendT<SEMI,  A>(Fin<Option<A>> x, Fin<Option<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Fin<Option<A>> x, Fin<Option<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Option&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Fin<Option<A>> x, Fin<Option<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Option<B>> applyT< A, B>(Func<A, B> fab, Fin<Option<A>> fa) =>
            default(ApplFin< Option<A>, Option<B>>).Apply(
                 default(MFin< Func<Option<A>, Option<B>>>).Pure((Option<A> a) => default(ApplOption< A, B>).Apply(
                     default(MOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Option<B>> applyT< A, B>(Fin<Option<Func<A, B>>> fab, Fin<Option<A>> fa) =>
            default(MFin<Option<Func<A, B>>>).Bind<MFin<Option<B>>, Fin<Option<B>>, Option<B>>(fab, f =>
                default(MFin<Option<A>>).Bind<MFin<Option<B>>, Fin<Option<B>>, Option<B>>(fa, a => 
                    default(MFin<Option<B>>).Pure(default(ApplOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Option&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Fin&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Option&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Fin<Option<C>> applyT< A, B, C>(Func<A, B, C> fabc, Fin<Option<A>> fa, Fin<Option<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Fin&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Fin&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Fin<OptionUnsafe<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MFin<OptionUnsafe<A>>, Fin<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Fin&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Fin&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Fin<OptionUnsafe<A>> ma) =>
            default(Trans<MFin<OptionUnsafe<A>>, Fin<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Fin&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<OptionUnsafe<B>> bindT< A, B>(Fin<OptionUnsafe<A>> ma, Func<A, OptionUnsafe<B>> f) =>
            default(Trans<MFin<OptionUnsafe<A>>, Fin<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MFin<OptionUnsafe<B>>, Fin<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Fin&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Fin&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Fin&lt;B&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Fin<B>> traverse< A, B>(Fin<OptionUnsafe<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Fin&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Fin&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Fin<A>> sequence< A>(Fin<OptionUnsafe<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<OptionUnsafe<B>> mapT< A, B>(Fin<OptionUnsafe<A>> ma, Func<A, B> f) =>
            default(Trans<MFin<OptionUnsafe<A>>, Fin<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Map<MFin<OptionUnsafe<B>>, Fin<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Fin<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<OptionUnsafe<A>>, Fin<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Fin<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<OptionUnsafe<A>>, Fin<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Fin<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<OptionUnsafe<A>>, Fin<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Fin<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<OptionUnsafe<A>>, Fin<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Fin&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Fin<OptionUnsafe<A>> ma, Action<A> f) =>
            default(Trans<MFin<OptionUnsafe<A>>, Fin<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Fin&lt;OptionUnsafe&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Fin<OptionUnsafe<A>> filterT< A>(Fin<OptionUnsafe<A>> ma, Func<A, bool> pred) =>
            default(Trans<MFin<OptionUnsafe<A>>, Fin<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MFin<OptionUnsafe<A>>, Fin<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOptionUnsafe<A>).Pure(a)
                        : default(MOptionUnsafe<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Fin<OptionUnsafe<A>> plusT<NUM,  A>(Fin<OptionUnsafe<A>> x, Fin<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Fin<OptionUnsafe<A>> subtractT<NUM,  A>(Fin<OptionUnsafe<A>> x, Fin<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Fin<OptionUnsafe<A>> productT<NUM,  A>(Fin<OptionUnsafe<A>> x, Fin<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Fin<OptionUnsafe<A>> divideT<NUM,  A>(Fin<OptionUnsafe<A>> x, Fin<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Fin<OptionUnsafe<A>> appendT<SEMI,  A>(Fin<OptionUnsafe<A>> x, Fin<OptionUnsafe<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Fin<OptionUnsafe<A>> x, Fin<OptionUnsafe<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Fin<OptionUnsafe<A>> x, Fin<OptionUnsafe<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<OptionUnsafe<B>> applyT< A, B>(Func<A, B> fab, Fin<OptionUnsafe<A>> fa) =>
            default(ApplFin< OptionUnsafe<A>, OptionUnsafe<B>>).Apply(
                 default(MFin< Func<OptionUnsafe<A>, OptionUnsafe<B>>>).Pure((OptionUnsafe<A> a) => default(ApplOptionUnsafe< A, B>).Apply(
                     default(MOptionUnsafe< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<OptionUnsafe<B>> applyT< A, B>(Fin<OptionUnsafe<Func<A, B>>> fab, Fin<OptionUnsafe<A>> fa) =>
            default(MFin<OptionUnsafe<Func<A, B>>>).Bind<MFin<OptionUnsafe<B>>, Fin<OptionUnsafe<B>>, OptionUnsafe<B>>(fab, f =>
                default(MFin<OptionUnsafe<A>>).Bind<MFin<OptionUnsafe<B>>, Fin<OptionUnsafe<B>>, OptionUnsafe<B>>(fa, a => 
                    default(MFin<OptionUnsafe<B>>).Pure(default(ApplOptionUnsafe< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Fin&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Fin<OptionUnsafe<C>> applyT< A, B, C>(Func<A, B, C> fabc, Fin<OptionUnsafe<A>> fa, Fin<OptionUnsafe<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Fin&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Either&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Fin&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Fin<Either<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MFin<Either<L, A>>, Fin<Either<L, A>>, MEither<L, A>, Either<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Fin&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Either&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Fin&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Fin<Either<L, A>> ma) =>
            default(Trans<MFin<Either<L, A>>, Fin<Either<L, A>>, MEither<L, A>, Either<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Fin&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Either<L, B>> bindT<L, A, B>(Fin<Either<L, A>> ma, Func<A, Either<L, B>> f) =>
            default(Trans<MFin<Either<L, A>>, Fin<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MFin<Either<L, B>>, Fin<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Fin&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Fin&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Fin&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Fin<B>> traverse<L, A, B>(Fin<Either<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Fin&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Fin&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Fin<A>> sequence<L, A>(Fin<Either<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Either<L, B>> mapT<L, A, B>(Fin<Either<L, A>> ma, Func<A, B> f) =>
            default(Trans<MFin<Either<L, A>>, Fin<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Map<MFin<Either<L, B>>, Fin<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Fin<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Either<L, A>>, Fin<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Fin<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Either<L, A>>, Fin<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Fin<Either<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Either<L, A>>, Fin<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Fin<Either<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Either<L, A>>, Fin<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Fin&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Fin<Either<L, A>> ma, Action<A> f) =>
            default(Trans<MFin<Either<L, A>>, Fin<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Fin&lt;Either&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Fin<Either<L, A>> filterT<L, A>(Fin<Either<L, A>> ma, Func<A, bool> pred) =>
            default(Trans<MFin<Either<L, A>>, Fin<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MFin<Either<L, A>>, Fin<Either<L, A>>, MEither<L, A>, Either<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEither<L, A>).Pure(a)
                        : default(MEither<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Fin<Either<L, A>> plusT<NUM, L, A>(Fin<Either<L, A>> x, Fin<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Fin<Either<L, A>> subtractT<NUM, L, A>(Fin<Either<L, A>> x, Fin<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Fin<Either<L, A>> productT<NUM, L, A>(Fin<Either<L, A>> x, Fin<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Fin<Either<L, A>> divideT<NUM, L, A>(Fin<Either<L, A>> x, Fin<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Fin<Either<L, A>> appendT<SEMI, L, A>(Fin<Either<L, A>> x, Fin<Either<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Fin<Either<L, A>> x, Fin<Either<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Fin<Either<L, A>> x, Fin<Either<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Either<L, B>> applyT<L, A, B>(Func<A, B> fab, Fin<Either<L, A>> fa) =>
            default(ApplFin< Either<L, A>, Either<L, B>>).Apply(
                 default(MFin< Func<Either<L, A>, Either<L, B>>>).Pure((Either<L, A> a) => default(ApplEither<L, A, B>).Apply(
                     default(MEither<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Either<L, B>> applyT<L, A, B>(Fin<Either<L, Func<A, B>>> fab, Fin<Either<L, A>> fa) =>
            default(MFin<Either<L, Func<A, B>>>).Bind<MFin<Either<L, B>>, Fin<Either<L, B>>, Either<L, B>>(fab, f =>
                default(MFin<Either<L, A>>).Bind<MFin<Either<L, B>>, Fin<Either<L, B>>, Either<L, B>>(fa, a => 
                    default(MFin<Either<L, B>>).Pure(default(ApplEither<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Fin&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Fin<Either<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Fin<Either<L, A>> fa, Fin<Either<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Fin<EitherUnsafe<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MFin<EitherUnsafe<L, A>>, Fin<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Fin<EitherUnsafe<L, A>> ma) =>
            default(Trans<MFin<EitherUnsafe<L, A>>, Fin<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Fin&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<EitherUnsafe<L, B>> bindT<L, A, B>(Fin<EitherUnsafe<L, A>> ma, Func<A, EitherUnsafe<L, B>> f) =>
            default(Trans<MFin<EitherUnsafe<L, A>>, Fin<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MFin<EitherUnsafe<L, B>>, Fin<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Fin&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Fin&lt;B&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Fin<B>> traverse<L, A, B>(Fin<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Fin<A>> sequence<L, A>(Fin<EitherUnsafe<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<EitherUnsafe<L, B>> mapT<L, A, B>(Fin<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            default(Trans<MFin<EitherUnsafe<L, A>>, Fin<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Map<MFin<EitherUnsafe<L, B>>, Fin<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Fin<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<EitherUnsafe<L, A>>, Fin<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Fin<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<EitherUnsafe<L, A>>, Fin<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Fin<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<EitherUnsafe<L, A>>, Fin<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Fin<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<EitherUnsafe<L, A>>, Fin<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Fin<EitherUnsafe<L, A>> ma, Action<A> f) =>
            default(Trans<MFin<EitherUnsafe<L, A>>, Fin<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Fin<EitherUnsafe<L, A>> filterT<L, A>(Fin<EitherUnsafe<L, A>> ma, Func<A, bool> pred) =>
            default(Trans<MFin<EitherUnsafe<L, A>>, Fin<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MFin<EitherUnsafe<L, A>>, Fin<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEitherUnsafe<L, A>).Pure(a)
                        : default(MEitherUnsafe<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Fin<EitherUnsafe<L, A>> plusT<NUM, L, A>(Fin<EitherUnsafe<L, A>> x, Fin<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Fin<EitherUnsafe<L, A>> subtractT<NUM, L, A>(Fin<EitherUnsafe<L, A>> x, Fin<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Fin<EitherUnsafe<L, A>> productT<NUM, L, A>(Fin<EitherUnsafe<L, A>> x, Fin<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Fin<EitherUnsafe<L, A>> divideT<NUM, L, A>(Fin<EitherUnsafe<L, A>> x, Fin<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Fin<EitherUnsafe<L, A>> appendT<SEMI, L, A>(Fin<EitherUnsafe<L, A>> x, Fin<EitherUnsafe<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Fin<EitherUnsafe<L, A>> x, Fin<EitherUnsafe<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Fin<EitherUnsafe<L, A>> x, Fin<EitherUnsafe<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Fin&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<EitherUnsafe<L, B>> applyT<L, A, B>(Func<A, B> fab, Fin<EitherUnsafe<L, A>> fa) =>
            default(ApplFin< EitherUnsafe<L, A>, EitherUnsafe<L, B>>).Apply(
                 default(MFin< Func<EitherUnsafe<L, A>, EitherUnsafe<L, B>>>).Pure((EitherUnsafe<L, A> a) => default(ApplEitherUnsafe<L, A, B>).Apply(
                     default(MEitherUnsafe<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Fin&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<EitherUnsafe<L, B>> applyT<L, A, B>(Fin<EitherUnsafe<L, Func<A, B>>> fab, Fin<EitherUnsafe<L, A>> fa) =>
            default(MFin<EitherUnsafe<L, Func<A, B>>>).Bind<MFin<EitherUnsafe<L, B>>, Fin<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fab, f =>
                default(MFin<EitherUnsafe<L, A>>).Bind<MFin<EitherUnsafe<L, B>>, Fin<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fa, a => 
                    default(MFin<EitherUnsafe<L, B>>).Pure(default(ApplEitherUnsafe<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Fin&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Fin<EitherUnsafe<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Fin<EitherUnsafe<L, A>> fa, Fin<EitherUnsafe<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Fin&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Try&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Fin&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Fin<Try<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MFin<Try<A>>, Fin<Try<A>>, MTry<A>, Try<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Fin&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Try&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Fin&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Fin<Try<A>> ma) =>
            default(Trans<MFin<Try<A>>, Fin<Try<A>>, MTry<A>, Try<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Fin&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Try<B>> bindT< A, B>(Fin<Try<A>> ma, Func<A, Try<B>> f) =>
            default(Trans<MFin<Try<A>>, Fin<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MFin<Try<B>>, Fin<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Fin&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Fin&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Fin&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Try<Fin<B>> traverse< A, B>(Fin<Try<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Fin&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Fin&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Try<Fin<A>> sequence< A>(Fin<Try<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Try<B>> mapT< A, B>(Fin<Try<A>> ma, Func<A, B> f) =>
            default(Trans<MFin<Try<A>>, Fin<Try<A>>, MTry<A>, Try<A>, A>)
                .Map<MFin<Try<B>>, Fin<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Fin<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Try<A>>, Fin<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Fin<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Try<A>>, Fin<Try<A>>, MTry<A>, Try<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Fin<Try<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Try<A>>, Fin<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Fin<Try<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Try<A>>, Fin<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Fin&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Fin<Try<A>> ma, Action<A> f) =>
            default(Trans<MFin<Try<A>>, Fin<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Fin&lt;Try&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Fin<Try<A>> filterT< A>(Fin<Try<A>> ma, Func<A, bool> pred) =>
            default(Trans<MFin<Try<A>>, Fin<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MFin<Try<A>>, Fin<Try<A>>, MTry<A>, Try<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTry<A>).Pure(a)
                        : default(MTry<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Try&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Fin<Try<A>> plusT<NUM,  A>(Fin<Try<A>> x, Fin<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Try&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Fin<Try<A>> subtractT<NUM,  A>(Fin<Try<A>> x, Fin<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Try&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Fin<Try<A>> productT<NUM,  A>(Fin<Try<A>> x, Fin<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Try&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Fin<Try<A>> divideT<NUM,  A>(Fin<Try<A>> x, Fin<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Try&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Fin<Try<A>> appendT<SEMI,  A>(Fin<Try<A>> x, Fin<Try<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Fin<Try<A>> x, Fin<Try<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Try&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Fin<Try<A>> x, Fin<Try<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Try<B>> applyT< A, B>(Func<A, B> fab, Fin<Try<A>> fa) =>
            default(ApplFin< Try<A>, Try<B>>).Apply(
                 default(MFin< Func<Try<A>, Try<B>>>).Pure((Try<A> a) => default(ApplTry< A, B>).Apply(
                     default(MTry< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Try<B>> applyT< A, B>(Fin<Try<Func<A, B>>> fab, Fin<Try<A>> fa) =>
            default(MFin<Try<Func<A, B>>>).Bind<MFin<Try<B>>, Fin<Try<B>>, Try<B>>(fab, f =>
                default(MFin<Try<A>>).Bind<MFin<Try<B>>, Fin<Try<B>>, Try<B>>(fa, a => 
                    default(MFin<Try<B>>).Pure(default(ApplTry< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Try&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Fin&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Try&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Fin<Try<C>> applyT< A, B, C>(Func<A, B, C> fabc, Fin<Try<A>> fa, Fin<Try<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryOptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Fin&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;TryOption&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Fin&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Fin<TryOption<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MFin<TryOption<A>>, Fin<TryOption<A>>, MTryOption<A>, TryOption<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Fin&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;TryOption&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Fin&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Fin<TryOption<A>> ma) =>
            default(Trans<MFin<TryOption<A>>, Fin<TryOption<A>>, MTryOption<A>, TryOption<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Fin&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<TryOption<B>> bindT< A, B>(Fin<TryOption<A>> ma, Func<A, TryOption<B>> f) =>
            default(Trans<MFin<TryOption<A>>, Fin<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MFin<TryOption<B>>, Fin<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Fin&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Fin&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Fin&lt;B&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Fin<B>> traverse< A, B>(Fin<TryOption<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Fin&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Fin&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Fin<A>> sequence< A>(Fin<TryOption<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<TryOption<B>> mapT< A, B>(Fin<TryOption<A>> ma, Func<A, B> f) =>
            default(Trans<MFin<TryOption<A>>, Fin<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Map<MFin<TryOption<B>>, Fin<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Fin<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<TryOption<A>>, Fin<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Fin<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<TryOption<A>>, Fin<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Fin<TryOption<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<TryOption<A>>, Fin<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Fin<TryOption<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<TryOption<A>>, Fin<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Fin&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Fin<TryOption<A>> ma, Action<A> f) =>
            default(Trans<MFin<TryOption<A>>, Fin<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Fin&lt;TryOption&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Fin<TryOption<A>> filterT< A>(Fin<TryOption<A>> ma, Func<A, bool> pred) =>
            default(Trans<MFin<TryOption<A>>, Fin<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MFin<TryOption<A>>, Fin<TryOption<A>>, MTryOption<A>, TryOption<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTryOption<A>).Pure(a)
                        : default(MTryOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Fin<TryOption<A>> plusT<NUM,  A>(Fin<TryOption<A>> x, Fin<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Fin<TryOption<A>> subtractT<NUM,  A>(Fin<TryOption<A>> x, Fin<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Fin<TryOption<A>> productT<NUM,  A>(Fin<TryOption<A>> x, Fin<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Fin<TryOption<A>> divideT<NUM,  A>(Fin<TryOption<A>> x, Fin<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Fin<TryOption<A>> appendT<SEMI,  A>(Fin<TryOption<A>> x, Fin<TryOption<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Fin<TryOption<A>> x, Fin<TryOption<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Fin<TryOption<A>> x, Fin<TryOption<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<TryOption<B>> applyT< A, B>(Func<A, B> fab, Fin<TryOption<A>> fa) =>
            default(ApplFin< TryOption<A>, TryOption<B>>).Apply(
                 default(MFin< Func<TryOption<A>, TryOption<B>>>).Pure((TryOption<A> a) => default(ApplTryOption< A, B>).Apply(
                     default(MTryOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<TryOption<B>> applyT< A, B>(Fin<TryOption<Func<A, B>>> fab, Fin<TryOption<A>> fa) =>
            default(MFin<TryOption<Func<A, B>>>).Bind<MFin<TryOption<B>>, Fin<TryOption<B>>, TryOption<B>>(fab, f =>
                default(MFin<TryOption<A>>).Bind<MFin<TryOption<B>>, Fin<TryOption<B>>, TryOption<B>>(fa, a => 
                    default(MFin<TryOption<B>>).Pure(default(ApplTryOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Fin&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Fin<TryOption<C>> applyT< A, B, C>(Func<A, B, C> fabc, Fin<TryOption<A>> fa, Fin<TryOption<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class IEnumerableT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Fin&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;IEnumerable&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Fin&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Fin<IEnumerable<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MFin<IEnumerable<A>>, Fin<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Fin&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;IEnumerable&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Fin&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Fin<IEnumerable<A>> ma) =>
            default(Trans<MFin<IEnumerable<A>>, Fin<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Fin&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<IEnumerable<B>> bindT< A, B>(Fin<IEnumerable<A>> ma, Func<A, IEnumerable<B>> f) =>
            default(Trans<MFin<IEnumerable<A>>, Fin<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MFin<IEnumerable<B>>, Fin<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Fin&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Fin&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Fin&lt;B&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Fin<B>> traverse< A, B>(Fin<IEnumerable<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Fin&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Fin&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Fin<A>> sequence< A>(Fin<IEnumerable<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<IEnumerable<B>> mapT< A, B>(Fin<IEnumerable<A>> ma, Func<A, B> f) =>
            default(Trans<MFin<IEnumerable<A>>, Fin<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Map<MFin<IEnumerable<B>>, Fin<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Fin<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<IEnumerable<A>>, Fin<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Fin<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<IEnumerable<A>>, Fin<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Fin<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<IEnumerable<A>>, Fin<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Fin<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<IEnumerable<A>>, Fin<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Fin&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Fin<IEnumerable<A>> ma, Action<A> f) =>
            default(Trans<MFin<IEnumerable<A>>, Fin<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Fin&lt;IEnumerable&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Fin<IEnumerable<A>> filterT< A>(Fin<IEnumerable<A>> ma, Func<A, bool> pred) =>
            default(Trans<MFin<IEnumerable<A>>, Fin<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MFin<IEnumerable<A>>, Fin<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>(ma, 
                    a => pred(a)
                        ? default(MEnumerable<A>).Pure(a)
                        : default(MEnumerable<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Fin<IEnumerable<A>> plusT<NUM,  A>(Fin<IEnumerable<A>> x, Fin<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Fin<IEnumerable<A>> subtractT<NUM,  A>(Fin<IEnumerable<A>> x, Fin<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Fin<IEnumerable<A>> productT<NUM,  A>(Fin<IEnumerable<A>> x, Fin<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Fin<IEnumerable<A>> divideT<NUM,  A>(Fin<IEnumerable<A>> x, Fin<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Fin<IEnumerable<A>> appendT<SEMI,  A>(Fin<IEnumerable<A>> x, Fin<IEnumerable<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Fin<IEnumerable<A>> x, Fin<IEnumerable<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Fin<IEnumerable<A>> x, Fin<IEnumerable<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<IEnumerable<B>> applyT< A, B>(Func<A, B> fab, Fin<IEnumerable<A>> fa) =>
            default(ApplFin< IEnumerable<A>, IEnumerable<B>>).Apply(
                 default(MFin< Func<IEnumerable<A>, IEnumerable<B>>>).Pure((IEnumerable<A> a) => default(ApplEnumerable< A, B>).Apply(
                     default(MEnumerable< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<IEnumerable<B>> applyT< A, B>(Fin<IEnumerable<Func<A, B>>> fab, Fin<IEnumerable<A>> fa) =>
            default(MFin<IEnumerable<Func<A, B>>>).Bind<MFin<IEnumerable<B>>, Fin<IEnumerable<B>>, IEnumerable<B>>(fab, f =>
                default(MFin<IEnumerable<A>>).Bind<MFin<IEnumerable<B>>, Fin<IEnumerable<B>>, IEnumerable<B>>(fa, a => 
                    default(MFin<IEnumerable<B>>).Pure(default(ApplEnumerable< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Fin&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Fin<IEnumerable<C>> applyT< A, B, C>(Func<A, B, C> fabc, Fin<IEnumerable<A>> fa, Fin<IEnumerable<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SeqT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Fin&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Seq&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Fin&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Fin<Seq<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MFin<Seq<A>>, Fin<Seq<A>>, MSeq<A>, Seq<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Fin&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Seq&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Fin&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Fin<Seq<A>> ma) =>
            default(Trans<MFin<Seq<A>>, Fin<Seq<A>>, MSeq<A>, Seq<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Fin&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Seq<B>> bindT< A, B>(Fin<Seq<A>> ma, Func<A, Seq<B>> f) =>
            default(Trans<MFin<Seq<A>>, Fin<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MFin<Seq<B>>, Fin<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Fin&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Fin&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Fin&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Seq<Fin<B>> traverse< A, B>(Fin<Seq<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Fin&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Fin&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Seq<Fin<A>> sequence< A>(Fin<Seq<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Seq<B>> mapT< A, B>(Fin<Seq<A>> ma, Func<A, B> f) =>
            default(Trans<MFin<Seq<A>>, Fin<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Map<MFin<Seq<B>>, Fin<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Fin<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Seq<A>>, Fin<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Fin<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Seq<A>>, Fin<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Fin<Seq<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Seq<A>>, Fin<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Fin<Seq<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Seq<A>>, Fin<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Fin&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Fin<Seq<A>> ma, Action<A> f) =>
            default(Trans<MFin<Seq<A>>, Fin<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Fin&lt;Seq&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Fin<Seq<A>> filterT< A>(Fin<Seq<A>> ma, Func<A, bool> pred) =>
            default(Trans<MFin<Seq<A>>, Fin<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MFin<Seq<A>>, Fin<Seq<A>>, MSeq<A>, Seq<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSeq<A>).Pure(a)
                        : default(MSeq<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Seq&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Fin<Seq<A>> plusT<NUM,  A>(Fin<Seq<A>> x, Fin<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Seq&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Fin<Seq<A>> subtractT<NUM,  A>(Fin<Seq<A>> x, Fin<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Fin<Seq<A>> productT<NUM,  A>(Fin<Seq<A>> x, Fin<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Fin<Seq<A>> divideT<NUM,  A>(Fin<Seq<A>> x, Fin<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Fin<Seq<A>> appendT<SEMI,  A>(Fin<Seq<A>> x, Fin<Seq<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Fin<Seq<A>> x, Fin<Seq<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Fin<Seq<A>> x, Fin<Seq<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Seq<B>> applyT< A, B>(Func<A, B> fab, Fin<Seq<A>> fa) =>
            default(ApplFin< Seq<A>, Seq<B>>).Apply(
                 default(MFin< Func<Seq<A>, Seq<B>>>).Pure((Seq<A> a) => default(ApplSeq< A, B>).Apply(
                     default(MSeq< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Seq<B>> applyT< A, B>(Fin<Seq<Func<A, B>>> fab, Fin<Seq<A>> fa) =>
            default(MFin<Seq<Func<A, B>>>).Bind<MFin<Seq<B>>, Fin<Seq<B>>, Seq<B>>(fab, f =>
                default(MFin<Seq<A>>).Bind<MFin<Seq<B>>, Fin<Seq<B>>, Seq<B>>(fa, a => 
                    default(MFin<Seq<B>>).Pure(default(ApplSeq< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Seq&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Fin&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Fin<Seq<C>> applyT< A, B, C>(Func<A, B, C> fabc, Fin<Seq<A>> fa, Fin<Seq<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Fin&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Set&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Fin&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Fin<Set<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MFin<Set<A>>, Fin<Set<A>>, MSet<A>, Set<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Fin&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Set&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Fin&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Fin<Set<A>> ma) =>
            default(Trans<MFin<Set<A>>, Fin<Set<A>>, MSet<A>, Set<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Fin&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Set<B>> bindT< A, B>(Fin<Set<A>> ma, Func<A, Set<B>> f) =>
            default(Trans<MFin<Set<A>>, Fin<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MFin<Set<B>>, Fin<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Fin&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Fin&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Fin&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Set<Fin<B>> traverse< A, B>(Fin<Set<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Fin&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Fin&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Set<Fin<A>> sequence< A>(Fin<Set<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Set<B>> mapT< A, B>(Fin<Set<A>> ma, Func<A, B> f) =>
            default(Trans<MFin<Set<A>>, Fin<Set<A>>, MSet<A>, Set<A>, A>)
                .Map<MFin<Set<B>>, Fin<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Fin<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Set<A>>, Fin<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Fin<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Set<A>>, Fin<Set<A>>, MSet<A>, Set<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Fin<Set<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Set<A>>, Fin<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Fin<Set<A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Set<A>>, Fin<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Fin&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Fin<Set<A>> ma, Action<A> f) =>
            default(Trans<MFin<Set<A>>, Fin<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Fin&lt;Set&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Fin<Set<A>> filterT< A>(Fin<Set<A>> ma, Func<A, bool> pred) =>
            default(Trans<MFin<Set<A>>, Fin<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MFin<Set<A>>, Fin<Set<A>>, MSet<A>, Set<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSet<A>).Pure(a)
                        : default(MSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Set&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Fin<Set<A>> plusT<NUM,  A>(Fin<Set<A>> x, Fin<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Set&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Fin<Set<A>> subtractT<NUM,  A>(Fin<Set<A>> x, Fin<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Set&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Fin<Set<A>> productT<NUM,  A>(Fin<Set<A>> x, Fin<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Set&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Fin<Set<A>> divideT<NUM,  A>(Fin<Set<A>> x, Fin<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Set&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Fin<Set<A>> appendT<SEMI,  A>(Fin<Set<A>> x, Fin<Set<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Fin<Set<A>> x, Fin<Set<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Set&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Fin<Set<A>> x, Fin<Set<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Set<B>> applyT< A, B>(Func<A, B> fab, Fin<Set<A>> fa) =>
            default(ApplFin< Set<A>, Set<B>>).Apply(
                 default(MFin< Func<Set<A>, Set<B>>>).Pure((Set<A> a) => default(ApplSet< A, B>).Apply(
                     default(MSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Set<B>> applyT< A, B>(Fin<Set<Func<A, B>>> fab, Fin<Set<A>> fa) =>
            default(MFin<Set<Func<A, B>>>).Bind<MFin<Set<B>>, Fin<Set<B>>, Set<B>>(fab, f =>
                default(MFin<Set<A>>).Bind<MFin<Set<B>>, Fin<Set<B>>, Set<B>>(fa, a => 
                    default(MFin<Set<B>>).Pure(default(ApplSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Set&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Fin&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Set&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Fin<Set<C>> applyT< A, B, C>(Func<A, B, C> fabc, Fin<Set<A>> fa, Fin<Set<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ValidationT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Fin&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Fin&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Fin<Validation<FAIL, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MFin<Validation<FAIL, A>>, Fin<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Fin&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Fin&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Fin<Validation<FAIL, A>> ma) =>
            default(Trans<MFin<Validation<FAIL, A>>, Fin<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Fin&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Validation<FAIL, B>> bindT<FAIL, A, B>(Fin<Validation<FAIL, A>> ma, Func<A, Validation<FAIL, B>> f) =>
            default(Trans<MFin<Validation<FAIL, A>>, Fin<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MFin<Validation<FAIL, B>>, Fin<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Fin&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Fin&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Fin&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Fin<B>> traverse<FAIL, A, B>(Fin<Validation<FAIL, A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Fin&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Fin&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Fin<A>> sequence<FAIL, A>(Fin<Validation<FAIL, A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Fin<Validation<FAIL, B>> mapT<FAIL, A, B>(Fin<Validation<FAIL, A>> ma, Func<A, B> f) =>
            default(Trans<MFin<Validation<FAIL, A>>, Fin<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Map<MFin<Validation<FAIL, B>>, Fin<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Fin<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Validation<FAIL, A>>, Fin<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Fin&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Fin<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MFin<Validation<FAIL, A>>, Fin<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Fin<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Validation<FAIL, A>>, Fin<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Fin<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(Trans<MFin<Validation<FAIL, A>>, Fin<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Fin&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Fin<Validation<FAIL, A>> ma, Action<A> f) =>
            default(Trans<MFin<Validation<FAIL, A>>, Fin<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Fin&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Fin&lt;Validation&lt;FAIL, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Fin<Validation<FAIL, A>> filterT<FAIL, A>(Fin<Validation<FAIL, A>> ma, Func<A, bool> pred) =>
            default(Trans<MFin<Validation<FAIL, A>>, Fin<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MFin<Validation<FAIL, A>>, Fin<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>(ma, 
                    a => pred(a)
                        ? default(MValidation<FAIL, A>).Pure(a)
                        : default(MValidation<FAIL, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Fin<Validation<FAIL, A>> plusT<NUM, FAIL, A>(Fin<Validation<FAIL, A>> x, Fin<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Fin<Validation<FAIL, A>> subtractT<NUM, FAIL, A>(Fin<Validation<FAIL, A>> x, Fin<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Fin<Validation<FAIL, A>> productT<NUM, FAIL, A>(Fin<Validation<FAIL, A>> x, Fin<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Fin<Validation<FAIL, A>> divideT<NUM, FAIL, A>(Fin<Validation<FAIL, A>> x, Fin<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Fin<Validation<FAIL, A>> appendT<SEMI, FAIL, A>(Fin<Validation<FAIL, A>> x, Fin<Validation<FAIL, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Fin<Validation<FAIL, A>> x, Fin<Validation<FAIL, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Fin&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Fin<Validation<FAIL, A>> x, Fin<Validation<FAIL, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Validation<FAIL, B>> applyT<FAIL, A, B>(Func<A, B> fab, Fin<Validation<FAIL, A>> fa) =>
            default(ApplFin< Validation<FAIL, A>, Validation<FAIL, B>>).Apply(
                 default(MFin< Func<Validation<FAIL, A>, Validation<FAIL, B>>>).Pure((Validation<FAIL, A> a) => default(ApplValidation<FAIL, A, B>).Apply(
                     default(MValidation<FAIL, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Fin<Validation<FAIL, B>> applyT<FAIL, A, B>(Fin<Validation<FAIL, Func<A, B>>> fab, Fin<Validation<FAIL, A>> fa) =>
            default(MFin<Validation<FAIL, Func<A, B>>>).Bind<MFin<Validation<FAIL, B>>, Fin<Validation<FAIL, B>>, Validation<FAIL, B>>(fab, f =>
                default(MFin<Validation<FAIL, A>>).Bind<MFin<Validation<FAIL, B>>, Fin<Validation<FAIL, B>>, Validation<FAIL, B>>(fa, a => 
                    default(MFin<Validation<FAIL, B>>).Pure(default(ApplValidation<FAIL, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Fin&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Fin&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Fin&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Fin<Validation<FAIL, C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Fin<Validation<FAIL, A>> fa, Fin<Validation<FAIL, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ArrT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Option&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Arr&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Option&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Option<Arr<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOption<Arr<A>>, Option<Arr<A>>, MArr<A>, Arr<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Option&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Arr&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Option&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Option<Arr<A>> ma) =>
            default(Trans<MOption<Arr<A>>, Option<Arr<A>>, MArr<A>, Arr<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Option&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Arr<B>> bindT< A, B>(Option<Arr<A>> ma, Func<A, Arr<B>> f) =>
            default(Trans<MOption<Arr<A>>, Option<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MOption<Arr<B>>, Option<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Option&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Option&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Option&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Arr<Option<B>> traverse< A, B>(Option<Arr<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Option&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Option&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Arr<Option<A>> sequence< A>(Option<Arr<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Arr<B>> mapT< A, B>(Option<Arr<A>> ma, Func<A, B> f) =>
            default(Trans<MOption<Arr<A>>, Option<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Map<MOption<Arr<B>>, Option<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Option<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Arr<A>>, Option<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Option<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Arr<A>>, Option<Arr<A>>, MArr<A>, Arr<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Option<Arr<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Arr<A>>, Option<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Option<Arr<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Arr<A>>, Option<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Option&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Option<Arr<A>> ma, Action<A> f) =>
            default(Trans<MOption<Arr<A>>, Option<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Option&lt;Arr&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Option<Arr<A>> filterT< A>(Option<Arr<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOption<Arr<A>>, Option<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MOption<Arr<A>>, Option<Arr<A>>, MArr<A>, Arr<A>, A>(ma, 
                    a => pred(a)
                        ? default(MArr<A>).Pure(a)
                        : default(MArr<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Arr&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Option<Arr<A>> plusT<NUM,  A>(Option<Arr<A>> x, Option<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Arr&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Option<Arr<A>> subtractT<NUM,  A>(Option<Arr<A>> x, Option<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Option<Arr<A>> productT<NUM,  A>(Option<Arr<A>> x, Option<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Option<Arr<A>> divideT<NUM,  A>(Option<Arr<A>> x, Option<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Option<Arr<A>> appendT<SEMI,  A>(Option<Arr<A>> x, Option<Arr<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Option<Arr<A>> x, Option<Arr<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Option<Arr<A>> x, Option<Arr<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Arr<B>> applyT< A, B>(Func<A, B> fab, Option<Arr<A>> fa) =>
            default(ApplOption< Arr<A>, Arr<B>>).Apply(
                 default(MOption< Func<Arr<A>, Arr<B>>>).Pure((Arr<A> a) => default(ApplArr< A, B>).Apply(
                     default(MArr< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Arr<B>> applyT< A, B>(Option<Arr<Func<A, B>>> fab, Option<Arr<A>> fa) =>
            default(MOption<Arr<Func<A, B>>>).Bind<MOption<Arr<B>>, Option<Arr<B>>, Arr<B>>(fab, f =>
                default(MOption<Arr<A>>).Bind<MOption<Arr<B>>, Option<Arr<B>>, Arr<B>>(fa, a => 
                    default(MOption<Arr<B>>).Pure(default(ApplArr< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Arr&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Option&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Option<Arr<C>> applyT< A, B, C>(Func<A, B, C> fabc, Option<Arr<A>> fa, Option<Arr<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class HashSetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Option&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;HashSet&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Option&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Option<HashSet<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOption<HashSet<A>>, Option<HashSet<A>>, MHashSet<A>, HashSet<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Option&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;HashSet&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Option&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Option<HashSet<A>> ma) =>
            default(Trans<MOption<HashSet<A>>, Option<HashSet<A>>, MHashSet<A>, HashSet<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Option&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<HashSet<B>> bindT< A, B>(Option<HashSet<A>> ma, Func<A, HashSet<B>> f) =>
            default(Trans<MOption<HashSet<A>>, Option<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MOption<HashSet<B>>, Option<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Option&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Option&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Option&lt;B&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Option<B>> traverse< A, B>(Option<HashSet<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Option&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Option&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Option<A>> sequence< A>(Option<HashSet<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<HashSet<B>> mapT< A, B>(Option<HashSet<A>> ma, Func<A, B> f) =>
            default(Trans<MOption<HashSet<A>>, Option<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Map<MOption<HashSet<B>>, Option<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Option<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<HashSet<A>>, Option<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Option<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<HashSet<A>>, Option<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Option<HashSet<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<HashSet<A>>, Option<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Option<HashSet<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<HashSet<A>>, Option<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Option&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Option<HashSet<A>> ma, Action<A> f) =>
            default(Trans<MOption<HashSet<A>>, Option<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Option&lt;HashSet&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Option<HashSet<A>> filterT< A>(Option<HashSet<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOption<HashSet<A>>, Option<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MOption<HashSet<A>>, Option<HashSet<A>>, MHashSet<A>, HashSet<A>, A>(ma, 
                    a => pred(a)
                        ? default(MHashSet<A>).Pure(a)
                        : default(MHashSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Option<HashSet<A>> plusT<NUM,  A>(Option<HashSet<A>> x, Option<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Option<HashSet<A>> subtractT<NUM,  A>(Option<HashSet<A>> x, Option<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Option<HashSet<A>> productT<NUM,  A>(Option<HashSet<A>> x, Option<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Option<HashSet<A>> divideT<NUM,  A>(Option<HashSet<A>> x, Option<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Option<HashSet<A>> appendT<SEMI,  A>(Option<HashSet<A>> x, Option<HashSet<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Option<HashSet<A>> x, Option<HashSet<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Option<HashSet<A>> x, Option<HashSet<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<HashSet<B>> applyT< A, B>(Func<A, B> fab, Option<HashSet<A>> fa) =>
            default(ApplOption< HashSet<A>, HashSet<B>>).Apply(
                 default(MOption< Func<HashSet<A>, HashSet<B>>>).Pure((HashSet<A> a) => default(ApplHashSet< A, B>).Apply(
                     default(MHashSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<HashSet<B>> applyT< A, B>(Option<HashSet<Func<A, B>>> fab, Option<HashSet<A>> fa) =>
            default(MOption<HashSet<Func<A, B>>>).Bind<MOption<HashSet<B>>, Option<HashSet<B>>, HashSet<B>>(fab, f =>
                default(MOption<HashSet<A>>).Bind<MOption<HashSet<B>>, Option<HashSet<B>>, HashSet<B>>(fa, a => 
                    default(MOption<HashSet<B>>).Pure(default(ApplHashSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Option&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Option&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Option<HashSet<C>> applyT< A, B, C>(Func<A, B, C> fabc, Option<HashSet<A>> fa, Option<HashSet<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class LstT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Option&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Lst&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Option&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Option<Lst<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOption<Lst<A>>, Option<Lst<A>>, MLst<A>, Lst<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Option&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Lst&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Option&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Option<Lst<A>> ma) =>
            default(Trans<MOption<Lst<A>>, Option<Lst<A>>, MLst<A>, Lst<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Option&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Lst<B>> bindT< A, B>(Option<Lst<A>> ma, Func<A, Lst<B>> f) =>
            default(Trans<MOption<Lst<A>>, Option<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MOption<Lst<B>>, Option<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Option&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Option&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Option&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Lst<Option<B>> traverse< A, B>(Option<Lst<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Option&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Option&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Lst<Option<A>> sequence< A>(Option<Lst<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Lst<B>> mapT< A, B>(Option<Lst<A>> ma, Func<A, B> f) =>
            default(Trans<MOption<Lst<A>>, Option<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Map<MOption<Lst<B>>, Option<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Option<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Lst<A>>, Option<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Option<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Lst<A>>, Option<Lst<A>>, MLst<A>, Lst<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Option<Lst<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Lst<A>>, Option<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Option<Lst<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Lst<A>>, Option<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Option&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Option<Lst<A>> ma, Action<A> f) =>
            default(Trans<MOption<Lst<A>>, Option<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Option&lt;Lst&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Option<Lst<A>> filterT< A>(Option<Lst<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOption<Lst<A>>, Option<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MOption<Lst<A>>, Option<Lst<A>>, MLst<A>, Lst<A>, A>(ma, 
                    a => pred(a)
                        ? default(MLst<A>).Pure(a)
                        : default(MLst<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Lst&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Option<Lst<A>> plusT<NUM,  A>(Option<Lst<A>> x, Option<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Lst&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Option<Lst<A>> subtractT<NUM,  A>(Option<Lst<A>> x, Option<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Option<Lst<A>> productT<NUM,  A>(Option<Lst<A>> x, Option<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Option<Lst<A>> divideT<NUM,  A>(Option<Lst<A>> x, Option<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Option<Lst<A>> appendT<SEMI,  A>(Option<Lst<A>> x, Option<Lst<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Option<Lst<A>> x, Option<Lst<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Option<Lst<A>> x, Option<Lst<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Lst<B>> applyT< A, B>(Func<A, B> fab, Option<Lst<A>> fa) =>
            default(ApplOption< Lst<A>, Lst<B>>).Apply(
                 default(MOption< Func<Lst<A>, Lst<B>>>).Pure((Lst<A> a) => default(ApplLst< A, B>).Apply(
                     default(MLst< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Lst<B>> applyT< A, B>(Option<Lst<Func<A, B>>> fab, Option<Lst<A>> fa) =>
            default(MOption<Lst<Func<A, B>>>).Bind<MOption<Lst<B>>, Option<Lst<B>>, Lst<B>>(fab, f =>
                default(MOption<Lst<A>>).Bind<MOption<Lst<B>>, Option<Lst<B>>, Lst<B>>(fa, a => 
                    default(MOption<Lst<B>>).Pure(default(ApplLst< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Lst&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Option&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Option<Lst<C>> applyT< A, B, C>(Func<A, B, C> fabc, Option<Lst<A>> fa, Option<Lst<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class FinT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Option&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Fin&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Option&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Option<Fin<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOption<Fin<A>>, Option<Fin<A>>, MFin<A>, Fin<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Option&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Fin&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Option&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Option<Fin<A>> ma) =>
            default(Trans<MOption<Fin<A>>, Option<Fin<A>>, MFin<A>, Fin<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Option&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Fin<B>> bindT< A, B>(Option<Fin<A>> ma, Func<A, Fin<B>> f) =>
            default(Trans<MOption<Fin<A>>, Option<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MOption<Fin<B>>, Option<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Option&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Option&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Option&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Fin<Option<B>> traverse< A, B>(Option<Fin<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Option&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Option&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Fin<Option<A>> sequence< A>(Option<Fin<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Fin<B>> mapT< A, B>(Option<Fin<A>> ma, Func<A, B> f) =>
            default(Trans<MOption<Fin<A>>, Option<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Map<MOption<Fin<B>>, Option<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Option<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Fin<A>>, Option<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Option<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Fin<A>>, Option<Fin<A>>, MFin<A>, Fin<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Option<Fin<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Fin<A>>, Option<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Option<Fin<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Fin<A>>, Option<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Option&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Option<Fin<A>> ma, Action<A> f) =>
            default(Trans<MOption<Fin<A>>, Option<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Option&lt;Fin&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Option<Fin<A>> filterT< A>(Option<Fin<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOption<Fin<A>>, Option<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MOption<Fin<A>>, Option<Fin<A>>, MFin<A>, Fin<A>, A>(ma, 
                    a => pred(a)
                        ? default(MFin<A>).Pure(a)
                        : default(MFin<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Fin&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Option<Fin<A>> plusT<NUM,  A>(Option<Fin<A>> x, Option<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Fin&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Option<Fin<A>> subtractT<NUM,  A>(Option<Fin<A>> x, Option<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Option<Fin<A>> productT<NUM,  A>(Option<Fin<A>> x, Option<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Option<Fin<A>> divideT<NUM,  A>(Option<Fin<A>> x, Option<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Option<Fin<A>> appendT<SEMI,  A>(Option<Fin<A>> x, Option<Fin<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Option<Fin<A>> x, Option<Fin<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Option<Fin<A>> x, Option<Fin<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Fin<B>> applyT< A, B>(Func<A, B> fab, Option<Fin<A>> fa) =>
            default(ApplOption< Fin<A>, Fin<B>>).Apply(
                 default(MOption< Func<Fin<A>, Fin<B>>>).Pure((Fin<A> a) => default(ApplFin< A, B>).Apply(
                     default(MFin< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Fin<B>> applyT< A, B>(Option<Fin<Func<A, B>>> fab, Option<Fin<A>> fa) =>
            default(MOption<Fin<Func<A, B>>>).Bind<MOption<Fin<B>>, Option<Fin<B>>, Fin<B>>(fab, f =>
                default(MOption<Fin<A>>).Bind<MOption<Fin<B>>, Option<Fin<B>>, Fin<B>>(fa, a => 
                    default(MOption<Fin<B>>).Pure(default(ApplFin< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Fin&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Option&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Option<Fin<C>> applyT< A, B, C>(Func<A, B, C> fabc, Option<Fin<A>> fa, Option<Fin<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Option&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Option&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Option&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Option<Option<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOption<Option<A>>, Option<Option<A>>, MOption<A>, Option<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Option&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Option&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Option&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Option<Option<A>> ma) =>
            default(Trans<MOption<Option<A>>, Option<Option<A>>, MOption<A>, Option<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Option&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Option<B>> bindT< A, B>(Option<Option<A>> ma, Func<A, Option<B>> f) =>
            default(Trans<MOption<Option<A>>, Option<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MOption<Option<B>>, Option<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Option&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Option&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Option&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Option<Option<B>> traverse< A, B>(Option<Option<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Option&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Option&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Option<Option<A>> sequence< A>(Option<Option<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Option<B>> mapT< A, B>(Option<Option<A>> ma, Func<A, B> f) =>
            default(Trans<MOption<Option<A>>, Option<Option<A>>, MOption<A>, Option<A>, A>)
                .Map<MOption<Option<B>>, Option<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Option<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Option<A>>, Option<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Option<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Option<A>>, Option<Option<A>>, MOption<A>, Option<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Option<Option<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Option<A>>, Option<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Option<Option<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Option<A>>, Option<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Option&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Option<Option<A>> ma, Action<A> f) =>
            default(Trans<MOption<Option<A>>, Option<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Option&lt;Option&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Option<Option<A>> filterT< A>(Option<Option<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOption<Option<A>>, Option<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MOption<Option<A>>, Option<Option<A>>, MOption<A>, Option<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOption<A>).Pure(a)
                        : default(MOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Option&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Option<Option<A>> plusT<NUM,  A>(Option<Option<A>> x, Option<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Option&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Option<Option<A>> subtractT<NUM,  A>(Option<Option<A>> x, Option<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Option&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Option<Option<A>> productT<NUM,  A>(Option<Option<A>> x, Option<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Option&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Option<Option<A>> divideT<NUM,  A>(Option<Option<A>> x, Option<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Option&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Option<Option<A>> appendT<SEMI,  A>(Option<Option<A>> x, Option<Option<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Option<Option<A>> x, Option<Option<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Option&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Option<Option<A>> x, Option<Option<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Option<B>> applyT< A, B>(Func<A, B> fab, Option<Option<A>> fa) =>
            default(ApplOption< Option<A>, Option<B>>).Apply(
                 default(MOption< Func<Option<A>, Option<B>>>).Pure((Option<A> a) => default(ApplOption< A, B>).Apply(
                     default(MOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Option<B>> applyT< A, B>(Option<Option<Func<A, B>>> fab, Option<Option<A>> fa) =>
            default(MOption<Option<Func<A, B>>>).Bind<MOption<Option<B>>, Option<Option<B>>, Option<B>>(fab, f =>
                default(MOption<Option<A>>).Bind<MOption<Option<B>>, Option<Option<B>>, Option<B>>(fa, a => 
                    default(MOption<Option<B>>).Pure(default(ApplOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Option&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Option&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Option&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Option<Option<C>> applyT< A, B, C>(Func<A, B, C> fabc, Option<Option<A>> fa, Option<Option<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Option&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Option&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Option<OptionUnsafe<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOption<OptionUnsafe<A>>, Option<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Option&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Option&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Option<OptionUnsafe<A>> ma) =>
            default(Trans<MOption<OptionUnsafe<A>>, Option<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Option&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<OptionUnsafe<B>> bindT< A, B>(Option<OptionUnsafe<A>> ma, Func<A, OptionUnsafe<B>> f) =>
            default(Trans<MOption<OptionUnsafe<A>>, Option<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MOption<OptionUnsafe<B>>, Option<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Option&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Option&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Option&lt;B&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Option<B>> traverse< A, B>(Option<OptionUnsafe<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Option&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Option&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Option<A>> sequence< A>(Option<OptionUnsafe<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<OptionUnsafe<B>> mapT< A, B>(Option<OptionUnsafe<A>> ma, Func<A, B> f) =>
            default(Trans<MOption<OptionUnsafe<A>>, Option<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Map<MOption<OptionUnsafe<B>>, Option<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Option<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<OptionUnsafe<A>>, Option<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Option<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<OptionUnsafe<A>>, Option<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Option<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<OptionUnsafe<A>>, Option<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Option<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<OptionUnsafe<A>>, Option<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Option&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Option<OptionUnsafe<A>> ma, Action<A> f) =>
            default(Trans<MOption<OptionUnsafe<A>>, Option<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Option&lt;OptionUnsafe&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Option<OptionUnsafe<A>> filterT< A>(Option<OptionUnsafe<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOption<OptionUnsafe<A>>, Option<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MOption<OptionUnsafe<A>>, Option<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOptionUnsafe<A>).Pure(a)
                        : default(MOptionUnsafe<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Option<OptionUnsafe<A>> plusT<NUM,  A>(Option<OptionUnsafe<A>> x, Option<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Option<OptionUnsafe<A>> subtractT<NUM,  A>(Option<OptionUnsafe<A>> x, Option<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Option<OptionUnsafe<A>> productT<NUM,  A>(Option<OptionUnsafe<A>> x, Option<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Option<OptionUnsafe<A>> divideT<NUM,  A>(Option<OptionUnsafe<A>> x, Option<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Option<OptionUnsafe<A>> appendT<SEMI,  A>(Option<OptionUnsafe<A>> x, Option<OptionUnsafe<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Option<OptionUnsafe<A>> x, Option<OptionUnsafe<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Option<OptionUnsafe<A>> x, Option<OptionUnsafe<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<OptionUnsafe<B>> applyT< A, B>(Func<A, B> fab, Option<OptionUnsafe<A>> fa) =>
            default(ApplOption< OptionUnsafe<A>, OptionUnsafe<B>>).Apply(
                 default(MOption< Func<OptionUnsafe<A>, OptionUnsafe<B>>>).Pure((OptionUnsafe<A> a) => default(ApplOptionUnsafe< A, B>).Apply(
                     default(MOptionUnsafe< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<OptionUnsafe<B>> applyT< A, B>(Option<OptionUnsafe<Func<A, B>>> fab, Option<OptionUnsafe<A>> fa) =>
            default(MOption<OptionUnsafe<Func<A, B>>>).Bind<MOption<OptionUnsafe<B>>, Option<OptionUnsafe<B>>, OptionUnsafe<B>>(fab, f =>
                default(MOption<OptionUnsafe<A>>).Bind<MOption<OptionUnsafe<B>>, Option<OptionUnsafe<B>>, OptionUnsafe<B>>(fa, a => 
                    default(MOption<OptionUnsafe<B>>).Pure(default(ApplOptionUnsafe< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Option&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Option&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Option<OptionUnsafe<C>> applyT< A, B, C>(Func<A, B, C> fabc, Option<OptionUnsafe<A>> fa, Option<OptionUnsafe<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Option&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Either&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Option&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Option<Either<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOption<Either<L, A>>, Option<Either<L, A>>, MEither<L, A>, Either<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Option&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Either&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Option&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Option<Either<L, A>> ma) =>
            default(Trans<MOption<Either<L, A>>, Option<Either<L, A>>, MEither<L, A>, Either<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Option&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Either<L, B>> bindT<L, A, B>(Option<Either<L, A>> ma, Func<A, Either<L, B>> f) =>
            default(Trans<MOption<Either<L, A>>, Option<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MOption<Either<L, B>>, Option<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Option&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Option&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Option&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Option<B>> traverse<L, A, B>(Option<Either<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Option&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Option&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Option<A>> sequence<L, A>(Option<Either<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Either<L, B>> mapT<L, A, B>(Option<Either<L, A>> ma, Func<A, B> f) =>
            default(Trans<MOption<Either<L, A>>, Option<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Map<MOption<Either<L, B>>, Option<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Option<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Either<L, A>>, Option<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Option<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Either<L, A>>, Option<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Option<Either<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Either<L, A>>, Option<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Option<Either<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Either<L, A>>, Option<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Option&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Option<Either<L, A>> ma, Action<A> f) =>
            default(Trans<MOption<Either<L, A>>, Option<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Option&lt;Either&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Option<Either<L, A>> filterT<L, A>(Option<Either<L, A>> ma, Func<A, bool> pred) =>
            default(Trans<MOption<Either<L, A>>, Option<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MOption<Either<L, A>>, Option<Either<L, A>>, MEither<L, A>, Either<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEither<L, A>).Pure(a)
                        : default(MEither<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Option<Either<L, A>> plusT<NUM, L, A>(Option<Either<L, A>> x, Option<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Option<Either<L, A>> subtractT<NUM, L, A>(Option<Either<L, A>> x, Option<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Option<Either<L, A>> productT<NUM, L, A>(Option<Either<L, A>> x, Option<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Option<Either<L, A>> divideT<NUM, L, A>(Option<Either<L, A>> x, Option<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Option<Either<L, A>> appendT<SEMI, L, A>(Option<Either<L, A>> x, Option<Either<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Option<Either<L, A>> x, Option<Either<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Option<Either<L, A>> x, Option<Either<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Option&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Either<L, B>> applyT<L, A, B>(Func<A, B> fab, Option<Either<L, A>> fa) =>
            default(ApplOption< Either<L, A>, Either<L, B>>).Apply(
                 default(MOption< Func<Either<L, A>, Either<L, B>>>).Pure((Either<L, A> a) => default(ApplEither<L, A, B>).Apply(
                     default(MEither<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Option&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Either<L, B>> applyT<L, A, B>(Option<Either<L, Func<A, B>>> fab, Option<Either<L, A>> fa) =>
            default(MOption<Either<L, Func<A, B>>>).Bind<MOption<Either<L, B>>, Option<Either<L, B>>, Either<L, B>>(fab, f =>
                default(MOption<Either<L, A>>).Bind<MOption<Either<L, B>>, Option<Either<L, B>>, Either<L, B>>(fa, a => 
                    default(MOption<Either<L, B>>).Pure(default(ApplEither<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Option&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Option&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Option<Either<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Option<Either<L, A>> fa, Option<Either<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Option<EitherUnsafe<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOption<EitherUnsafe<L, A>>, Option<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Option<EitherUnsafe<L, A>> ma) =>
            default(Trans<MOption<EitherUnsafe<L, A>>, Option<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Option&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<EitherUnsafe<L, B>> bindT<L, A, B>(Option<EitherUnsafe<L, A>> ma, Func<A, EitherUnsafe<L, B>> f) =>
            default(Trans<MOption<EitherUnsafe<L, A>>, Option<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MOption<EitherUnsafe<L, B>>, Option<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Option&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Option&lt;B&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Option<B>> traverse<L, A, B>(Option<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Option<A>> sequence<L, A>(Option<EitherUnsafe<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<EitherUnsafe<L, B>> mapT<L, A, B>(Option<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            default(Trans<MOption<EitherUnsafe<L, A>>, Option<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Map<MOption<EitherUnsafe<L, B>>, Option<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Option<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<EitherUnsafe<L, A>>, Option<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Option<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<EitherUnsafe<L, A>>, Option<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Option<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<EitherUnsafe<L, A>>, Option<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Option<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<EitherUnsafe<L, A>>, Option<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Option<EitherUnsafe<L, A>> ma, Action<A> f) =>
            default(Trans<MOption<EitherUnsafe<L, A>>, Option<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Option<EitherUnsafe<L, A>> filterT<L, A>(Option<EitherUnsafe<L, A>> ma, Func<A, bool> pred) =>
            default(Trans<MOption<EitherUnsafe<L, A>>, Option<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MOption<EitherUnsafe<L, A>>, Option<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEitherUnsafe<L, A>).Pure(a)
                        : default(MEitherUnsafe<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Option<EitherUnsafe<L, A>> plusT<NUM, L, A>(Option<EitherUnsafe<L, A>> x, Option<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Option<EitherUnsafe<L, A>> subtractT<NUM, L, A>(Option<EitherUnsafe<L, A>> x, Option<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Option<EitherUnsafe<L, A>> productT<NUM, L, A>(Option<EitherUnsafe<L, A>> x, Option<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Option<EitherUnsafe<L, A>> divideT<NUM, L, A>(Option<EitherUnsafe<L, A>> x, Option<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Option<EitherUnsafe<L, A>> appendT<SEMI, L, A>(Option<EitherUnsafe<L, A>> x, Option<EitherUnsafe<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Option<EitherUnsafe<L, A>> x, Option<EitherUnsafe<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Option<EitherUnsafe<L, A>> x, Option<EitherUnsafe<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Option&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<EitherUnsafe<L, B>> applyT<L, A, B>(Func<A, B> fab, Option<EitherUnsafe<L, A>> fa) =>
            default(ApplOption< EitherUnsafe<L, A>, EitherUnsafe<L, B>>).Apply(
                 default(MOption< Func<EitherUnsafe<L, A>, EitherUnsafe<L, B>>>).Pure((EitherUnsafe<L, A> a) => default(ApplEitherUnsafe<L, A, B>).Apply(
                     default(MEitherUnsafe<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Option&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<EitherUnsafe<L, B>> applyT<L, A, B>(Option<EitherUnsafe<L, Func<A, B>>> fab, Option<EitherUnsafe<L, A>> fa) =>
            default(MOption<EitherUnsafe<L, Func<A, B>>>).Bind<MOption<EitherUnsafe<L, B>>, Option<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fab, f =>
                default(MOption<EitherUnsafe<L, A>>).Bind<MOption<EitherUnsafe<L, B>>, Option<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fa, a => 
                    default(MOption<EitherUnsafe<L, B>>).Pure(default(ApplEitherUnsafe<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Option&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Option<EitherUnsafe<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Option<EitherUnsafe<L, A>> fa, Option<EitherUnsafe<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Option&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Try&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Option&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Option<Try<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOption<Try<A>>, Option<Try<A>>, MTry<A>, Try<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Option&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Try&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Option&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Option<Try<A>> ma) =>
            default(Trans<MOption<Try<A>>, Option<Try<A>>, MTry<A>, Try<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Option&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Try<B>> bindT< A, B>(Option<Try<A>> ma, Func<A, Try<B>> f) =>
            default(Trans<MOption<Try<A>>, Option<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MOption<Try<B>>, Option<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Option&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Option&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Option&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Try<Option<B>> traverse< A, B>(Option<Try<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Option&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Option&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Try<Option<A>> sequence< A>(Option<Try<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Try<B>> mapT< A, B>(Option<Try<A>> ma, Func<A, B> f) =>
            default(Trans<MOption<Try<A>>, Option<Try<A>>, MTry<A>, Try<A>, A>)
                .Map<MOption<Try<B>>, Option<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Option<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Try<A>>, Option<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Option<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Try<A>>, Option<Try<A>>, MTry<A>, Try<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Option<Try<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Try<A>>, Option<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Option<Try<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Try<A>>, Option<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Option&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Option<Try<A>> ma, Action<A> f) =>
            default(Trans<MOption<Try<A>>, Option<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Option&lt;Try&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Option<Try<A>> filterT< A>(Option<Try<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOption<Try<A>>, Option<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MOption<Try<A>>, Option<Try<A>>, MTry<A>, Try<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTry<A>).Pure(a)
                        : default(MTry<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Try&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Option<Try<A>> plusT<NUM,  A>(Option<Try<A>> x, Option<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Try&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Option<Try<A>> subtractT<NUM,  A>(Option<Try<A>> x, Option<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Try&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Option<Try<A>> productT<NUM,  A>(Option<Try<A>> x, Option<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Try&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Option<Try<A>> divideT<NUM,  A>(Option<Try<A>> x, Option<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Try&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Option<Try<A>> appendT<SEMI,  A>(Option<Try<A>> x, Option<Try<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Option<Try<A>> x, Option<Try<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Try&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Option<Try<A>> x, Option<Try<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Try<B>> applyT< A, B>(Func<A, B> fab, Option<Try<A>> fa) =>
            default(ApplOption< Try<A>, Try<B>>).Apply(
                 default(MOption< Func<Try<A>, Try<B>>>).Pure((Try<A> a) => default(ApplTry< A, B>).Apply(
                     default(MTry< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Try<B>> applyT< A, B>(Option<Try<Func<A, B>>> fab, Option<Try<A>> fa) =>
            default(MOption<Try<Func<A, B>>>).Bind<MOption<Try<B>>, Option<Try<B>>, Try<B>>(fab, f =>
                default(MOption<Try<A>>).Bind<MOption<Try<B>>, Option<Try<B>>, Try<B>>(fa, a => 
                    default(MOption<Try<B>>).Pure(default(ApplTry< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Try&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Option&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Try&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Option<Try<C>> applyT< A, B, C>(Func<A, B, C> fabc, Option<Try<A>> fa, Option<Try<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryOptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Option&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;TryOption&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Option&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Option<TryOption<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOption<TryOption<A>>, Option<TryOption<A>>, MTryOption<A>, TryOption<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Option&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;TryOption&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Option&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Option<TryOption<A>> ma) =>
            default(Trans<MOption<TryOption<A>>, Option<TryOption<A>>, MTryOption<A>, TryOption<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Option&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<TryOption<B>> bindT< A, B>(Option<TryOption<A>> ma, Func<A, TryOption<B>> f) =>
            default(Trans<MOption<TryOption<A>>, Option<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MOption<TryOption<B>>, Option<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Option&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Option&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Option&lt;B&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Option<B>> traverse< A, B>(Option<TryOption<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Option&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Option&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Option<A>> sequence< A>(Option<TryOption<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<TryOption<B>> mapT< A, B>(Option<TryOption<A>> ma, Func<A, B> f) =>
            default(Trans<MOption<TryOption<A>>, Option<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Map<MOption<TryOption<B>>, Option<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Option<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<TryOption<A>>, Option<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Option<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<TryOption<A>>, Option<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Option<TryOption<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<TryOption<A>>, Option<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Option<TryOption<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<TryOption<A>>, Option<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Option&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Option<TryOption<A>> ma, Action<A> f) =>
            default(Trans<MOption<TryOption<A>>, Option<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Option&lt;TryOption&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Option<TryOption<A>> filterT< A>(Option<TryOption<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOption<TryOption<A>>, Option<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MOption<TryOption<A>>, Option<TryOption<A>>, MTryOption<A>, TryOption<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTryOption<A>).Pure(a)
                        : default(MTryOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Option<TryOption<A>> plusT<NUM,  A>(Option<TryOption<A>> x, Option<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Option<TryOption<A>> subtractT<NUM,  A>(Option<TryOption<A>> x, Option<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Option<TryOption<A>> productT<NUM,  A>(Option<TryOption<A>> x, Option<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Option<TryOption<A>> divideT<NUM,  A>(Option<TryOption<A>> x, Option<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Option<TryOption<A>> appendT<SEMI,  A>(Option<TryOption<A>> x, Option<TryOption<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Option<TryOption<A>> x, Option<TryOption<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Option<TryOption<A>> x, Option<TryOption<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<TryOption<B>> applyT< A, B>(Func<A, B> fab, Option<TryOption<A>> fa) =>
            default(ApplOption< TryOption<A>, TryOption<B>>).Apply(
                 default(MOption< Func<TryOption<A>, TryOption<B>>>).Pure((TryOption<A> a) => default(ApplTryOption< A, B>).Apply(
                     default(MTryOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<TryOption<B>> applyT< A, B>(Option<TryOption<Func<A, B>>> fab, Option<TryOption<A>> fa) =>
            default(MOption<TryOption<Func<A, B>>>).Bind<MOption<TryOption<B>>, Option<TryOption<B>>, TryOption<B>>(fab, f =>
                default(MOption<TryOption<A>>).Bind<MOption<TryOption<B>>, Option<TryOption<B>>, TryOption<B>>(fa, a => 
                    default(MOption<TryOption<B>>).Pure(default(ApplTryOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Option&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Option&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Option<TryOption<C>> applyT< A, B, C>(Func<A, B, C> fabc, Option<TryOption<A>> fa, Option<TryOption<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class IEnumerableT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Option&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;IEnumerable&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Option&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Option<IEnumerable<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOption<IEnumerable<A>>, Option<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Option&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;IEnumerable&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Option&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Option<IEnumerable<A>> ma) =>
            default(Trans<MOption<IEnumerable<A>>, Option<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Option&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<IEnumerable<B>> bindT< A, B>(Option<IEnumerable<A>> ma, Func<A, IEnumerable<B>> f) =>
            default(Trans<MOption<IEnumerable<A>>, Option<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MOption<IEnumerable<B>>, Option<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Option&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Option&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Option&lt;B&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Option<B>> traverse< A, B>(Option<IEnumerable<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Option&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Option&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Option<A>> sequence< A>(Option<IEnumerable<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<IEnumerable<B>> mapT< A, B>(Option<IEnumerable<A>> ma, Func<A, B> f) =>
            default(Trans<MOption<IEnumerable<A>>, Option<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Map<MOption<IEnumerable<B>>, Option<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Option<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<IEnumerable<A>>, Option<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Option<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<IEnumerable<A>>, Option<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Option<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<IEnumerable<A>>, Option<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Option<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<IEnumerable<A>>, Option<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Option&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Option<IEnumerable<A>> ma, Action<A> f) =>
            default(Trans<MOption<IEnumerable<A>>, Option<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Option&lt;IEnumerable&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Option<IEnumerable<A>> filterT< A>(Option<IEnumerable<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOption<IEnumerable<A>>, Option<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MOption<IEnumerable<A>>, Option<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>(ma, 
                    a => pred(a)
                        ? default(MEnumerable<A>).Pure(a)
                        : default(MEnumerable<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Option<IEnumerable<A>> plusT<NUM,  A>(Option<IEnumerable<A>> x, Option<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Option<IEnumerable<A>> subtractT<NUM,  A>(Option<IEnumerable<A>> x, Option<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Option<IEnumerable<A>> productT<NUM,  A>(Option<IEnumerable<A>> x, Option<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Option<IEnumerable<A>> divideT<NUM,  A>(Option<IEnumerable<A>> x, Option<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Option<IEnumerable<A>> appendT<SEMI,  A>(Option<IEnumerable<A>> x, Option<IEnumerable<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Option<IEnumerable<A>> x, Option<IEnumerable<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Option<IEnumerable<A>> x, Option<IEnumerable<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<IEnumerable<B>> applyT< A, B>(Func<A, B> fab, Option<IEnumerable<A>> fa) =>
            default(ApplOption< IEnumerable<A>, IEnumerable<B>>).Apply(
                 default(MOption< Func<IEnumerable<A>, IEnumerable<B>>>).Pure((IEnumerable<A> a) => default(ApplEnumerable< A, B>).Apply(
                     default(MEnumerable< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<IEnumerable<B>> applyT< A, B>(Option<IEnumerable<Func<A, B>>> fab, Option<IEnumerable<A>> fa) =>
            default(MOption<IEnumerable<Func<A, B>>>).Bind<MOption<IEnumerable<B>>, Option<IEnumerable<B>>, IEnumerable<B>>(fab, f =>
                default(MOption<IEnumerable<A>>).Bind<MOption<IEnumerable<B>>, Option<IEnumerable<B>>, IEnumerable<B>>(fa, a => 
                    default(MOption<IEnumerable<B>>).Pure(default(ApplEnumerable< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Option&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Option&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Option<IEnumerable<C>> applyT< A, B, C>(Func<A, B, C> fabc, Option<IEnumerable<A>> fa, Option<IEnumerable<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SeqT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Option&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Seq&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Option&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Option<Seq<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOption<Seq<A>>, Option<Seq<A>>, MSeq<A>, Seq<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Option&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Seq&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Option&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Option<Seq<A>> ma) =>
            default(Trans<MOption<Seq<A>>, Option<Seq<A>>, MSeq<A>, Seq<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Option&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Seq<B>> bindT< A, B>(Option<Seq<A>> ma, Func<A, Seq<B>> f) =>
            default(Trans<MOption<Seq<A>>, Option<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MOption<Seq<B>>, Option<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Option&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Option&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Option&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Seq<Option<B>> traverse< A, B>(Option<Seq<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Option&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Option&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Seq<Option<A>> sequence< A>(Option<Seq<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Seq<B>> mapT< A, B>(Option<Seq<A>> ma, Func<A, B> f) =>
            default(Trans<MOption<Seq<A>>, Option<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Map<MOption<Seq<B>>, Option<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Option<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Seq<A>>, Option<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Option<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Seq<A>>, Option<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Option<Seq<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Seq<A>>, Option<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Option<Seq<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Seq<A>>, Option<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Option&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Option<Seq<A>> ma, Action<A> f) =>
            default(Trans<MOption<Seq<A>>, Option<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Option&lt;Seq&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Option<Seq<A>> filterT< A>(Option<Seq<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOption<Seq<A>>, Option<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MOption<Seq<A>>, Option<Seq<A>>, MSeq<A>, Seq<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSeq<A>).Pure(a)
                        : default(MSeq<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Seq&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Option<Seq<A>> plusT<NUM,  A>(Option<Seq<A>> x, Option<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Seq&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Option<Seq<A>> subtractT<NUM,  A>(Option<Seq<A>> x, Option<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Option<Seq<A>> productT<NUM,  A>(Option<Seq<A>> x, Option<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Option<Seq<A>> divideT<NUM,  A>(Option<Seq<A>> x, Option<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Option<Seq<A>> appendT<SEMI,  A>(Option<Seq<A>> x, Option<Seq<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Option<Seq<A>> x, Option<Seq<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Option<Seq<A>> x, Option<Seq<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Seq<B>> applyT< A, B>(Func<A, B> fab, Option<Seq<A>> fa) =>
            default(ApplOption< Seq<A>, Seq<B>>).Apply(
                 default(MOption< Func<Seq<A>, Seq<B>>>).Pure((Seq<A> a) => default(ApplSeq< A, B>).Apply(
                     default(MSeq< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Seq<B>> applyT< A, B>(Option<Seq<Func<A, B>>> fab, Option<Seq<A>> fa) =>
            default(MOption<Seq<Func<A, B>>>).Bind<MOption<Seq<B>>, Option<Seq<B>>, Seq<B>>(fab, f =>
                default(MOption<Seq<A>>).Bind<MOption<Seq<B>>, Option<Seq<B>>, Seq<B>>(fa, a => 
                    default(MOption<Seq<B>>).Pure(default(ApplSeq< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Seq&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Option&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Option<Seq<C>> applyT< A, B, C>(Func<A, B, C> fabc, Option<Seq<A>> fa, Option<Seq<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Option&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Set&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Option&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Option<Set<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOption<Set<A>>, Option<Set<A>>, MSet<A>, Set<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Option&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Set&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Option&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Option<Set<A>> ma) =>
            default(Trans<MOption<Set<A>>, Option<Set<A>>, MSet<A>, Set<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Option&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Set<B>> bindT< A, B>(Option<Set<A>> ma, Func<A, Set<B>> f) =>
            default(Trans<MOption<Set<A>>, Option<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MOption<Set<B>>, Option<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Option&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Option&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Option&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Set<Option<B>> traverse< A, B>(Option<Set<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Option&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Option&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Set<Option<A>> sequence< A>(Option<Set<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Set<B>> mapT< A, B>(Option<Set<A>> ma, Func<A, B> f) =>
            default(Trans<MOption<Set<A>>, Option<Set<A>>, MSet<A>, Set<A>, A>)
                .Map<MOption<Set<B>>, Option<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Option<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Set<A>>, Option<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Option<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Set<A>>, Option<Set<A>>, MSet<A>, Set<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Option<Set<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Set<A>>, Option<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Option<Set<A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Set<A>>, Option<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Option&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Option<Set<A>> ma, Action<A> f) =>
            default(Trans<MOption<Set<A>>, Option<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Option&lt;Set&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Option<Set<A>> filterT< A>(Option<Set<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOption<Set<A>>, Option<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MOption<Set<A>>, Option<Set<A>>, MSet<A>, Set<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSet<A>).Pure(a)
                        : default(MSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Set&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Option<Set<A>> plusT<NUM,  A>(Option<Set<A>> x, Option<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Set&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Option<Set<A>> subtractT<NUM,  A>(Option<Set<A>> x, Option<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Set&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Option<Set<A>> productT<NUM,  A>(Option<Set<A>> x, Option<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Set&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Option<Set<A>> divideT<NUM,  A>(Option<Set<A>> x, Option<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Set&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Option<Set<A>> appendT<SEMI,  A>(Option<Set<A>> x, Option<Set<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Option<Set<A>> x, Option<Set<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Set&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Option<Set<A>> x, Option<Set<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Set<B>> applyT< A, B>(Func<A, B> fab, Option<Set<A>> fa) =>
            default(ApplOption< Set<A>, Set<B>>).Apply(
                 default(MOption< Func<Set<A>, Set<B>>>).Pure((Set<A> a) => default(ApplSet< A, B>).Apply(
                     default(MSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Set<B>> applyT< A, B>(Option<Set<Func<A, B>>> fab, Option<Set<A>> fa) =>
            default(MOption<Set<Func<A, B>>>).Bind<MOption<Set<B>>, Option<Set<B>>, Set<B>>(fab, f =>
                default(MOption<Set<A>>).Bind<MOption<Set<B>>, Option<Set<B>>, Set<B>>(fa, a => 
                    default(MOption<Set<B>>).Pure(default(ApplSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Set&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Option&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Option&lt;Set&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Option<Set<C>> applyT< A, B, C>(Func<A, B, C> fabc, Option<Set<A>> fa, Option<Set<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ValidationT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Option&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Option&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Option<Validation<FAIL, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOption<Validation<FAIL, A>>, Option<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Option&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Option&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Option<Validation<FAIL, A>> ma) =>
            default(Trans<MOption<Validation<FAIL, A>>, Option<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Option&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Validation<FAIL, B>> bindT<FAIL, A, B>(Option<Validation<FAIL, A>> ma, Func<A, Validation<FAIL, B>> f) =>
            default(Trans<MOption<Validation<FAIL, A>>, Option<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MOption<Validation<FAIL, B>>, Option<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Option&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Option&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Option&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Option<B>> traverse<FAIL, A, B>(Option<Validation<FAIL, A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Option&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Option&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Option<A>> sequence<FAIL, A>(Option<Validation<FAIL, A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Option<Validation<FAIL, B>> mapT<FAIL, A, B>(Option<Validation<FAIL, A>> ma, Func<A, B> f) =>
            default(Trans<MOption<Validation<FAIL, A>>, Option<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Map<MOption<Validation<FAIL, B>>, Option<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Option<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Validation<FAIL, A>>, Option<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Option&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Option<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOption<Validation<FAIL, A>>, Option<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Option<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Validation<FAIL, A>>, Option<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Option<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(Trans<MOption<Validation<FAIL, A>>, Option<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Option&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Option<Validation<FAIL, A>> ma, Action<A> f) =>
            default(Trans<MOption<Validation<FAIL, A>>, Option<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Option&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Option&lt;Validation&lt;FAIL, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Option<Validation<FAIL, A>> filterT<FAIL, A>(Option<Validation<FAIL, A>> ma, Func<A, bool> pred) =>
            default(Trans<MOption<Validation<FAIL, A>>, Option<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MOption<Validation<FAIL, A>>, Option<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>(ma, 
                    a => pred(a)
                        ? default(MValidation<FAIL, A>).Pure(a)
                        : default(MValidation<FAIL, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Option<Validation<FAIL, A>> plusT<NUM, FAIL, A>(Option<Validation<FAIL, A>> x, Option<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Option<Validation<FAIL, A>> subtractT<NUM, FAIL, A>(Option<Validation<FAIL, A>> x, Option<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Option<Validation<FAIL, A>> productT<NUM, FAIL, A>(Option<Validation<FAIL, A>> x, Option<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Option<Validation<FAIL, A>> divideT<NUM, FAIL, A>(Option<Validation<FAIL, A>> x, Option<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Option<Validation<FAIL, A>> appendT<SEMI, FAIL, A>(Option<Validation<FAIL, A>> x, Option<Validation<FAIL, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Option<Validation<FAIL, A>> x, Option<Validation<FAIL, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Option&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Option<Validation<FAIL, A>> x, Option<Validation<FAIL, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Option&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Validation<FAIL, B>> applyT<FAIL, A, B>(Func<A, B> fab, Option<Validation<FAIL, A>> fa) =>
            default(ApplOption< Validation<FAIL, A>, Validation<FAIL, B>>).Apply(
                 default(MOption< Func<Validation<FAIL, A>, Validation<FAIL, B>>>).Pure((Validation<FAIL, A> a) => default(ApplValidation<FAIL, A, B>).Apply(
                     default(MValidation<FAIL, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Option&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Option<Validation<FAIL, B>> applyT<FAIL, A, B>(Option<Validation<FAIL, Func<A, B>>> fab, Option<Validation<FAIL, A>> fa) =>
            default(MOption<Validation<FAIL, Func<A, B>>>).Bind<MOption<Validation<FAIL, B>>, Option<Validation<FAIL, B>>, Validation<FAIL, B>>(fab, f =>
                default(MOption<Validation<FAIL, A>>).Bind<MOption<Validation<FAIL, B>>, Option<Validation<FAIL, B>>, Validation<FAIL, B>>(fa, a => 
                    default(MOption<Validation<FAIL, B>>).Pure(default(ApplValidation<FAIL, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Option&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Option&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Option&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Option<Validation<FAIL, C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Option<Validation<FAIL, A>> fa, Option<Validation<FAIL, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ArrT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `OptionUnsafe&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Arr&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `OptionUnsafe&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(OptionUnsafe<Arr<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOptionUnsafe<Arr<A>>, OptionUnsafe<Arr<A>>, MArr<A>, Arr<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `OptionUnsafe&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Arr&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `OptionUnsafe&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(OptionUnsafe<Arr<A>> ma) =>
            default(Trans<MOptionUnsafe<Arr<A>>, OptionUnsafe<Arr<A>>, MArr<A>, Arr<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`OptionUnsafe&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Arr<B>> bindT< A, B>(OptionUnsafe<Arr<A>> ma, Func<A, Arr<B>> f) =>
            default(Trans<MOptionUnsafe<Arr<A>>, OptionUnsafe<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MOptionUnsafe<Arr<B>>, OptionUnsafe<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `OptionUnsafe&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;OptionUnsafe&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Arr<OptionUnsafe<B>> traverse< A, B>(OptionUnsafe<Arr<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `OptionUnsafe&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;OptionUnsafe&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Arr<OptionUnsafe<A>> sequence< A>(OptionUnsafe<Arr<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Arr<B>> mapT< A, B>(OptionUnsafe<Arr<A>> ma, Func<A, B> f) =>
            default(Trans<MOptionUnsafe<Arr<A>>, OptionUnsafe<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Map<MOptionUnsafe<Arr<B>>, OptionUnsafe<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(OptionUnsafe<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Arr<A>>, OptionUnsafe<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(OptionUnsafe<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Arr<A>>, OptionUnsafe<Arr<A>>, MArr<A>, Arr<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(OptionUnsafe<Arr<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Arr<A>>, OptionUnsafe<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(OptionUnsafe<Arr<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Arr<A>>, OptionUnsafe<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `OptionUnsafe&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(OptionUnsafe<Arr<A>> ma, Action<A> f) =>
            default(Trans<MOptionUnsafe<Arr<A>>, OptionUnsafe<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`OptionUnsafe&lt;Arr&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static OptionUnsafe<Arr<A>> filterT< A>(OptionUnsafe<Arr<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOptionUnsafe<Arr<A>>, OptionUnsafe<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MOptionUnsafe<Arr<A>>, OptionUnsafe<Arr<A>>, MArr<A>, Arr<A>, A>(ma, 
                    a => pred(a)
                        ? default(MArr<A>).Pure(a)
                        : default(MArr<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Arr&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static OptionUnsafe<Arr<A>> plusT<NUM,  A>(OptionUnsafe<Arr<A>> x, OptionUnsafe<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Arr&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static OptionUnsafe<Arr<A>> subtractT<NUM,  A>(OptionUnsafe<Arr<A>> x, OptionUnsafe<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static OptionUnsafe<Arr<A>> productT<NUM,  A>(OptionUnsafe<Arr<A>> x, OptionUnsafe<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static OptionUnsafe<Arr<A>> divideT<NUM,  A>(OptionUnsafe<Arr<A>> x, OptionUnsafe<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static OptionUnsafe<Arr<A>> appendT<SEMI,  A>(OptionUnsafe<Arr<A>> x, OptionUnsafe<Arr<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(OptionUnsafe<Arr<A>> x, OptionUnsafe<Arr<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(OptionUnsafe<Arr<A>> x, OptionUnsafe<Arr<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Arr<B>> applyT< A, B>(Func<A, B> fab, OptionUnsafe<Arr<A>> fa) =>
            default(ApplOptionUnsafe< Arr<A>, Arr<B>>).Apply(
                 default(MOptionUnsafe< Func<Arr<A>, Arr<B>>>).Pure((Arr<A> a) => default(ApplArr< A, B>).Apply(
                     default(MArr< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Arr<B>> applyT< A, B>(OptionUnsafe<Arr<Func<A, B>>> fab, OptionUnsafe<Arr<A>> fa) =>
            default(MOptionUnsafe<Arr<Func<A, B>>>).Bind<MOptionUnsafe<Arr<B>>, OptionUnsafe<Arr<B>>, Arr<B>>(fab, f =>
                default(MOptionUnsafe<Arr<A>>).Bind<MOptionUnsafe<Arr<B>>, OptionUnsafe<Arr<B>>, Arr<B>>(fa, a => 
                    default(MOptionUnsafe<Arr<B>>).Pure(default(ApplArr< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Arr&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `OptionUnsafe&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static OptionUnsafe<Arr<C>> applyT< A, B, C>(Func<A, B, C> fabc, OptionUnsafe<Arr<A>> fa, OptionUnsafe<Arr<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class HashSetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(OptionUnsafe<HashSet<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOptionUnsafe<HashSet<A>>, OptionUnsafe<HashSet<A>>, MHashSet<A>, HashSet<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(OptionUnsafe<HashSet<A>> ma) =>
            default(Trans<MOptionUnsafe<HashSet<A>>, OptionUnsafe<HashSet<A>>, MHashSet<A>, HashSet<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`OptionUnsafe&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<HashSet<B>> bindT< A, B>(OptionUnsafe<HashSet<A>> ma, Func<A, HashSet<B>> f) =>
            default(Trans<MOptionUnsafe<HashSet<A>>, OptionUnsafe<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MOptionUnsafe<HashSet<B>>, OptionUnsafe<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;OptionUnsafe&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>
        [Pure]
        public static HashSet<OptionUnsafe<B>> traverse< A, B>(OptionUnsafe<HashSet<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static HashSet<OptionUnsafe<A>> sequence< A>(OptionUnsafe<HashSet<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<HashSet<B>> mapT< A, B>(OptionUnsafe<HashSet<A>> ma, Func<A, B> f) =>
            default(Trans<MOptionUnsafe<HashSet<A>>, OptionUnsafe<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Map<MOptionUnsafe<HashSet<B>>, OptionUnsafe<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(OptionUnsafe<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<HashSet<A>>, OptionUnsafe<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(OptionUnsafe<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<HashSet<A>>, OptionUnsafe<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(OptionUnsafe<HashSet<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<HashSet<A>>, OptionUnsafe<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(OptionUnsafe<HashSet<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<HashSet<A>>, OptionUnsafe<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(OptionUnsafe<HashSet<A>> ma, Action<A> f) =>
            default(Trans<MOptionUnsafe<HashSet<A>>, OptionUnsafe<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static OptionUnsafe<HashSet<A>> filterT< A>(OptionUnsafe<HashSet<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOptionUnsafe<HashSet<A>>, OptionUnsafe<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MOptionUnsafe<HashSet<A>>, OptionUnsafe<HashSet<A>>, MHashSet<A>, HashSet<A>, A>(ma, 
                    a => pred(a)
                        ? default(MHashSet<A>).Pure(a)
                        : default(MHashSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static OptionUnsafe<HashSet<A>> plusT<NUM,  A>(OptionUnsafe<HashSet<A>> x, OptionUnsafe<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static OptionUnsafe<HashSet<A>> subtractT<NUM,  A>(OptionUnsafe<HashSet<A>> x, OptionUnsafe<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static OptionUnsafe<HashSet<A>> productT<NUM,  A>(OptionUnsafe<HashSet<A>> x, OptionUnsafe<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static OptionUnsafe<HashSet<A>> divideT<NUM,  A>(OptionUnsafe<HashSet<A>> x, OptionUnsafe<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static OptionUnsafe<HashSet<A>> appendT<SEMI,  A>(OptionUnsafe<HashSet<A>> x, OptionUnsafe<HashSet<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(OptionUnsafe<HashSet<A>> x, OptionUnsafe<HashSet<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(OptionUnsafe<HashSet<A>> x, OptionUnsafe<HashSet<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<HashSet<B>> applyT< A, B>(Func<A, B> fab, OptionUnsafe<HashSet<A>> fa) =>
            default(ApplOptionUnsafe< HashSet<A>, HashSet<B>>).Apply(
                 default(MOptionUnsafe< Func<HashSet<A>, HashSet<B>>>).Pure((HashSet<A> a) => default(ApplHashSet< A, B>).Apply(
                     default(MHashSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<HashSet<B>> applyT< A, B>(OptionUnsafe<HashSet<Func<A, B>>> fab, OptionUnsafe<HashSet<A>> fa) =>
            default(MOptionUnsafe<HashSet<Func<A, B>>>).Bind<MOptionUnsafe<HashSet<B>>, OptionUnsafe<HashSet<B>>, HashSet<B>>(fab, f =>
                default(MOptionUnsafe<HashSet<A>>).Bind<MOptionUnsafe<HashSet<B>>, OptionUnsafe<HashSet<B>>, HashSet<B>>(fa, a => 
                    default(MOptionUnsafe<HashSet<B>>).Pure(default(ApplHashSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `OptionUnsafe&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static OptionUnsafe<HashSet<C>> applyT< A, B, C>(Func<A, B, C> fabc, OptionUnsafe<HashSet<A>> fa, OptionUnsafe<HashSet<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class LstT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `OptionUnsafe&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Lst&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `OptionUnsafe&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(OptionUnsafe<Lst<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOptionUnsafe<Lst<A>>, OptionUnsafe<Lst<A>>, MLst<A>, Lst<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `OptionUnsafe&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Lst&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `OptionUnsafe&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(OptionUnsafe<Lst<A>> ma) =>
            default(Trans<MOptionUnsafe<Lst<A>>, OptionUnsafe<Lst<A>>, MLst<A>, Lst<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`OptionUnsafe&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Lst<B>> bindT< A, B>(OptionUnsafe<Lst<A>> ma, Func<A, Lst<B>> f) =>
            default(Trans<MOptionUnsafe<Lst<A>>, OptionUnsafe<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MOptionUnsafe<Lst<B>>, OptionUnsafe<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `OptionUnsafe&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;OptionUnsafe&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Lst<OptionUnsafe<B>> traverse< A, B>(OptionUnsafe<Lst<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `OptionUnsafe&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;OptionUnsafe&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Lst<OptionUnsafe<A>> sequence< A>(OptionUnsafe<Lst<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Lst<B>> mapT< A, B>(OptionUnsafe<Lst<A>> ma, Func<A, B> f) =>
            default(Trans<MOptionUnsafe<Lst<A>>, OptionUnsafe<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Map<MOptionUnsafe<Lst<B>>, OptionUnsafe<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(OptionUnsafe<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Lst<A>>, OptionUnsafe<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(OptionUnsafe<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Lst<A>>, OptionUnsafe<Lst<A>>, MLst<A>, Lst<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(OptionUnsafe<Lst<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Lst<A>>, OptionUnsafe<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(OptionUnsafe<Lst<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Lst<A>>, OptionUnsafe<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `OptionUnsafe&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(OptionUnsafe<Lst<A>> ma, Action<A> f) =>
            default(Trans<MOptionUnsafe<Lst<A>>, OptionUnsafe<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`OptionUnsafe&lt;Lst&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static OptionUnsafe<Lst<A>> filterT< A>(OptionUnsafe<Lst<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOptionUnsafe<Lst<A>>, OptionUnsafe<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MOptionUnsafe<Lst<A>>, OptionUnsafe<Lst<A>>, MLst<A>, Lst<A>, A>(ma, 
                    a => pred(a)
                        ? default(MLst<A>).Pure(a)
                        : default(MLst<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Lst&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static OptionUnsafe<Lst<A>> plusT<NUM,  A>(OptionUnsafe<Lst<A>> x, OptionUnsafe<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Lst&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static OptionUnsafe<Lst<A>> subtractT<NUM,  A>(OptionUnsafe<Lst<A>> x, OptionUnsafe<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static OptionUnsafe<Lst<A>> productT<NUM,  A>(OptionUnsafe<Lst<A>> x, OptionUnsafe<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static OptionUnsafe<Lst<A>> divideT<NUM,  A>(OptionUnsafe<Lst<A>> x, OptionUnsafe<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static OptionUnsafe<Lst<A>> appendT<SEMI,  A>(OptionUnsafe<Lst<A>> x, OptionUnsafe<Lst<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(OptionUnsafe<Lst<A>> x, OptionUnsafe<Lst<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(OptionUnsafe<Lst<A>> x, OptionUnsafe<Lst<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Lst<B>> applyT< A, B>(Func<A, B> fab, OptionUnsafe<Lst<A>> fa) =>
            default(ApplOptionUnsafe< Lst<A>, Lst<B>>).Apply(
                 default(MOptionUnsafe< Func<Lst<A>, Lst<B>>>).Pure((Lst<A> a) => default(ApplLst< A, B>).Apply(
                     default(MLst< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Lst<B>> applyT< A, B>(OptionUnsafe<Lst<Func<A, B>>> fab, OptionUnsafe<Lst<A>> fa) =>
            default(MOptionUnsafe<Lst<Func<A, B>>>).Bind<MOptionUnsafe<Lst<B>>, OptionUnsafe<Lst<B>>, Lst<B>>(fab, f =>
                default(MOptionUnsafe<Lst<A>>).Bind<MOptionUnsafe<Lst<B>>, OptionUnsafe<Lst<B>>, Lst<B>>(fa, a => 
                    default(MOptionUnsafe<Lst<B>>).Pure(default(ApplLst< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Lst&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `OptionUnsafe&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static OptionUnsafe<Lst<C>> applyT< A, B, C>(Func<A, B, C> fabc, OptionUnsafe<Lst<A>> fa, OptionUnsafe<Lst<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class FinT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `OptionUnsafe&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Fin&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `OptionUnsafe&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(OptionUnsafe<Fin<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOptionUnsafe<Fin<A>>, OptionUnsafe<Fin<A>>, MFin<A>, Fin<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `OptionUnsafe&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Fin&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `OptionUnsafe&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(OptionUnsafe<Fin<A>> ma) =>
            default(Trans<MOptionUnsafe<Fin<A>>, OptionUnsafe<Fin<A>>, MFin<A>, Fin<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`OptionUnsafe&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Fin<B>> bindT< A, B>(OptionUnsafe<Fin<A>> ma, Func<A, Fin<B>> f) =>
            default(Trans<MOptionUnsafe<Fin<A>>, OptionUnsafe<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MOptionUnsafe<Fin<B>>, OptionUnsafe<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `OptionUnsafe&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;OptionUnsafe&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Fin<OptionUnsafe<B>> traverse< A, B>(OptionUnsafe<Fin<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `OptionUnsafe&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;OptionUnsafe&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Fin<OptionUnsafe<A>> sequence< A>(OptionUnsafe<Fin<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Fin<B>> mapT< A, B>(OptionUnsafe<Fin<A>> ma, Func<A, B> f) =>
            default(Trans<MOptionUnsafe<Fin<A>>, OptionUnsafe<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Map<MOptionUnsafe<Fin<B>>, OptionUnsafe<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(OptionUnsafe<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Fin<A>>, OptionUnsafe<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(OptionUnsafe<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Fin<A>>, OptionUnsafe<Fin<A>>, MFin<A>, Fin<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(OptionUnsafe<Fin<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Fin<A>>, OptionUnsafe<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(OptionUnsafe<Fin<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Fin<A>>, OptionUnsafe<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `OptionUnsafe&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(OptionUnsafe<Fin<A>> ma, Action<A> f) =>
            default(Trans<MOptionUnsafe<Fin<A>>, OptionUnsafe<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`OptionUnsafe&lt;Fin&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static OptionUnsafe<Fin<A>> filterT< A>(OptionUnsafe<Fin<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOptionUnsafe<Fin<A>>, OptionUnsafe<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MOptionUnsafe<Fin<A>>, OptionUnsafe<Fin<A>>, MFin<A>, Fin<A>, A>(ma, 
                    a => pred(a)
                        ? default(MFin<A>).Pure(a)
                        : default(MFin<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Fin&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static OptionUnsafe<Fin<A>> plusT<NUM,  A>(OptionUnsafe<Fin<A>> x, OptionUnsafe<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Fin&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static OptionUnsafe<Fin<A>> subtractT<NUM,  A>(OptionUnsafe<Fin<A>> x, OptionUnsafe<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static OptionUnsafe<Fin<A>> productT<NUM,  A>(OptionUnsafe<Fin<A>> x, OptionUnsafe<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static OptionUnsafe<Fin<A>> divideT<NUM,  A>(OptionUnsafe<Fin<A>> x, OptionUnsafe<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static OptionUnsafe<Fin<A>> appendT<SEMI,  A>(OptionUnsafe<Fin<A>> x, OptionUnsafe<Fin<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(OptionUnsafe<Fin<A>> x, OptionUnsafe<Fin<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(OptionUnsafe<Fin<A>> x, OptionUnsafe<Fin<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Fin<B>> applyT< A, B>(Func<A, B> fab, OptionUnsafe<Fin<A>> fa) =>
            default(ApplOptionUnsafe< Fin<A>, Fin<B>>).Apply(
                 default(MOptionUnsafe< Func<Fin<A>, Fin<B>>>).Pure((Fin<A> a) => default(ApplFin< A, B>).Apply(
                     default(MFin< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Fin<B>> applyT< A, B>(OptionUnsafe<Fin<Func<A, B>>> fab, OptionUnsafe<Fin<A>> fa) =>
            default(MOptionUnsafe<Fin<Func<A, B>>>).Bind<MOptionUnsafe<Fin<B>>, OptionUnsafe<Fin<B>>, Fin<B>>(fab, f =>
                default(MOptionUnsafe<Fin<A>>).Bind<MOptionUnsafe<Fin<B>>, OptionUnsafe<Fin<B>>, Fin<B>>(fa, a => 
                    default(MOptionUnsafe<Fin<B>>).Pure(default(ApplFin< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Fin&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `OptionUnsafe&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static OptionUnsafe<Fin<C>> applyT< A, B, C>(Func<A, B, C> fabc, OptionUnsafe<Fin<A>> fa, OptionUnsafe<Fin<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `OptionUnsafe&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Option&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `OptionUnsafe&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(OptionUnsafe<Option<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOptionUnsafe<Option<A>>, OptionUnsafe<Option<A>>, MOption<A>, Option<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `OptionUnsafe&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Option&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `OptionUnsafe&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(OptionUnsafe<Option<A>> ma) =>
            default(Trans<MOptionUnsafe<Option<A>>, OptionUnsafe<Option<A>>, MOption<A>, Option<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`OptionUnsafe&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Option<B>> bindT< A, B>(OptionUnsafe<Option<A>> ma, Func<A, Option<B>> f) =>
            default(Trans<MOptionUnsafe<Option<A>>, OptionUnsafe<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MOptionUnsafe<Option<B>>, OptionUnsafe<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `OptionUnsafe&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;OptionUnsafe&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Option<OptionUnsafe<B>> traverse< A, B>(OptionUnsafe<Option<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `OptionUnsafe&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;OptionUnsafe&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Option<OptionUnsafe<A>> sequence< A>(OptionUnsafe<Option<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Option<B>> mapT< A, B>(OptionUnsafe<Option<A>> ma, Func<A, B> f) =>
            default(Trans<MOptionUnsafe<Option<A>>, OptionUnsafe<Option<A>>, MOption<A>, Option<A>, A>)
                .Map<MOptionUnsafe<Option<B>>, OptionUnsafe<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(OptionUnsafe<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Option<A>>, OptionUnsafe<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(OptionUnsafe<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Option<A>>, OptionUnsafe<Option<A>>, MOption<A>, Option<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(OptionUnsafe<Option<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Option<A>>, OptionUnsafe<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(OptionUnsafe<Option<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Option<A>>, OptionUnsafe<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `OptionUnsafe&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(OptionUnsafe<Option<A>> ma, Action<A> f) =>
            default(Trans<MOptionUnsafe<Option<A>>, OptionUnsafe<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`OptionUnsafe&lt;Option&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static OptionUnsafe<Option<A>> filterT< A>(OptionUnsafe<Option<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOptionUnsafe<Option<A>>, OptionUnsafe<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MOptionUnsafe<Option<A>>, OptionUnsafe<Option<A>>, MOption<A>, Option<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOption<A>).Pure(a)
                        : default(MOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Option&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static OptionUnsafe<Option<A>> plusT<NUM,  A>(OptionUnsafe<Option<A>> x, OptionUnsafe<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Option&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static OptionUnsafe<Option<A>> subtractT<NUM,  A>(OptionUnsafe<Option<A>> x, OptionUnsafe<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Option&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static OptionUnsafe<Option<A>> productT<NUM,  A>(OptionUnsafe<Option<A>> x, OptionUnsafe<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Option&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static OptionUnsafe<Option<A>> divideT<NUM,  A>(OptionUnsafe<Option<A>> x, OptionUnsafe<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Option&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static OptionUnsafe<Option<A>> appendT<SEMI,  A>(OptionUnsafe<Option<A>> x, OptionUnsafe<Option<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(OptionUnsafe<Option<A>> x, OptionUnsafe<Option<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Option&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(OptionUnsafe<Option<A>> x, OptionUnsafe<Option<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Option<B>> applyT< A, B>(Func<A, B> fab, OptionUnsafe<Option<A>> fa) =>
            default(ApplOptionUnsafe< Option<A>, Option<B>>).Apply(
                 default(MOptionUnsafe< Func<Option<A>, Option<B>>>).Pure((Option<A> a) => default(ApplOption< A, B>).Apply(
                     default(MOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Option<B>> applyT< A, B>(OptionUnsafe<Option<Func<A, B>>> fab, OptionUnsafe<Option<A>> fa) =>
            default(MOptionUnsafe<Option<Func<A, B>>>).Bind<MOptionUnsafe<Option<B>>, OptionUnsafe<Option<B>>, Option<B>>(fab, f =>
                default(MOptionUnsafe<Option<A>>).Bind<MOptionUnsafe<Option<B>>, OptionUnsafe<Option<B>>, Option<B>>(fa, a => 
                    default(MOptionUnsafe<Option<B>>).Pure(default(ApplOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Option&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `OptionUnsafe&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Option&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static OptionUnsafe<Option<C>> applyT< A, B, C>(Func<A, B, C> fabc, OptionUnsafe<Option<A>> fa, OptionUnsafe<Option<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(OptionUnsafe<OptionUnsafe<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOptionUnsafe<OptionUnsafe<A>>, OptionUnsafe<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(OptionUnsafe<OptionUnsafe<A>> ma) =>
            default(Trans<MOptionUnsafe<OptionUnsafe<A>>, OptionUnsafe<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`OptionUnsafe&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<OptionUnsafe<B>> bindT< A, B>(OptionUnsafe<OptionUnsafe<A>> ma, Func<A, OptionUnsafe<B>> f) =>
            default(Trans<MOptionUnsafe<OptionUnsafe<A>>, OptionUnsafe<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MOptionUnsafe<OptionUnsafe<B>>, OptionUnsafe<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;OptionUnsafe&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<OptionUnsafe<B>> traverse< A, B>(OptionUnsafe<OptionUnsafe<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<OptionUnsafe<A>> sequence< A>(OptionUnsafe<OptionUnsafe<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<OptionUnsafe<B>> mapT< A, B>(OptionUnsafe<OptionUnsafe<A>> ma, Func<A, B> f) =>
            default(Trans<MOptionUnsafe<OptionUnsafe<A>>, OptionUnsafe<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Map<MOptionUnsafe<OptionUnsafe<B>>, OptionUnsafe<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(OptionUnsafe<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<OptionUnsafe<A>>, OptionUnsafe<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(OptionUnsafe<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<OptionUnsafe<A>>, OptionUnsafe<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(OptionUnsafe<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<OptionUnsafe<A>>, OptionUnsafe<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(OptionUnsafe<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<OptionUnsafe<A>>, OptionUnsafe<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(OptionUnsafe<OptionUnsafe<A>> ma, Action<A> f) =>
            default(Trans<MOptionUnsafe<OptionUnsafe<A>>, OptionUnsafe<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static OptionUnsafe<OptionUnsafe<A>> filterT< A>(OptionUnsafe<OptionUnsafe<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOptionUnsafe<OptionUnsafe<A>>, OptionUnsafe<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MOptionUnsafe<OptionUnsafe<A>>, OptionUnsafe<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOptionUnsafe<A>).Pure(a)
                        : default(MOptionUnsafe<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static OptionUnsafe<OptionUnsafe<A>> plusT<NUM,  A>(OptionUnsafe<OptionUnsafe<A>> x, OptionUnsafe<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static OptionUnsafe<OptionUnsafe<A>> subtractT<NUM,  A>(OptionUnsafe<OptionUnsafe<A>> x, OptionUnsafe<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static OptionUnsafe<OptionUnsafe<A>> productT<NUM,  A>(OptionUnsafe<OptionUnsafe<A>> x, OptionUnsafe<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static OptionUnsafe<OptionUnsafe<A>> divideT<NUM,  A>(OptionUnsafe<OptionUnsafe<A>> x, OptionUnsafe<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static OptionUnsafe<OptionUnsafe<A>> appendT<SEMI,  A>(OptionUnsafe<OptionUnsafe<A>> x, OptionUnsafe<OptionUnsafe<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(OptionUnsafe<OptionUnsafe<A>> x, OptionUnsafe<OptionUnsafe<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(OptionUnsafe<OptionUnsafe<A>> x, OptionUnsafe<OptionUnsafe<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<OptionUnsafe<B>> applyT< A, B>(Func<A, B> fab, OptionUnsafe<OptionUnsafe<A>> fa) =>
            default(ApplOptionUnsafe< OptionUnsafe<A>, OptionUnsafe<B>>).Apply(
                 default(MOptionUnsafe< Func<OptionUnsafe<A>, OptionUnsafe<B>>>).Pure((OptionUnsafe<A> a) => default(ApplOptionUnsafe< A, B>).Apply(
                     default(MOptionUnsafe< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<OptionUnsafe<B>> applyT< A, B>(OptionUnsafe<OptionUnsafe<Func<A, B>>> fab, OptionUnsafe<OptionUnsafe<A>> fa) =>
            default(MOptionUnsafe<OptionUnsafe<Func<A, B>>>).Bind<MOptionUnsafe<OptionUnsafe<B>>, OptionUnsafe<OptionUnsafe<B>>, OptionUnsafe<B>>(fab, f =>
                default(MOptionUnsafe<OptionUnsafe<A>>).Bind<MOptionUnsafe<OptionUnsafe<B>>, OptionUnsafe<OptionUnsafe<B>>, OptionUnsafe<B>>(fa, a => 
                    default(MOptionUnsafe<OptionUnsafe<B>>).Pure(default(ApplOptionUnsafe< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `OptionUnsafe&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static OptionUnsafe<OptionUnsafe<C>> applyT< A, B, C>(Func<A, B, C> fabc, OptionUnsafe<OptionUnsafe<A>> fa, OptionUnsafe<OptionUnsafe<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(OptionUnsafe<Either<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOptionUnsafe<Either<L, A>>, OptionUnsafe<Either<L, A>>, MEither<L, A>, Either<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(OptionUnsafe<Either<L, A>> ma) =>
            default(Trans<MOptionUnsafe<Either<L, A>>, OptionUnsafe<Either<L, A>>, MEither<L, A>, Either<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`OptionUnsafe&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Either<L, B>> bindT<L, A, B>(OptionUnsafe<Either<L, A>> ma, Func<A, Either<L, B>> f) =>
            default(Trans<MOptionUnsafe<Either<L, A>>, OptionUnsafe<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MOptionUnsafe<Either<L, B>>, OptionUnsafe<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, OptionUnsafe&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, OptionUnsafe&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Either<L, OptionUnsafe<B>> traverse<L, A, B>(OptionUnsafe<Either<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Either<L, OptionUnsafe<A>> sequence<L, A>(OptionUnsafe<Either<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Either<L, B>> mapT<L, A, B>(OptionUnsafe<Either<L, A>> ma, Func<A, B> f) =>
            default(Trans<MOptionUnsafe<Either<L, A>>, OptionUnsafe<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Map<MOptionUnsafe<Either<L, B>>, OptionUnsafe<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(OptionUnsafe<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Either<L, A>>, OptionUnsafe<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(OptionUnsafe<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Either<L, A>>, OptionUnsafe<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(OptionUnsafe<Either<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Either<L, A>>, OptionUnsafe<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(OptionUnsafe<Either<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Either<L, A>>, OptionUnsafe<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(OptionUnsafe<Either<L, A>> ma, Action<A> f) =>
            default(Trans<MOptionUnsafe<Either<L, A>>, OptionUnsafe<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static OptionUnsafe<Either<L, A>> filterT<L, A>(OptionUnsafe<Either<L, A>> ma, Func<A, bool> pred) =>
            default(Trans<MOptionUnsafe<Either<L, A>>, OptionUnsafe<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MOptionUnsafe<Either<L, A>>, OptionUnsafe<Either<L, A>>, MEither<L, A>, Either<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEither<L, A>).Pure(a)
                        : default(MEither<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static OptionUnsafe<Either<L, A>> plusT<NUM, L, A>(OptionUnsafe<Either<L, A>> x, OptionUnsafe<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static OptionUnsafe<Either<L, A>> subtractT<NUM, L, A>(OptionUnsafe<Either<L, A>> x, OptionUnsafe<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static OptionUnsafe<Either<L, A>> productT<NUM, L, A>(OptionUnsafe<Either<L, A>> x, OptionUnsafe<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static OptionUnsafe<Either<L, A>> divideT<NUM, L, A>(OptionUnsafe<Either<L, A>> x, OptionUnsafe<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static OptionUnsafe<Either<L, A>> appendT<SEMI, L, A>(OptionUnsafe<Either<L, A>> x, OptionUnsafe<Either<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(OptionUnsafe<Either<L, A>> x, OptionUnsafe<Either<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(OptionUnsafe<Either<L, A>> x, OptionUnsafe<Either<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Either<L, B>> applyT<L, A, B>(Func<A, B> fab, OptionUnsafe<Either<L, A>> fa) =>
            default(ApplOptionUnsafe< Either<L, A>, Either<L, B>>).Apply(
                 default(MOptionUnsafe< Func<Either<L, A>, Either<L, B>>>).Pure((Either<L, A> a) => default(ApplEither<L, A, B>).Apply(
                     default(MEither<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Either<L, B>> applyT<L, A, B>(OptionUnsafe<Either<L, Func<A, B>>> fab, OptionUnsafe<Either<L, A>> fa) =>
            default(MOptionUnsafe<Either<L, Func<A, B>>>).Bind<MOptionUnsafe<Either<L, B>>, OptionUnsafe<Either<L, B>>, Either<L, B>>(fab, f =>
                default(MOptionUnsafe<Either<L, A>>).Bind<MOptionUnsafe<Either<L, B>>, OptionUnsafe<Either<L, B>>, Either<L, B>>(fa, a => 
                    default(MOptionUnsafe<Either<L, B>>).Pure(default(ApplEither<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static OptionUnsafe<Either<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, OptionUnsafe<Either<L, A>> fa, OptionUnsafe<Either<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(OptionUnsafe<EitherUnsafe<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOptionUnsafe<EitherUnsafe<L, A>>, OptionUnsafe<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(OptionUnsafe<EitherUnsafe<L, A>> ma) =>
            default(Trans<MOptionUnsafe<EitherUnsafe<L, A>>, OptionUnsafe<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<EitherUnsafe<L, B>> bindT<L, A, B>(OptionUnsafe<EitherUnsafe<L, A>> ma, Func<A, EitherUnsafe<L, B>> f) =>
            default(Trans<MOptionUnsafe<EitherUnsafe<L, A>>, OptionUnsafe<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MOptionUnsafe<EitherUnsafe<L, B>>, OptionUnsafe<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, OptionUnsafe&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, OptionUnsafe&lt;B&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, OptionUnsafe<B>> traverse<L, A, B>(OptionUnsafe<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, OptionUnsafe<A>> sequence<L, A>(OptionUnsafe<EitherUnsafe<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<EitherUnsafe<L, B>> mapT<L, A, B>(OptionUnsafe<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            default(Trans<MOptionUnsafe<EitherUnsafe<L, A>>, OptionUnsafe<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Map<MOptionUnsafe<EitherUnsafe<L, B>>, OptionUnsafe<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(OptionUnsafe<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<EitherUnsafe<L, A>>, OptionUnsafe<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(OptionUnsafe<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<EitherUnsafe<L, A>>, OptionUnsafe<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(OptionUnsafe<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<EitherUnsafe<L, A>>, OptionUnsafe<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(OptionUnsafe<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<EitherUnsafe<L, A>>, OptionUnsafe<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(OptionUnsafe<EitherUnsafe<L, A>> ma, Action<A> f) =>
            default(Trans<MOptionUnsafe<EitherUnsafe<L, A>>, OptionUnsafe<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static OptionUnsafe<EitherUnsafe<L, A>> filterT<L, A>(OptionUnsafe<EitherUnsafe<L, A>> ma, Func<A, bool> pred) =>
            default(Trans<MOptionUnsafe<EitherUnsafe<L, A>>, OptionUnsafe<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MOptionUnsafe<EitherUnsafe<L, A>>, OptionUnsafe<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEitherUnsafe<L, A>).Pure(a)
                        : default(MEitherUnsafe<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static OptionUnsafe<EitherUnsafe<L, A>> plusT<NUM, L, A>(OptionUnsafe<EitherUnsafe<L, A>> x, OptionUnsafe<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static OptionUnsafe<EitherUnsafe<L, A>> subtractT<NUM, L, A>(OptionUnsafe<EitherUnsafe<L, A>> x, OptionUnsafe<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static OptionUnsafe<EitherUnsafe<L, A>> productT<NUM, L, A>(OptionUnsafe<EitherUnsafe<L, A>> x, OptionUnsafe<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static OptionUnsafe<EitherUnsafe<L, A>> divideT<NUM, L, A>(OptionUnsafe<EitherUnsafe<L, A>> x, OptionUnsafe<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static OptionUnsafe<EitherUnsafe<L, A>> appendT<SEMI, L, A>(OptionUnsafe<EitherUnsafe<L, A>> x, OptionUnsafe<EitherUnsafe<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(OptionUnsafe<EitherUnsafe<L, A>> x, OptionUnsafe<EitherUnsafe<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(OptionUnsafe<EitherUnsafe<L, A>> x, OptionUnsafe<EitherUnsafe<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<EitherUnsafe<L, B>> applyT<L, A, B>(Func<A, B> fab, OptionUnsafe<EitherUnsafe<L, A>> fa) =>
            default(ApplOptionUnsafe< EitherUnsafe<L, A>, EitherUnsafe<L, B>>).Apply(
                 default(MOptionUnsafe< Func<EitherUnsafe<L, A>, EitherUnsafe<L, B>>>).Pure((EitherUnsafe<L, A> a) => default(ApplEitherUnsafe<L, A, B>).Apply(
                     default(MEitherUnsafe<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<EitherUnsafe<L, B>> applyT<L, A, B>(OptionUnsafe<EitherUnsafe<L, Func<A, B>>> fab, OptionUnsafe<EitherUnsafe<L, A>> fa) =>
            default(MOptionUnsafe<EitherUnsafe<L, Func<A, B>>>).Bind<MOptionUnsafe<EitherUnsafe<L, B>>, OptionUnsafe<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fab, f =>
                default(MOptionUnsafe<EitherUnsafe<L, A>>).Bind<MOptionUnsafe<EitherUnsafe<L, B>>, OptionUnsafe<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fa, a => 
                    default(MOptionUnsafe<EitherUnsafe<L, B>>).Pure(default(ApplEitherUnsafe<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static OptionUnsafe<EitherUnsafe<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, OptionUnsafe<EitherUnsafe<L, A>> fa, OptionUnsafe<EitherUnsafe<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `OptionUnsafe&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Try&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `OptionUnsafe&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(OptionUnsafe<Try<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOptionUnsafe<Try<A>>, OptionUnsafe<Try<A>>, MTry<A>, Try<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `OptionUnsafe&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Try&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `OptionUnsafe&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(OptionUnsafe<Try<A>> ma) =>
            default(Trans<MOptionUnsafe<Try<A>>, OptionUnsafe<Try<A>>, MTry<A>, Try<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`OptionUnsafe&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Try<B>> bindT< A, B>(OptionUnsafe<Try<A>> ma, Func<A, Try<B>> f) =>
            default(Trans<MOptionUnsafe<Try<A>>, OptionUnsafe<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MOptionUnsafe<Try<B>>, OptionUnsafe<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `OptionUnsafe&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;OptionUnsafe&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Try<OptionUnsafe<B>> traverse< A, B>(OptionUnsafe<Try<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `OptionUnsafe&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;OptionUnsafe&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Try<OptionUnsafe<A>> sequence< A>(OptionUnsafe<Try<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Try<B>> mapT< A, B>(OptionUnsafe<Try<A>> ma, Func<A, B> f) =>
            default(Trans<MOptionUnsafe<Try<A>>, OptionUnsafe<Try<A>>, MTry<A>, Try<A>, A>)
                .Map<MOptionUnsafe<Try<B>>, OptionUnsafe<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(OptionUnsafe<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Try<A>>, OptionUnsafe<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(OptionUnsafe<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Try<A>>, OptionUnsafe<Try<A>>, MTry<A>, Try<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(OptionUnsafe<Try<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Try<A>>, OptionUnsafe<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(OptionUnsafe<Try<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Try<A>>, OptionUnsafe<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `OptionUnsafe&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(OptionUnsafe<Try<A>> ma, Action<A> f) =>
            default(Trans<MOptionUnsafe<Try<A>>, OptionUnsafe<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`OptionUnsafe&lt;Try&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static OptionUnsafe<Try<A>> filterT< A>(OptionUnsafe<Try<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOptionUnsafe<Try<A>>, OptionUnsafe<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MOptionUnsafe<Try<A>>, OptionUnsafe<Try<A>>, MTry<A>, Try<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTry<A>).Pure(a)
                        : default(MTry<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Try&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static OptionUnsafe<Try<A>> plusT<NUM,  A>(OptionUnsafe<Try<A>> x, OptionUnsafe<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Try&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static OptionUnsafe<Try<A>> subtractT<NUM,  A>(OptionUnsafe<Try<A>> x, OptionUnsafe<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Try&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static OptionUnsafe<Try<A>> productT<NUM,  A>(OptionUnsafe<Try<A>> x, OptionUnsafe<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Try&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static OptionUnsafe<Try<A>> divideT<NUM,  A>(OptionUnsafe<Try<A>> x, OptionUnsafe<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Try&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static OptionUnsafe<Try<A>> appendT<SEMI,  A>(OptionUnsafe<Try<A>> x, OptionUnsafe<Try<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(OptionUnsafe<Try<A>> x, OptionUnsafe<Try<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Try&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(OptionUnsafe<Try<A>> x, OptionUnsafe<Try<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Try<B>> applyT< A, B>(Func<A, B> fab, OptionUnsafe<Try<A>> fa) =>
            default(ApplOptionUnsafe< Try<A>, Try<B>>).Apply(
                 default(MOptionUnsafe< Func<Try<A>, Try<B>>>).Pure((Try<A> a) => default(ApplTry< A, B>).Apply(
                     default(MTry< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Try<B>> applyT< A, B>(OptionUnsafe<Try<Func<A, B>>> fab, OptionUnsafe<Try<A>> fa) =>
            default(MOptionUnsafe<Try<Func<A, B>>>).Bind<MOptionUnsafe<Try<B>>, OptionUnsafe<Try<B>>, Try<B>>(fab, f =>
                default(MOptionUnsafe<Try<A>>).Bind<MOptionUnsafe<Try<B>>, OptionUnsafe<Try<B>>, Try<B>>(fa, a => 
                    default(MOptionUnsafe<Try<B>>).Pure(default(ApplTry< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Try&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `OptionUnsafe&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Try&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static OptionUnsafe<Try<C>> applyT< A, B, C>(Func<A, B, C> fabc, OptionUnsafe<Try<A>> fa, OptionUnsafe<Try<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryOptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(OptionUnsafe<TryOption<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOptionUnsafe<TryOption<A>>, OptionUnsafe<TryOption<A>>, MTryOption<A>, TryOption<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(OptionUnsafe<TryOption<A>> ma) =>
            default(Trans<MOptionUnsafe<TryOption<A>>, OptionUnsafe<TryOption<A>>, MTryOption<A>, TryOption<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`OptionUnsafe&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<TryOption<B>> bindT< A, B>(OptionUnsafe<TryOption<A>> ma, Func<A, TryOption<B>> f) =>
            default(Trans<MOptionUnsafe<TryOption<A>>, OptionUnsafe<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MOptionUnsafe<TryOption<B>>, OptionUnsafe<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;OptionUnsafe&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>
        [Pure]
        public static TryOption<OptionUnsafe<B>> traverse< A, B>(OptionUnsafe<TryOption<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static TryOption<OptionUnsafe<A>> sequence< A>(OptionUnsafe<TryOption<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<TryOption<B>> mapT< A, B>(OptionUnsafe<TryOption<A>> ma, Func<A, B> f) =>
            default(Trans<MOptionUnsafe<TryOption<A>>, OptionUnsafe<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Map<MOptionUnsafe<TryOption<B>>, OptionUnsafe<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(OptionUnsafe<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<TryOption<A>>, OptionUnsafe<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(OptionUnsafe<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<TryOption<A>>, OptionUnsafe<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(OptionUnsafe<TryOption<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<TryOption<A>>, OptionUnsafe<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(OptionUnsafe<TryOption<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<TryOption<A>>, OptionUnsafe<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(OptionUnsafe<TryOption<A>> ma, Action<A> f) =>
            default(Trans<MOptionUnsafe<TryOption<A>>, OptionUnsafe<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static OptionUnsafe<TryOption<A>> filterT< A>(OptionUnsafe<TryOption<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOptionUnsafe<TryOption<A>>, OptionUnsafe<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MOptionUnsafe<TryOption<A>>, OptionUnsafe<TryOption<A>>, MTryOption<A>, TryOption<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTryOption<A>).Pure(a)
                        : default(MTryOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static OptionUnsafe<TryOption<A>> plusT<NUM,  A>(OptionUnsafe<TryOption<A>> x, OptionUnsafe<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static OptionUnsafe<TryOption<A>> subtractT<NUM,  A>(OptionUnsafe<TryOption<A>> x, OptionUnsafe<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static OptionUnsafe<TryOption<A>> productT<NUM,  A>(OptionUnsafe<TryOption<A>> x, OptionUnsafe<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static OptionUnsafe<TryOption<A>> divideT<NUM,  A>(OptionUnsafe<TryOption<A>> x, OptionUnsafe<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static OptionUnsafe<TryOption<A>> appendT<SEMI,  A>(OptionUnsafe<TryOption<A>> x, OptionUnsafe<TryOption<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(OptionUnsafe<TryOption<A>> x, OptionUnsafe<TryOption<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(OptionUnsafe<TryOption<A>> x, OptionUnsafe<TryOption<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<TryOption<B>> applyT< A, B>(Func<A, B> fab, OptionUnsafe<TryOption<A>> fa) =>
            default(ApplOptionUnsafe< TryOption<A>, TryOption<B>>).Apply(
                 default(MOptionUnsafe< Func<TryOption<A>, TryOption<B>>>).Pure((TryOption<A> a) => default(ApplTryOption< A, B>).Apply(
                     default(MTryOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<TryOption<B>> applyT< A, B>(OptionUnsafe<TryOption<Func<A, B>>> fab, OptionUnsafe<TryOption<A>> fa) =>
            default(MOptionUnsafe<TryOption<Func<A, B>>>).Bind<MOptionUnsafe<TryOption<B>>, OptionUnsafe<TryOption<B>>, TryOption<B>>(fab, f =>
                default(MOptionUnsafe<TryOption<A>>).Bind<MOptionUnsafe<TryOption<B>>, OptionUnsafe<TryOption<B>>, TryOption<B>>(fa, a => 
                    default(MOptionUnsafe<TryOption<B>>).Pure(default(ApplTryOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static OptionUnsafe<TryOption<C>> applyT< A, B, C>(Func<A, B, C> fabc, OptionUnsafe<TryOption<A>> fa, OptionUnsafe<TryOption<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class IEnumerableT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(OptionUnsafe<IEnumerable<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOptionUnsafe<IEnumerable<A>>, OptionUnsafe<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(OptionUnsafe<IEnumerable<A>> ma) =>
            default(Trans<MOptionUnsafe<IEnumerable<A>>, OptionUnsafe<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`OptionUnsafe&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<IEnumerable<B>> bindT< A, B>(OptionUnsafe<IEnumerable<A>> ma, Func<A, IEnumerable<B>> f) =>
            default(Trans<MOptionUnsafe<IEnumerable<A>>, OptionUnsafe<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MOptionUnsafe<IEnumerable<B>>, OptionUnsafe<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;OptionUnsafe&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<OptionUnsafe<B>> traverse< A, B>(OptionUnsafe<IEnumerable<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<OptionUnsafe<A>> sequence< A>(OptionUnsafe<IEnumerable<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<IEnumerable<B>> mapT< A, B>(OptionUnsafe<IEnumerable<A>> ma, Func<A, B> f) =>
            default(Trans<MOptionUnsafe<IEnumerable<A>>, OptionUnsafe<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Map<MOptionUnsafe<IEnumerable<B>>, OptionUnsafe<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(OptionUnsafe<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<IEnumerable<A>>, OptionUnsafe<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(OptionUnsafe<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<IEnumerable<A>>, OptionUnsafe<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(OptionUnsafe<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<IEnumerable<A>>, OptionUnsafe<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(OptionUnsafe<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<IEnumerable<A>>, OptionUnsafe<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(OptionUnsafe<IEnumerable<A>> ma, Action<A> f) =>
            default(Trans<MOptionUnsafe<IEnumerable<A>>, OptionUnsafe<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static OptionUnsafe<IEnumerable<A>> filterT< A>(OptionUnsafe<IEnumerable<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOptionUnsafe<IEnumerable<A>>, OptionUnsafe<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MOptionUnsafe<IEnumerable<A>>, OptionUnsafe<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>(ma, 
                    a => pred(a)
                        ? default(MEnumerable<A>).Pure(a)
                        : default(MEnumerable<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static OptionUnsafe<IEnumerable<A>> plusT<NUM,  A>(OptionUnsafe<IEnumerable<A>> x, OptionUnsafe<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static OptionUnsafe<IEnumerable<A>> subtractT<NUM,  A>(OptionUnsafe<IEnumerable<A>> x, OptionUnsafe<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static OptionUnsafe<IEnumerable<A>> productT<NUM,  A>(OptionUnsafe<IEnumerable<A>> x, OptionUnsafe<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static OptionUnsafe<IEnumerable<A>> divideT<NUM,  A>(OptionUnsafe<IEnumerable<A>> x, OptionUnsafe<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static OptionUnsafe<IEnumerable<A>> appendT<SEMI,  A>(OptionUnsafe<IEnumerable<A>> x, OptionUnsafe<IEnumerable<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(OptionUnsafe<IEnumerable<A>> x, OptionUnsafe<IEnumerable<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(OptionUnsafe<IEnumerable<A>> x, OptionUnsafe<IEnumerable<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<IEnumerable<B>> applyT< A, B>(Func<A, B> fab, OptionUnsafe<IEnumerable<A>> fa) =>
            default(ApplOptionUnsafe< IEnumerable<A>, IEnumerable<B>>).Apply(
                 default(MOptionUnsafe< Func<IEnumerable<A>, IEnumerable<B>>>).Pure((IEnumerable<A> a) => default(ApplEnumerable< A, B>).Apply(
                     default(MEnumerable< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<IEnumerable<B>> applyT< A, B>(OptionUnsafe<IEnumerable<Func<A, B>>> fab, OptionUnsafe<IEnumerable<A>> fa) =>
            default(MOptionUnsafe<IEnumerable<Func<A, B>>>).Bind<MOptionUnsafe<IEnumerable<B>>, OptionUnsafe<IEnumerable<B>>, IEnumerable<B>>(fab, f =>
                default(MOptionUnsafe<IEnumerable<A>>).Bind<MOptionUnsafe<IEnumerable<B>>, OptionUnsafe<IEnumerable<B>>, IEnumerable<B>>(fa, a => 
                    default(MOptionUnsafe<IEnumerable<B>>).Pure(default(ApplEnumerable< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static OptionUnsafe<IEnumerable<C>> applyT< A, B, C>(Func<A, B, C> fabc, OptionUnsafe<IEnumerable<A>> fa, OptionUnsafe<IEnumerable<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SeqT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `OptionUnsafe&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Seq&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `OptionUnsafe&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(OptionUnsafe<Seq<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOptionUnsafe<Seq<A>>, OptionUnsafe<Seq<A>>, MSeq<A>, Seq<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `OptionUnsafe&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Seq&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `OptionUnsafe&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(OptionUnsafe<Seq<A>> ma) =>
            default(Trans<MOptionUnsafe<Seq<A>>, OptionUnsafe<Seq<A>>, MSeq<A>, Seq<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`OptionUnsafe&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Seq<B>> bindT< A, B>(OptionUnsafe<Seq<A>> ma, Func<A, Seq<B>> f) =>
            default(Trans<MOptionUnsafe<Seq<A>>, OptionUnsafe<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MOptionUnsafe<Seq<B>>, OptionUnsafe<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `OptionUnsafe&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;OptionUnsafe&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Seq<OptionUnsafe<B>> traverse< A, B>(OptionUnsafe<Seq<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `OptionUnsafe&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;OptionUnsafe&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Seq<OptionUnsafe<A>> sequence< A>(OptionUnsafe<Seq<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Seq<B>> mapT< A, B>(OptionUnsafe<Seq<A>> ma, Func<A, B> f) =>
            default(Trans<MOptionUnsafe<Seq<A>>, OptionUnsafe<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Map<MOptionUnsafe<Seq<B>>, OptionUnsafe<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(OptionUnsafe<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Seq<A>>, OptionUnsafe<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(OptionUnsafe<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Seq<A>>, OptionUnsafe<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(OptionUnsafe<Seq<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Seq<A>>, OptionUnsafe<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(OptionUnsafe<Seq<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Seq<A>>, OptionUnsafe<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `OptionUnsafe&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(OptionUnsafe<Seq<A>> ma, Action<A> f) =>
            default(Trans<MOptionUnsafe<Seq<A>>, OptionUnsafe<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`OptionUnsafe&lt;Seq&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static OptionUnsafe<Seq<A>> filterT< A>(OptionUnsafe<Seq<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOptionUnsafe<Seq<A>>, OptionUnsafe<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MOptionUnsafe<Seq<A>>, OptionUnsafe<Seq<A>>, MSeq<A>, Seq<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSeq<A>).Pure(a)
                        : default(MSeq<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Seq&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static OptionUnsafe<Seq<A>> plusT<NUM,  A>(OptionUnsafe<Seq<A>> x, OptionUnsafe<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Seq&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static OptionUnsafe<Seq<A>> subtractT<NUM,  A>(OptionUnsafe<Seq<A>> x, OptionUnsafe<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static OptionUnsafe<Seq<A>> productT<NUM,  A>(OptionUnsafe<Seq<A>> x, OptionUnsafe<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static OptionUnsafe<Seq<A>> divideT<NUM,  A>(OptionUnsafe<Seq<A>> x, OptionUnsafe<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static OptionUnsafe<Seq<A>> appendT<SEMI,  A>(OptionUnsafe<Seq<A>> x, OptionUnsafe<Seq<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(OptionUnsafe<Seq<A>> x, OptionUnsafe<Seq<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(OptionUnsafe<Seq<A>> x, OptionUnsafe<Seq<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Seq<B>> applyT< A, B>(Func<A, B> fab, OptionUnsafe<Seq<A>> fa) =>
            default(ApplOptionUnsafe< Seq<A>, Seq<B>>).Apply(
                 default(MOptionUnsafe< Func<Seq<A>, Seq<B>>>).Pure((Seq<A> a) => default(ApplSeq< A, B>).Apply(
                     default(MSeq< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Seq<B>> applyT< A, B>(OptionUnsafe<Seq<Func<A, B>>> fab, OptionUnsafe<Seq<A>> fa) =>
            default(MOptionUnsafe<Seq<Func<A, B>>>).Bind<MOptionUnsafe<Seq<B>>, OptionUnsafe<Seq<B>>, Seq<B>>(fab, f =>
                default(MOptionUnsafe<Seq<A>>).Bind<MOptionUnsafe<Seq<B>>, OptionUnsafe<Seq<B>>, Seq<B>>(fa, a => 
                    default(MOptionUnsafe<Seq<B>>).Pure(default(ApplSeq< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Seq&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `OptionUnsafe&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static OptionUnsafe<Seq<C>> applyT< A, B, C>(Func<A, B, C> fabc, OptionUnsafe<Seq<A>> fa, OptionUnsafe<Seq<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `OptionUnsafe&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Set&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `OptionUnsafe&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(OptionUnsafe<Set<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOptionUnsafe<Set<A>>, OptionUnsafe<Set<A>>, MSet<A>, Set<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `OptionUnsafe&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Set&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `OptionUnsafe&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(OptionUnsafe<Set<A>> ma) =>
            default(Trans<MOptionUnsafe<Set<A>>, OptionUnsafe<Set<A>>, MSet<A>, Set<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`OptionUnsafe&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Set<B>> bindT< A, B>(OptionUnsafe<Set<A>> ma, Func<A, Set<B>> f) =>
            default(Trans<MOptionUnsafe<Set<A>>, OptionUnsafe<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MOptionUnsafe<Set<B>>, OptionUnsafe<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `OptionUnsafe&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;OptionUnsafe&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;OptionUnsafe&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Set<OptionUnsafe<B>> traverse< A, B>(OptionUnsafe<Set<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `OptionUnsafe&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;OptionUnsafe&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Set<OptionUnsafe<A>> sequence< A>(OptionUnsafe<Set<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Set<B>> mapT< A, B>(OptionUnsafe<Set<A>> ma, Func<A, B> f) =>
            default(Trans<MOptionUnsafe<Set<A>>, OptionUnsafe<Set<A>>, MSet<A>, Set<A>, A>)
                .Map<MOptionUnsafe<Set<B>>, OptionUnsafe<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(OptionUnsafe<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Set<A>>, OptionUnsafe<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(OptionUnsafe<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Set<A>>, OptionUnsafe<Set<A>>, MSet<A>, Set<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(OptionUnsafe<Set<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Set<A>>, OptionUnsafe<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(OptionUnsafe<Set<A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Set<A>>, OptionUnsafe<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `OptionUnsafe&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(OptionUnsafe<Set<A>> ma, Action<A> f) =>
            default(Trans<MOptionUnsafe<Set<A>>, OptionUnsafe<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`OptionUnsafe&lt;Set&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static OptionUnsafe<Set<A>> filterT< A>(OptionUnsafe<Set<A>> ma, Func<A, bool> pred) =>
            default(Trans<MOptionUnsafe<Set<A>>, OptionUnsafe<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MOptionUnsafe<Set<A>>, OptionUnsafe<Set<A>>, MSet<A>, Set<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSet<A>).Pure(a)
                        : default(MSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Set&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static OptionUnsafe<Set<A>> plusT<NUM,  A>(OptionUnsafe<Set<A>> x, OptionUnsafe<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Set&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static OptionUnsafe<Set<A>> subtractT<NUM,  A>(OptionUnsafe<Set<A>> x, OptionUnsafe<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Set&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static OptionUnsafe<Set<A>> productT<NUM,  A>(OptionUnsafe<Set<A>> x, OptionUnsafe<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Set&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static OptionUnsafe<Set<A>> divideT<NUM,  A>(OptionUnsafe<Set<A>> x, OptionUnsafe<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Set&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static OptionUnsafe<Set<A>> appendT<SEMI,  A>(OptionUnsafe<Set<A>> x, OptionUnsafe<Set<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(OptionUnsafe<Set<A>> x, OptionUnsafe<Set<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Set&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(OptionUnsafe<Set<A>> x, OptionUnsafe<Set<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Set<B>> applyT< A, B>(Func<A, B> fab, OptionUnsafe<Set<A>> fa) =>
            default(ApplOptionUnsafe< Set<A>, Set<B>>).Apply(
                 default(MOptionUnsafe< Func<Set<A>, Set<B>>>).Pure((Set<A> a) => default(ApplSet< A, B>).Apply(
                     default(MSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Set<B>> applyT< A, B>(OptionUnsafe<Set<Func<A, B>>> fab, OptionUnsafe<Set<A>> fa) =>
            default(MOptionUnsafe<Set<Func<A, B>>>).Bind<MOptionUnsafe<Set<B>>, OptionUnsafe<Set<B>>, Set<B>>(fab, f =>
                default(MOptionUnsafe<Set<A>>).Bind<MOptionUnsafe<Set<B>>, OptionUnsafe<Set<B>>, Set<B>>(fa, a => 
                    default(MOptionUnsafe<Set<B>>).Pure(default(ApplSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Set&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `OptionUnsafe&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Set&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static OptionUnsafe<Set<C>> applyT< A, B, C>(Func<A, B, C> fabc, OptionUnsafe<Set<A>> fa, OptionUnsafe<Set<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ValidationT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(OptionUnsafe<Validation<FAIL, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MOptionUnsafe<Validation<FAIL, A>>, OptionUnsafe<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(OptionUnsafe<Validation<FAIL, A>> ma) =>
            default(Trans<MOptionUnsafe<Validation<FAIL, A>>, OptionUnsafe<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`OptionUnsafe&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Validation<FAIL, B>> bindT<FAIL, A, B>(OptionUnsafe<Validation<FAIL, A>> ma, Func<A, Validation<FAIL, B>> f) =>
            default(Trans<MOptionUnsafe<Validation<FAIL, A>>, OptionUnsafe<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MOptionUnsafe<Validation<FAIL, B>>, OptionUnsafe<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, OptionUnsafe&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, OptionUnsafe&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, OptionUnsafe<B>> traverse<FAIL, A, B>(OptionUnsafe<Validation<FAIL, A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, OptionUnsafe<A>> sequence<FAIL, A>(OptionUnsafe<Validation<FAIL, A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static OptionUnsafe<Validation<FAIL, B>> mapT<FAIL, A, B>(OptionUnsafe<Validation<FAIL, A>> ma, Func<A, B> f) =>
            default(Trans<MOptionUnsafe<Validation<FAIL, A>>, OptionUnsafe<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Map<MOptionUnsafe<Validation<FAIL, B>>, OptionUnsafe<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(OptionUnsafe<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Validation<FAIL, A>>, OptionUnsafe<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(OptionUnsafe<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MOptionUnsafe<Validation<FAIL, A>>, OptionUnsafe<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(OptionUnsafe<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Validation<FAIL, A>>, OptionUnsafe<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(OptionUnsafe<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(Trans<MOptionUnsafe<Validation<FAIL, A>>, OptionUnsafe<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(OptionUnsafe<Validation<FAIL, A>> ma, Action<A> f) =>
            default(Trans<MOptionUnsafe<Validation<FAIL, A>>, OptionUnsafe<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static OptionUnsafe<Validation<FAIL, A>> filterT<FAIL, A>(OptionUnsafe<Validation<FAIL, A>> ma, Func<A, bool> pred) =>
            default(Trans<MOptionUnsafe<Validation<FAIL, A>>, OptionUnsafe<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MOptionUnsafe<Validation<FAIL, A>>, OptionUnsafe<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>(ma, 
                    a => pred(a)
                        ? default(MValidation<FAIL, A>).Pure(a)
                        : default(MValidation<FAIL, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static OptionUnsafe<Validation<FAIL, A>> plusT<NUM, FAIL, A>(OptionUnsafe<Validation<FAIL, A>> x, OptionUnsafe<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static OptionUnsafe<Validation<FAIL, A>> subtractT<NUM, FAIL, A>(OptionUnsafe<Validation<FAIL, A>> x, OptionUnsafe<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static OptionUnsafe<Validation<FAIL, A>> productT<NUM, FAIL, A>(OptionUnsafe<Validation<FAIL, A>> x, OptionUnsafe<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static OptionUnsafe<Validation<FAIL, A>> divideT<NUM, FAIL, A>(OptionUnsafe<Validation<FAIL, A>> x, OptionUnsafe<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static OptionUnsafe<Validation<FAIL, A>> appendT<SEMI, FAIL, A>(OptionUnsafe<Validation<FAIL, A>> x, OptionUnsafe<Validation<FAIL, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(OptionUnsafe<Validation<FAIL, A>> x, OptionUnsafe<Validation<FAIL, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(OptionUnsafe<Validation<FAIL, A>> x, OptionUnsafe<Validation<FAIL, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Validation<FAIL, B>> applyT<FAIL, A, B>(Func<A, B> fab, OptionUnsafe<Validation<FAIL, A>> fa) =>
            default(ApplOptionUnsafe< Validation<FAIL, A>, Validation<FAIL, B>>).Apply(
                 default(MOptionUnsafe< Func<Validation<FAIL, A>, Validation<FAIL, B>>>).Pure((Validation<FAIL, A> a) => default(ApplValidation<FAIL, A, B>).Apply(
                     default(MValidation<FAIL, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static OptionUnsafe<Validation<FAIL, B>> applyT<FAIL, A, B>(OptionUnsafe<Validation<FAIL, Func<A, B>>> fab, OptionUnsafe<Validation<FAIL, A>> fa) =>
            default(MOptionUnsafe<Validation<FAIL, Func<A, B>>>).Bind<MOptionUnsafe<Validation<FAIL, B>>, OptionUnsafe<Validation<FAIL, B>>, Validation<FAIL, B>>(fab, f =>
                default(MOptionUnsafe<Validation<FAIL, A>>).Bind<MOptionUnsafe<Validation<FAIL, B>>, OptionUnsafe<Validation<FAIL, B>>, Validation<FAIL, B>>(fa, a => 
                    default(MOptionUnsafe<Validation<FAIL, B>>).Pure(default(ApplValidation<FAIL, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`OptionUnsafe&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static OptionUnsafe<Validation<FAIL, C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, OptionUnsafe<Validation<FAIL, A>> fa, OptionUnsafe<Validation<FAIL, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ArrT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Either&lt;L, Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Arr&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Either&lt;L, Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Either<L, Arr<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEither<L, Arr<A>>, Either<L, Arr<A>>, MArr<A>, Arr<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Either&lt;L, Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Arr&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Either&lt;L, Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Either<L, Arr<A>> ma) =>
            default(Trans<MEither<L, Arr<A>>, Either<L, Arr<A>>, MArr<A>, Arr<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Either&lt;L, Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Arr<B>> bindT<L, A, B>(Either<L, Arr<A>> ma, Func<A, Arr<B>> f) =>
            default(Trans<MEither<L, Arr<A>>, Either<L, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MEither<L, Arr<B>>, Either<L, Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Either&lt;L, Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Either&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Either&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Arr<Either<L, B>> traverse<L, A, B>(Either<L, Arr<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Either&lt;L, Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Either&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Arr<Either<L, A>> sequence<L, A>(Either<L, Arr<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Arr<B>> mapT<L, A, B>(Either<L, Arr<A>> ma, Func<A, B> f) =>
            default(Trans<MEither<L, Arr<A>>, Either<L, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Map<MEither<L, Arr<B>>, Either<L, Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Either<L, Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Arr<A>>, Either<L, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Either<L, Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Arr<A>>, Either<L, Arr<A>>, MArr<A>, Arr<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Either<L, Arr<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Arr<A>>, Either<L, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Either<L, Arr<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Arr<A>>, Either<L, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Either&lt;L, Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Either<L, Arr<A>> ma, Action<A> f) =>
            default(Trans<MEither<L, Arr<A>>, Either<L, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Either&lt;L, Arr&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Either<L, Arr<A>> filterT<L, A>(Either<L, Arr<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEither<L, Arr<A>>, Either<L, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MEither<L, Arr<A>>, Either<L, Arr<A>>, MArr<A>, Arr<A>, A>(ma, 
                    a => pred(a)
                        ? default(MArr<A>).Pure(a)
                        : default(MArr<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Arr&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Either<L, Arr<A>> plusT<NUM, L, A>(Either<L, Arr<A>> x, Either<L, Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Arr&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Either<L, Arr<A>> subtractT<NUM, L, A>(Either<L, Arr<A>> x, Either<L, Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Arr&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Either<L, Arr<A>> productT<NUM, L, A>(Either<L, Arr<A>> x, Either<L, Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Arr&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Either<L, Arr<A>> divideT<NUM, L, A>(Either<L, Arr<A>> x, Either<L, Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Arr&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Either<L, Arr<A>> appendT<SEMI, L, A>(Either<L, Arr<A>> x, Either<L, Arr<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Either<L, Arr<A>> x, Either<L, Arr<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Arr&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Either<L, Arr<A>> x, Either<L, Arr<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Arr<B>> applyT<L, A, B>(Func<A, B> fab, Either<L, Arr<A>> fa) =>
            default(ApplEither<L, Arr<A>, Arr<B>>).Apply(
                 default(MEither<L, Func<Arr<A>, Arr<B>>>).Pure((Arr<A> a) => default(ApplArr< A, B>).Apply(
                     default(MArr< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Arr<B>> applyT<L, A, B>(Either<L, Arr<Func<A, B>>> fab, Either<L, Arr<A>> fa) =>
            default(MEither<L, Arr<Func<A, B>>>).Bind<MEither<L, Arr<B>>, Either<L, Arr<B>>, Arr<B>>(fab, f =>
                default(MEither<L, Arr<A>>).Bind<MEither<L, Arr<B>>, Either<L, Arr<B>>, Arr<B>>(fa, a => 
                    default(MEither<L, Arr<B>>).Pure(default(ApplArr< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Arr&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Either&lt;L, Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Arr&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Either<L, Arr<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Either<L, Arr<A>> fa, Either<L, Arr<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class HashSetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Either&lt;L, HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, HashSet&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Either&lt;L, HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Either<L, HashSet<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEither<L, HashSet<A>>, Either<L, HashSet<A>>, MHashSet<A>, HashSet<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Either&lt;L, HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, HashSet&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Either&lt;L, HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Either<L, HashSet<A>> ma) =>
            default(Trans<MEither<L, HashSet<A>>, Either<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Either&lt;L, HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, HashSet<B>> bindT<L, A, B>(Either<L, HashSet<A>> ma, Func<A, HashSet<B>> f) =>
            default(Trans<MEither<L, HashSet<A>>, Either<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MEither<L, HashSet<B>>, Either<L, HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Either&lt;L, HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Either&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Either&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Either<L, B>> traverse<L, A, B>(Either<L, HashSet<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Either&lt;L, HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Either&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Either<L, A>> sequence<L, A>(Either<L, HashSet<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, HashSet<B>> mapT<L, A, B>(Either<L, HashSet<A>> ma, Func<A, B> f) =>
            default(Trans<MEither<L, HashSet<A>>, Either<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Map<MEither<L, HashSet<B>>, Either<L, HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Either<L, HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, HashSet<A>>, Either<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Either<L, HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, HashSet<A>>, Either<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Either<L, HashSet<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, HashSet<A>>, Either<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Either<L, HashSet<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, HashSet<A>>, Either<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Either&lt;L, HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Either<L, HashSet<A>> ma, Action<A> f) =>
            default(Trans<MEither<L, HashSet<A>>, Either<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Either&lt;L, HashSet&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Either<L, HashSet<A>> filterT<L, A>(Either<L, HashSet<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEither<L, HashSet<A>>, Either<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MEither<L, HashSet<A>>, Either<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>(ma, 
                    a => pred(a)
                        ? default(MHashSet<A>).Pure(a)
                        : default(MHashSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, HashSet&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Either<L, HashSet<A>> plusT<NUM, L, A>(Either<L, HashSet<A>> x, Either<L, HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, HashSet&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Either<L, HashSet<A>> subtractT<NUM, L, A>(Either<L, HashSet<A>> x, Either<L, HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, HashSet&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Either<L, HashSet<A>> productT<NUM, L, A>(Either<L, HashSet<A>> x, Either<L, HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, HashSet&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Either<L, HashSet<A>> divideT<NUM, L, A>(Either<L, HashSet<A>> x, Either<L, HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, HashSet&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Either<L, HashSet<A>> appendT<SEMI, L, A>(Either<L, HashSet<A>> x, Either<L, HashSet<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Either<L, HashSet<A>> x, Either<L, HashSet<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, HashSet&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Either<L, HashSet<A>> x, Either<L, HashSet<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, HashSet<B>> applyT<L, A, B>(Func<A, B> fab, Either<L, HashSet<A>> fa) =>
            default(ApplEither<L, HashSet<A>, HashSet<B>>).Apply(
                 default(MEither<L, Func<HashSet<A>, HashSet<B>>>).Pure((HashSet<A> a) => default(ApplHashSet< A, B>).Apply(
                     default(MHashSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, HashSet<B>> applyT<L, A, B>(Either<L, HashSet<Func<A, B>>> fab, Either<L, HashSet<A>> fa) =>
            default(MEither<L, HashSet<Func<A, B>>>).Bind<MEither<L, HashSet<B>>, Either<L, HashSet<B>>, HashSet<B>>(fab, f =>
                default(MEither<L, HashSet<A>>).Bind<MEither<L, HashSet<B>>, Either<L, HashSet<B>>, HashSet<B>>(fa, a => 
                    default(MEither<L, HashSet<B>>).Pure(default(ApplHashSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, HashSet&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Either&lt;L, HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, HashSet&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Either<L, HashSet<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Either<L, HashSet<A>> fa, Either<L, HashSet<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class LstT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Either&lt;L, Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Lst&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Either&lt;L, Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Either<L, Lst<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEither<L, Lst<A>>, Either<L, Lst<A>>, MLst<A>, Lst<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Either&lt;L, Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Lst&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Either&lt;L, Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Either<L, Lst<A>> ma) =>
            default(Trans<MEither<L, Lst<A>>, Either<L, Lst<A>>, MLst<A>, Lst<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Either&lt;L, Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Lst<B>> bindT<L, A, B>(Either<L, Lst<A>> ma, Func<A, Lst<B>> f) =>
            default(Trans<MEither<L, Lst<A>>, Either<L, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MEither<L, Lst<B>>, Either<L, Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Either&lt;L, Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Either&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Either&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Lst<Either<L, B>> traverse<L, A, B>(Either<L, Lst<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Either&lt;L, Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Either&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Lst<Either<L, A>> sequence<L, A>(Either<L, Lst<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Lst<B>> mapT<L, A, B>(Either<L, Lst<A>> ma, Func<A, B> f) =>
            default(Trans<MEither<L, Lst<A>>, Either<L, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Map<MEither<L, Lst<B>>, Either<L, Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Either<L, Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Lst<A>>, Either<L, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Either<L, Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Lst<A>>, Either<L, Lst<A>>, MLst<A>, Lst<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Either<L, Lst<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Lst<A>>, Either<L, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Either<L, Lst<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Lst<A>>, Either<L, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Either&lt;L, Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Either<L, Lst<A>> ma, Action<A> f) =>
            default(Trans<MEither<L, Lst<A>>, Either<L, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Either&lt;L, Lst&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Either<L, Lst<A>> filterT<L, A>(Either<L, Lst<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEither<L, Lst<A>>, Either<L, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MEither<L, Lst<A>>, Either<L, Lst<A>>, MLst<A>, Lst<A>, A>(ma, 
                    a => pred(a)
                        ? default(MLst<A>).Pure(a)
                        : default(MLst<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Lst&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Either<L, Lst<A>> plusT<NUM, L, A>(Either<L, Lst<A>> x, Either<L, Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Lst&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Either<L, Lst<A>> subtractT<NUM, L, A>(Either<L, Lst<A>> x, Either<L, Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Lst&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Either<L, Lst<A>> productT<NUM, L, A>(Either<L, Lst<A>> x, Either<L, Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Lst&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Either<L, Lst<A>> divideT<NUM, L, A>(Either<L, Lst<A>> x, Either<L, Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Lst&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Either<L, Lst<A>> appendT<SEMI, L, A>(Either<L, Lst<A>> x, Either<L, Lst<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Either<L, Lst<A>> x, Either<L, Lst<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Lst&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Either<L, Lst<A>> x, Either<L, Lst<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Lst<B>> applyT<L, A, B>(Func<A, B> fab, Either<L, Lst<A>> fa) =>
            default(ApplEither<L, Lst<A>, Lst<B>>).Apply(
                 default(MEither<L, Func<Lst<A>, Lst<B>>>).Pure((Lst<A> a) => default(ApplLst< A, B>).Apply(
                     default(MLst< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Lst<B>> applyT<L, A, B>(Either<L, Lst<Func<A, B>>> fab, Either<L, Lst<A>> fa) =>
            default(MEither<L, Lst<Func<A, B>>>).Bind<MEither<L, Lst<B>>, Either<L, Lst<B>>, Lst<B>>(fab, f =>
                default(MEither<L, Lst<A>>).Bind<MEither<L, Lst<B>>, Either<L, Lst<B>>, Lst<B>>(fa, a => 
                    default(MEither<L, Lst<B>>).Pure(default(ApplLst< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Lst&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Either&lt;L, Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Lst&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Either<L, Lst<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Either<L, Lst<A>> fa, Either<L, Lst<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class FinT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Either&lt;L, Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Fin&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Either&lt;L, Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Either<L, Fin<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEither<L, Fin<A>>, Either<L, Fin<A>>, MFin<A>, Fin<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Either&lt;L, Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Fin&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Either&lt;L, Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Either<L, Fin<A>> ma) =>
            default(Trans<MEither<L, Fin<A>>, Either<L, Fin<A>>, MFin<A>, Fin<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Either&lt;L, Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Fin<B>> bindT<L, A, B>(Either<L, Fin<A>> ma, Func<A, Fin<B>> f) =>
            default(Trans<MEither<L, Fin<A>>, Either<L, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MEither<L, Fin<B>>, Either<L, Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Either&lt;L, Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Either&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Either&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Fin<Either<L, B>> traverse<L, A, B>(Either<L, Fin<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Either&lt;L, Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Either&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Fin<Either<L, A>> sequence<L, A>(Either<L, Fin<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Fin<B>> mapT<L, A, B>(Either<L, Fin<A>> ma, Func<A, B> f) =>
            default(Trans<MEither<L, Fin<A>>, Either<L, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Map<MEither<L, Fin<B>>, Either<L, Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Either<L, Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Fin<A>>, Either<L, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Either<L, Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Fin<A>>, Either<L, Fin<A>>, MFin<A>, Fin<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Either<L, Fin<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Fin<A>>, Either<L, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Either<L, Fin<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Fin<A>>, Either<L, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Either&lt;L, Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Either<L, Fin<A>> ma, Action<A> f) =>
            default(Trans<MEither<L, Fin<A>>, Either<L, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Either&lt;L, Fin&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Either<L, Fin<A>> filterT<L, A>(Either<L, Fin<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEither<L, Fin<A>>, Either<L, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MEither<L, Fin<A>>, Either<L, Fin<A>>, MFin<A>, Fin<A>, A>(ma, 
                    a => pred(a)
                        ? default(MFin<A>).Pure(a)
                        : default(MFin<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Fin&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Either<L, Fin<A>> plusT<NUM, L, A>(Either<L, Fin<A>> x, Either<L, Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Fin&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Either<L, Fin<A>> subtractT<NUM, L, A>(Either<L, Fin<A>> x, Either<L, Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Fin&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Either<L, Fin<A>> productT<NUM, L, A>(Either<L, Fin<A>> x, Either<L, Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Fin&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Either<L, Fin<A>> divideT<NUM, L, A>(Either<L, Fin<A>> x, Either<L, Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Fin&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Either<L, Fin<A>> appendT<SEMI, L, A>(Either<L, Fin<A>> x, Either<L, Fin<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Either<L, Fin<A>> x, Either<L, Fin<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Fin&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Either<L, Fin<A>> x, Either<L, Fin<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Fin<B>> applyT<L, A, B>(Func<A, B> fab, Either<L, Fin<A>> fa) =>
            default(ApplEither<L, Fin<A>, Fin<B>>).Apply(
                 default(MEither<L, Func<Fin<A>, Fin<B>>>).Pure((Fin<A> a) => default(ApplFin< A, B>).Apply(
                     default(MFin< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Fin<B>> applyT<L, A, B>(Either<L, Fin<Func<A, B>>> fab, Either<L, Fin<A>> fa) =>
            default(MEither<L, Fin<Func<A, B>>>).Bind<MEither<L, Fin<B>>, Either<L, Fin<B>>, Fin<B>>(fab, f =>
                default(MEither<L, Fin<A>>).Bind<MEither<L, Fin<B>>, Either<L, Fin<B>>, Fin<B>>(fa, a => 
                    default(MEither<L, Fin<B>>).Pure(default(ApplFin< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Fin&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Either&lt;L, Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Fin&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Either<L, Fin<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Either<L, Fin<A>> fa, Either<L, Fin<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Either&lt;L, Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Option&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Either&lt;L, Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Either<L, Option<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEither<L, Option<A>>, Either<L, Option<A>>, MOption<A>, Option<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Either&lt;L, Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Option&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Either&lt;L, Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Either<L, Option<A>> ma) =>
            default(Trans<MEither<L, Option<A>>, Either<L, Option<A>>, MOption<A>, Option<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Either&lt;L, Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Option<B>> bindT<L, A, B>(Either<L, Option<A>> ma, Func<A, Option<B>> f) =>
            default(Trans<MEither<L, Option<A>>, Either<L, Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MEither<L, Option<B>>, Either<L, Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Either&lt;L, Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Either&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Either&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Option<Either<L, B>> traverse<L, A, B>(Either<L, Option<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Either&lt;L, Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Either&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Option<Either<L, A>> sequence<L, A>(Either<L, Option<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Option<B>> mapT<L, A, B>(Either<L, Option<A>> ma, Func<A, B> f) =>
            default(Trans<MEither<L, Option<A>>, Either<L, Option<A>>, MOption<A>, Option<A>, A>)
                .Map<MEither<L, Option<B>>, Either<L, Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Either<L, Option<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Option<A>>, Either<L, Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Either<L, Option<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Option<A>>, Either<L, Option<A>>, MOption<A>, Option<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Either<L, Option<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Option<A>>, Either<L, Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Either<L, Option<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Option<A>>, Either<L, Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Either&lt;L, Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Either<L, Option<A>> ma, Action<A> f) =>
            default(Trans<MEither<L, Option<A>>, Either<L, Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Either&lt;L, Option&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Either<L, Option<A>> filterT<L, A>(Either<L, Option<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEither<L, Option<A>>, Either<L, Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MEither<L, Option<A>>, Either<L, Option<A>>, MOption<A>, Option<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOption<A>).Pure(a)
                        : default(MOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Option&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Either<L, Option<A>> plusT<NUM, L, A>(Either<L, Option<A>> x, Either<L, Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Option&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Either<L, Option<A>> subtractT<NUM, L, A>(Either<L, Option<A>> x, Either<L, Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Option&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Either<L, Option<A>> productT<NUM, L, A>(Either<L, Option<A>> x, Either<L, Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Option&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Either<L, Option<A>> divideT<NUM, L, A>(Either<L, Option<A>> x, Either<L, Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Option&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Either<L, Option<A>> appendT<SEMI, L, A>(Either<L, Option<A>> x, Either<L, Option<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Either<L, Option<A>> x, Either<L, Option<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Option&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Either<L, Option<A>> x, Either<L, Option<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Option&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Option<B>> applyT<L, A, B>(Func<A, B> fab, Either<L, Option<A>> fa) =>
            default(ApplEither<L, Option<A>, Option<B>>).Apply(
                 default(MEither<L, Func<Option<A>, Option<B>>>).Pure((Option<A> a) => default(ApplOption< A, B>).Apply(
                     default(MOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Option&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Option<B>> applyT<L, A, B>(Either<L, Option<Func<A, B>>> fab, Either<L, Option<A>> fa) =>
            default(MEither<L, Option<Func<A, B>>>).Bind<MEither<L, Option<B>>, Either<L, Option<B>>, Option<B>>(fab, f =>
                default(MEither<L, Option<A>>).Bind<MEither<L, Option<B>>, Either<L, Option<B>>, Option<B>>(fa, a => 
                    default(MEither<L, Option<B>>).Pure(default(ApplOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Option&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Either&lt;L, Option&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Option&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Either<L, Option<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Either<L, Option<A>> fa, Either<L, Option<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Either<L, OptionUnsafe<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEither<L, OptionUnsafe<A>>, Either<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Either<L, OptionUnsafe<A>> ma) =>
            default(Trans<MEither<L, OptionUnsafe<A>>, Either<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Either&lt;L, OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, OptionUnsafe<B>> bindT<L, A, B>(Either<L, OptionUnsafe<A>> ma, Func<A, OptionUnsafe<B>> f) =>
            default(Trans<MEither<L, OptionUnsafe<A>>, Either<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MEither<L, OptionUnsafe<B>>, Either<L, OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Either&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Either&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Either<L, B>> traverse<L, A, B>(Either<L, OptionUnsafe<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Either&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Either<L, A>> sequence<L, A>(Either<L, OptionUnsafe<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, OptionUnsafe<B>> mapT<L, A, B>(Either<L, OptionUnsafe<A>> ma, Func<A, B> f) =>
            default(Trans<MEither<L, OptionUnsafe<A>>, Either<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Map<MEither<L, OptionUnsafe<B>>, Either<L, OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Either<L, OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, OptionUnsafe<A>>, Either<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Either<L, OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, OptionUnsafe<A>>, Either<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Either<L, OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, OptionUnsafe<A>>, Either<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Either<L, OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, OptionUnsafe<A>>, Either<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Either<L, OptionUnsafe<A>> ma, Action<A> f) =>
            default(Trans<MEither<L, OptionUnsafe<A>>, Either<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Either<L, OptionUnsafe<A>> filterT<L, A>(Either<L, OptionUnsafe<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEither<L, OptionUnsafe<A>>, Either<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MEither<L, OptionUnsafe<A>>, Either<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOptionUnsafe<A>).Pure(a)
                        : default(MOptionUnsafe<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Either<L, OptionUnsafe<A>> plusT<NUM, L, A>(Either<L, OptionUnsafe<A>> x, Either<L, OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Either<L, OptionUnsafe<A>> subtractT<NUM, L, A>(Either<L, OptionUnsafe<A>> x, Either<L, OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Either<L, OptionUnsafe<A>> productT<NUM, L, A>(Either<L, OptionUnsafe<A>> x, Either<L, OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Either<L, OptionUnsafe<A>> divideT<NUM, L, A>(Either<L, OptionUnsafe<A>> x, Either<L, OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Either<L, OptionUnsafe<A>> appendT<SEMI, L, A>(Either<L, OptionUnsafe<A>> x, Either<L, OptionUnsafe<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Either<L, OptionUnsafe<A>> x, Either<L, OptionUnsafe<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Either<L, OptionUnsafe<A>> x, Either<L, OptionUnsafe<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, OptionUnsafe<B>> applyT<L, A, B>(Func<A, B> fab, Either<L, OptionUnsafe<A>> fa) =>
            default(ApplEither<L, OptionUnsafe<A>, OptionUnsafe<B>>).Apply(
                 default(MEither<L, Func<OptionUnsafe<A>, OptionUnsafe<B>>>).Pure((OptionUnsafe<A> a) => default(ApplOptionUnsafe< A, B>).Apply(
                     default(MOptionUnsafe< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, OptionUnsafe<B>> applyT<L, A, B>(Either<L, OptionUnsafe<Func<A, B>>> fab, Either<L, OptionUnsafe<A>> fa) =>
            default(MEither<L, OptionUnsafe<Func<A, B>>>).Bind<MEither<L, OptionUnsafe<B>>, Either<L, OptionUnsafe<B>>, OptionUnsafe<B>>(fab, f =>
                default(MEither<L, OptionUnsafe<A>>).Bind<MEither<L, OptionUnsafe<B>>, Either<L, OptionUnsafe<B>>, OptionUnsafe<B>>(fa, a => 
                    default(MEither<L, OptionUnsafe<B>>).Pure(default(ApplOptionUnsafe< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Either&lt;L, OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Either<L, OptionUnsafe<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Either<L, OptionUnsafe<A>> fa, Either<L, OptionUnsafe<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Either&lt;L, Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Either&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Either&lt;L, Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Either<L, Either<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEither<L, Either<L, A>>, Either<L, Either<L, A>>, MEither<L, A>, Either<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Either&lt;L, Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Either&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Either&lt;L, Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Either<L, Either<L, A>> ma) =>
            default(Trans<MEither<L, Either<L, A>>, Either<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Either&lt;L, Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Either<L, B>> bindT<L, A, B>(Either<L, Either<L, A>> ma, Func<A, Either<L, B>> f) =>
            default(Trans<MEither<L, Either<L, A>>, Either<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MEither<L, Either<L, B>>, Either<L, Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Either&lt;L, Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Either&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Either&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Either<L, B>> traverse<L, A, B>(Either<L, Either<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Either&lt;L, Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Either&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Either<L, A>> sequence<L, A>(Either<L, Either<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Either<L, B>> mapT<L, A, B>(Either<L, Either<L, A>> ma, Func<A, B> f) =>
            default(Trans<MEither<L, Either<L, A>>, Either<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Map<MEither<L, Either<L, B>>, Either<L, Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Either<L, Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Either<L, A>>, Either<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Either<L, Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Either<L, A>>, Either<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Either<L, Either<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Either<L, A>>, Either<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Either<L, Either<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Either<L, A>>, Either<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Either&lt;L, Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Either<L, Either<L, A>> ma, Action<A> f) =>
            default(Trans<MEither<L, Either<L, A>>, Either<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Either&lt;L, Either&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Either<L, Either<L, A>> filterT<L, A>(Either<L, Either<L, A>> ma, Func<A, bool> pred) =>
            default(Trans<MEither<L, Either<L, A>>, Either<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MEither<L, Either<L, A>>, Either<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEither<L, A>).Pure(a)
                        : default(MEither<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Either&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Either<L, Either<L, A>> plusT<NUM, L, A>(Either<L, Either<L, A>> x, Either<L, Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Either&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Either<L, Either<L, A>> subtractT<NUM, L, A>(Either<L, Either<L, A>> x, Either<L, Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Either&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Either<L, Either<L, A>> productT<NUM, L, A>(Either<L, Either<L, A>> x, Either<L, Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Either&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Either<L, Either<L, A>> divideT<NUM, L, A>(Either<L, Either<L, A>> x, Either<L, Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Either&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Either<L, Either<L, A>> appendT<SEMI, L, A>(Either<L, Either<L, A>> x, Either<L, Either<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Either<L, Either<L, A>> x, Either<L, Either<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Either&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Either<L, Either<L, A>> x, Either<L, Either<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Either<L, B>> applyT<L, A, B>(Func<A, B> fab, Either<L, Either<L, A>> fa) =>
            default(ApplEither<L, Either<L, A>, Either<L, B>>).Apply(
                 default(MEither<L, Func<Either<L, A>, Either<L, B>>>).Pure((Either<L, A> a) => default(ApplEither<L, A, B>).Apply(
                     default(MEither<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Either<L, B>> applyT<L, A, B>(Either<L, Either<L, Func<A, B>>> fab, Either<L, Either<L, A>> fa) =>
            default(MEither<L, Either<L, Func<A, B>>>).Bind<MEither<L, Either<L, B>>, Either<L, Either<L, B>>, Either<L, B>>(fab, f =>
                default(MEither<L, Either<L, A>>).Bind<MEither<L, Either<L, B>>, Either<L, Either<L, B>>, Either<L, B>>(fa, a => 
                    default(MEither<L, Either<L, B>>).Pure(default(ApplEither<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Either&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Either&lt;L, Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Either&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Either<L, Either<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Either<L, Either<L, A>> fa, Either<L, Either<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Either<L, EitherUnsafe<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEither<L, EitherUnsafe<L, A>>, Either<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Either<L, EitherUnsafe<L, A>> ma) =>
            default(Trans<MEither<L, EitherUnsafe<L, A>>, Either<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, EitherUnsafe<L, B>> bindT<L, A, B>(Either<L, EitherUnsafe<L, A>> ma, Func<A, EitherUnsafe<L, B>> f) =>
            default(Trans<MEither<L, EitherUnsafe<L, A>>, Either<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MEither<L, EitherUnsafe<L, B>>, Either<L, EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Either&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Either&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Either<L, B>> traverse<L, A, B>(Either<L, EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Either<L, A>> sequence<L, A>(Either<L, EitherUnsafe<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, EitherUnsafe<L, B>> mapT<L, A, B>(Either<L, EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            default(Trans<MEither<L, EitherUnsafe<L, A>>, Either<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Map<MEither<L, EitherUnsafe<L, B>>, Either<L, EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Either<L, EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, EitherUnsafe<L, A>>, Either<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Either<L, EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, EitherUnsafe<L, A>>, Either<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Either<L, EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, EitherUnsafe<L, A>>, Either<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Either<L, EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, EitherUnsafe<L, A>>, Either<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Either<L, EitherUnsafe<L, A>> ma, Action<A> f) =>
            default(Trans<MEither<L, EitherUnsafe<L, A>>, Either<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Either<L, EitherUnsafe<L, A>> filterT<L, A>(Either<L, EitherUnsafe<L, A>> ma, Func<A, bool> pred) =>
            default(Trans<MEither<L, EitherUnsafe<L, A>>, Either<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MEither<L, EitherUnsafe<L, A>>, Either<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEitherUnsafe<L, A>).Pure(a)
                        : default(MEitherUnsafe<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Either<L, EitherUnsafe<L, A>> plusT<NUM, L, A>(Either<L, EitherUnsafe<L, A>> x, Either<L, EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Either<L, EitherUnsafe<L, A>> subtractT<NUM, L, A>(Either<L, EitherUnsafe<L, A>> x, Either<L, EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Either<L, EitherUnsafe<L, A>> productT<NUM, L, A>(Either<L, EitherUnsafe<L, A>> x, Either<L, EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Either<L, EitherUnsafe<L, A>> divideT<NUM, L, A>(Either<L, EitherUnsafe<L, A>> x, Either<L, EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Either<L, EitherUnsafe<L, A>> appendT<SEMI, L, A>(Either<L, EitherUnsafe<L, A>> x, Either<L, EitherUnsafe<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Either<L, EitherUnsafe<L, A>> x, Either<L, EitherUnsafe<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Either<L, EitherUnsafe<L, A>> x, Either<L, EitherUnsafe<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, EitherUnsafe<L, B>> applyT<L, A, B>(Func<A, B> fab, Either<L, EitherUnsafe<L, A>> fa) =>
            default(ApplEither<L, EitherUnsafe<L, A>, EitherUnsafe<L, B>>).Apply(
                 default(MEither<L, Func<EitherUnsafe<L, A>, EitherUnsafe<L, B>>>).Pure((EitherUnsafe<L, A> a) => default(ApplEitherUnsafe<L, A, B>).Apply(
                     default(MEitherUnsafe<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, EitherUnsafe<L, B>> applyT<L, A, B>(Either<L, EitherUnsafe<L, Func<A, B>>> fab, Either<L, EitherUnsafe<L, A>> fa) =>
            default(MEither<L, EitherUnsafe<L, Func<A, B>>>).Bind<MEither<L, EitherUnsafe<L, B>>, Either<L, EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fab, f =>
                default(MEither<L, EitherUnsafe<L, A>>).Bind<MEither<L, EitherUnsafe<L, B>>, Either<L, EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fa, a => 
                    default(MEither<L, EitherUnsafe<L, B>>).Pure(default(ApplEitherUnsafe<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Either<L, EitherUnsafe<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Either<L, EitherUnsafe<L, A>> fa, Either<L, EitherUnsafe<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Either&lt;L, Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Try&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Either&lt;L, Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Either<L, Try<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEither<L, Try<A>>, Either<L, Try<A>>, MTry<A>, Try<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Either&lt;L, Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Try&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Either&lt;L, Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Either<L, Try<A>> ma) =>
            default(Trans<MEither<L, Try<A>>, Either<L, Try<A>>, MTry<A>, Try<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Either&lt;L, Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Try<B>> bindT<L, A, B>(Either<L, Try<A>> ma, Func<A, Try<B>> f) =>
            default(Trans<MEither<L, Try<A>>, Either<L, Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MEither<L, Try<B>>, Either<L, Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Either&lt;L, Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Either&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Either&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Try<Either<L, B>> traverse<L, A, B>(Either<L, Try<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Either&lt;L, Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Either&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Try<Either<L, A>> sequence<L, A>(Either<L, Try<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Try<B>> mapT<L, A, B>(Either<L, Try<A>> ma, Func<A, B> f) =>
            default(Trans<MEither<L, Try<A>>, Either<L, Try<A>>, MTry<A>, Try<A>, A>)
                .Map<MEither<L, Try<B>>, Either<L, Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Either<L, Try<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Try<A>>, Either<L, Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Either<L, Try<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Try<A>>, Either<L, Try<A>>, MTry<A>, Try<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Either<L, Try<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Try<A>>, Either<L, Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Either<L, Try<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Try<A>>, Either<L, Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Either&lt;L, Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Either<L, Try<A>> ma, Action<A> f) =>
            default(Trans<MEither<L, Try<A>>, Either<L, Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Either&lt;L, Try&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Either<L, Try<A>> filterT<L, A>(Either<L, Try<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEither<L, Try<A>>, Either<L, Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MEither<L, Try<A>>, Either<L, Try<A>>, MTry<A>, Try<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTry<A>).Pure(a)
                        : default(MTry<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Try&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Either<L, Try<A>> plusT<NUM, L, A>(Either<L, Try<A>> x, Either<L, Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Try&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Either<L, Try<A>> subtractT<NUM, L, A>(Either<L, Try<A>> x, Either<L, Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Try&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Either<L, Try<A>> productT<NUM, L, A>(Either<L, Try<A>> x, Either<L, Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Try&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Either<L, Try<A>> divideT<NUM, L, A>(Either<L, Try<A>> x, Either<L, Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Try&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Either<L, Try<A>> appendT<SEMI, L, A>(Either<L, Try<A>> x, Either<L, Try<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Either<L, Try<A>> x, Either<L, Try<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Try&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Either<L, Try<A>> x, Either<L, Try<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Try&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Try<B>> applyT<L, A, B>(Func<A, B> fab, Either<L, Try<A>> fa) =>
            default(ApplEither<L, Try<A>, Try<B>>).Apply(
                 default(MEither<L, Func<Try<A>, Try<B>>>).Pure((Try<A> a) => default(ApplTry< A, B>).Apply(
                     default(MTry< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Try&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Try<B>> applyT<L, A, B>(Either<L, Try<Func<A, B>>> fab, Either<L, Try<A>> fa) =>
            default(MEither<L, Try<Func<A, B>>>).Bind<MEither<L, Try<B>>, Either<L, Try<B>>, Try<B>>(fab, f =>
                default(MEither<L, Try<A>>).Bind<MEither<L, Try<B>>, Either<L, Try<B>>, Try<B>>(fa, a => 
                    default(MEither<L, Try<B>>).Pure(default(ApplTry< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Try&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Either&lt;L, Try&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Try&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Either<L, Try<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Either<L, Try<A>> fa, Either<L, Try<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryOptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Either&lt;L, TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, TryOption&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Either&lt;L, TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Either<L, TryOption<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEither<L, TryOption<A>>, Either<L, TryOption<A>>, MTryOption<A>, TryOption<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Either&lt;L, TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, TryOption&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Either&lt;L, TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Either<L, TryOption<A>> ma) =>
            default(Trans<MEither<L, TryOption<A>>, Either<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Either&lt;L, TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, TryOption<B>> bindT<L, A, B>(Either<L, TryOption<A>> ma, Func<A, TryOption<B>> f) =>
            default(Trans<MEither<L, TryOption<A>>, Either<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MEither<L, TryOption<B>>, Either<L, TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Either&lt;L, TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Either&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Either&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Either<L, B>> traverse<L, A, B>(Either<L, TryOption<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Either&lt;L, TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Either&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Either<L, A>> sequence<L, A>(Either<L, TryOption<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, TryOption<B>> mapT<L, A, B>(Either<L, TryOption<A>> ma, Func<A, B> f) =>
            default(Trans<MEither<L, TryOption<A>>, Either<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Map<MEither<L, TryOption<B>>, Either<L, TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Either<L, TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, TryOption<A>>, Either<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Either<L, TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, TryOption<A>>, Either<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Either<L, TryOption<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, TryOption<A>>, Either<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Either<L, TryOption<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, TryOption<A>>, Either<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Either&lt;L, TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Either<L, TryOption<A>> ma, Action<A> f) =>
            default(Trans<MEither<L, TryOption<A>>, Either<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Either&lt;L, TryOption&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Either<L, TryOption<A>> filterT<L, A>(Either<L, TryOption<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEither<L, TryOption<A>>, Either<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MEither<L, TryOption<A>>, Either<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTryOption<A>).Pure(a)
                        : default(MTryOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, TryOption&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Either<L, TryOption<A>> plusT<NUM, L, A>(Either<L, TryOption<A>> x, Either<L, TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, TryOption&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Either<L, TryOption<A>> subtractT<NUM, L, A>(Either<L, TryOption<A>> x, Either<L, TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, TryOption&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Either<L, TryOption<A>> productT<NUM, L, A>(Either<L, TryOption<A>> x, Either<L, TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, TryOption&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Either<L, TryOption<A>> divideT<NUM, L, A>(Either<L, TryOption<A>> x, Either<L, TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, TryOption&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Either<L, TryOption<A>> appendT<SEMI, L, A>(Either<L, TryOption<A>> x, Either<L, TryOption<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Either<L, TryOption<A>> x, Either<L, TryOption<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, TryOption&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Either<L, TryOption<A>> x, Either<L, TryOption<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, TryOption<B>> applyT<L, A, B>(Func<A, B> fab, Either<L, TryOption<A>> fa) =>
            default(ApplEither<L, TryOption<A>, TryOption<B>>).Apply(
                 default(MEither<L, Func<TryOption<A>, TryOption<B>>>).Pure((TryOption<A> a) => default(ApplTryOption< A, B>).Apply(
                     default(MTryOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, TryOption<B>> applyT<L, A, B>(Either<L, TryOption<Func<A, B>>> fab, Either<L, TryOption<A>> fa) =>
            default(MEither<L, TryOption<Func<A, B>>>).Bind<MEither<L, TryOption<B>>, Either<L, TryOption<B>>, TryOption<B>>(fab, f =>
                default(MEither<L, TryOption<A>>).Bind<MEither<L, TryOption<B>>, Either<L, TryOption<B>>, TryOption<B>>(fa, a => 
                    default(MEither<L, TryOption<B>>).Pure(default(ApplTryOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, TryOption&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Either&lt;L, TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, TryOption&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Either<L, TryOption<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Either<L, TryOption<A>> fa, Either<L, TryOption<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class IEnumerableT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Either&lt;L, IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Either&lt;L, IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Either<L, IEnumerable<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEither<L, IEnumerable<A>>, Either<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Either&lt;L, IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Either&lt;L, IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Either<L, IEnumerable<A>> ma) =>
            default(Trans<MEither<L, IEnumerable<A>>, Either<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Either&lt;L, IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, IEnumerable<B>> bindT<L, A, B>(Either<L, IEnumerable<A>> ma, Func<A, IEnumerable<B>> f) =>
            default(Trans<MEither<L, IEnumerable<A>>, Either<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MEither<L, IEnumerable<B>>, Either<L, IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Either&lt;L, IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Either&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Either&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Either<L, B>> traverse<L, A, B>(Either<L, IEnumerable<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Either&lt;L, IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Either&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Either<L, A>> sequence<L, A>(Either<L, IEnumerable<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, IEnumerable<B>> mapT<L, A, B>(Either<L, IEnumerable<A>> ma, Func<A, B> f) =>
            default(Trans<MEither<L, IEnumerable<A>>, Either<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Map<MEither<L, IEnumerable<B>>, Either<L, IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Either<L, IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, IEnumerable<A>>, Either<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Either<L, IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, IEnumerable<A>>, Either<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Either<L, IEnumerable<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, IEnumerable<A>>, Either<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Either<L, IEnumerable<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, IEnumerable<A>>, Either<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Either&lt;L, IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Either<L, IEnumerable<A>> ma, Action<A> f) =>
            default(Trans<MEither<L, IEnumerable<A>>, Either<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Either&lt;L, IEnumerable&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Either<L, IEnumerable<A>> filterT<L, A>(Either<L, IEnumerable<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEither<L, IEnumerable<A>>, Either<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MEither<L, IEnumerable<A>>, Either<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>(ma, 
                    a => pred(a)
                        ? default(MEnumerable<A>).Pure(a)
                        : default(MEnumerable<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, IEnumerable&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Either<L, IEnumerable<A>> plusT<NUM, L, A>(Either<L, IEnumerable<A>> x, Either<L, IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, IEnumerable&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Either<L, IEnumerable<A>> subtractT<NUM, L, A>(Either<L, IEnumerable<A>> x, Either<L, IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, IEnumerable&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Either<L, IEnumerable<A>> productT<NUM, L, A>(Either<L, IEnumerable<A>> x, Either<L, IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, IEnumerable&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Either<L, IEnumerable<A>> divideT<NUM, L, A>(Either<L, IEnumerable<A>> x, Either<L, IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, IEnumerable&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Either<L, IEnumerable<A>> appendT<SEMI, L, A>(Either<L, IEnumerable<A>> x, Either<L, IEnumerable<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Either<L, IEnumerable<A>> x, Either<L, IEnumerable<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, IEnumerable&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Either<L, IEnumerable<A>> x, Either<L, IEnumerable<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, IEnumerable<B>> applyT<L, A, B>(Func<A, B> fab, Either<L, IEnumerable<A>> fa) =>
            default(ApplEither<L, IEnumerable<A>, IEnumerable<B>>).Apply(
                 default(MEither<L, Func<IEnumerable<A>, IEnumerable<B>>>).Pure((IEnumerable<A> a) => default(ApplEnumerable< A, B>).Apply(
                     default(MEnumerable< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, IEnumerable<B>> applyT<L, A, B>(Either<L, IEnumerable<Func<A, B>>> fab, Either<L, IEnumerable<A>> fa) =>
            default(MEither<L, IEnumerable<Func<A, B>>>).Bind<MEither<L, IEnumerable<B>>, Either<L, IEnumerable<B>>, IEnumerable<B>>(fab, f =>
                default(MEither<L, IEnumerable<A>>).Bind<MEither<L, IEnumerable<B>>, Either<L, IEnumerable<B>>, IEnumerable<B>>(fa, a => 
                    default(MEither<L, IEnumerable<B>>).Pure(default(ApplEnumerable< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, IEnumerable&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Either&lt;L, IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, IEnumerable&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Either<L, IEnumerable<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Either<L, IEnumerable<A>> fa, Either<L, IEnumerable<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SeqT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Either&lt;L, Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Seq&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Either&lt;L, Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Either<L, Seq<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEither<L, Seq<A>>, Either<L, Seq<A>>, MSeq<A>, Seq<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Either&lt;L, Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Seq&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Either&lt;L, Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Either<L, Seq<A>> ma) =>
            default(Trans<MEither<L, Seq<A>>, Either<L, Seq<A>>, MSeq<A>, Seq<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Either&lt;L, Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Seq<B>> bindT<L, A, B>(Either<L, Seq<A>> ma, Func<A, Seq<B>> f) =>
            default(Trans<MEither<L, Seq<A>>, Either<L, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MEither<L, Seq<B>>, Either<L, Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Either&lt;L, Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Either&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Either&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Seq<Either<L, B>> traverse<L, A, B>(Either<L, Seq<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Either&lt;L, Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Either&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Seq<Either<L, A>> sequence<L, A>(Either<L, Seq<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Seq<B>> mapT<L, A, B>(Either<L, Seq<A>> ma, Func<A, B> f) =>
            default(Trans<MEither<L, Seq<A>>, Either<L, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Map<MEither<L, Seq<B>>, Either<L, Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Either<L, Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Seq<A>>, Either<L, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Either<L, Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Seq<A>>, Either<L, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Either<L, Seq<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Seq<A>>, Either<L, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Either<L, Seq<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Seq<A>>, Either<L, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Either&lt;L, Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Either<L, Seq<A>> ma, Action<A> f) =>
            default(Trans<MEither<L, Seq<A>>, Either<L, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Either&lt;L, Seq&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Either<L, Seq<A>> filterT<L, A>(Either<L, Seq<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEither<L, Seq<A>>, Either<L, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MEither<L, Seq<A>>, Either<L, Seq<A>>, MSeq<A>, Seq<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSeq<A>).Pure(a)
                        : default(MSeq<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Seq&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Either<L, Seq<A>> plusT<NUM, L, A>(Either<L, Seq<A>> x, Either<L, Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Seq&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Either<L, Seq<A>> subtractT<NUM, L, A>(Either<L, Seq<A>> x, Either<L, Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Seq&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Either<L, Seq<A>> productT<NUM, L, A>(Either<L, Seq<A>> x, Either<L, Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Seq&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Either<L, Seq<A>> divideT<NUM, L, A>(Either<L, Seq<A>> x, Either<L, Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Seq&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Either<L, Seq<A>> appendT<SEMI, L, A>(Either<L, Seq<A>> x, Either<L, Seq<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Either<L, Seq<A>> x, Either<L, Seq<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Seq&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Either<L, Seq<A>> x, Either<L, Seq<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Seq<B>> applyT<L, A, B>(Func<A, B> fab, Either<L, Seq<A>> fa) =>
            default(ApplEither<L, Seq<A>, Seq<B>>).Apply(
                 default(MEither<L, Func<Seq<A>, Seq<B>>>).Pure((Seq<A> a) => default(ApplSeq< A, B>).Apply(
                     default(MSeq< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Seq<B>> applyT<L, A, B>(Either<L, Seq<Func<A, B>>> fab, Either<L, Seq<A>> fa) =>
            default(MEither<L, Seq<Func<A, B>>>).Bind<MEither<L, Seq<B>>, Either<L, Seq<B>>, Seq<B>>(fab, f =>
                default(MEither<L, Seq<A>>).Bind<MEither<L, Seq<B>>, Either<L, Seq<B>>, Seq<B>>(fa, a => 
                    default(MEither<L, Seq<B>>).Pure(default(ApplSeq< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Seq&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Either&lt;L, Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Seq&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Either<L, Seq<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Either<L, Seq<A>> fa, Either<L, Seq<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Either&lt;L, Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Set&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Either&lt;L, Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Either<L, Set<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEither<L, Set<A>>, Either<L, Set<A>>, MSet<A>, Set<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Either&lt;L, Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Set&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Either&lt;L, Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Either<L, Set<A>> ma) =>
            default(Trans<MEither<L, Set<A>>, Either<L, Set<A>>, MSet<A>, Set<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Either&lt;L, Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Set<B>> bindT<L, A, B>(Either<L, Set<A>> ma, Func<A, Set<B>> f) =>
            default(Trans<MEither<L, Set<A>>, Either<L, Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MEither<L, Set<B>>, Either<L, Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Either&lt;L, Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Either&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Either&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Set<Either<L, B>> traverse<L, A, B>(Either<L, Set<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Either&lt;L, Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Either&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Set<Either<L, A>> sequence<L, A>(Either<L, Set<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Set<B>> mapT<L, A, B>(Either<L, Set<A>> ma, Func<A, B> f) =>
            default(Trans<MEither<L, Set<A>>, Either<L, Set<A>>, MSet<A>, Set<A>, A>)
                .Map<MEither<L, Set<B>>, Either<L, Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Either<L, Set<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Set<A>>, Either<L, Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Either<L, Set<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Set<A>>, Either<L, Set<A>>, MSet<A>, Set<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Either<L, Set<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Set<A>>, Either<L, Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Either<L, Set<A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Set<A>>, Either<L, Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Either&lt;L, Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Either<L, Set<A>> ma, Action<A> f) =>
            default(Trans<MEither<L, Set<A>>, Either<L, Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Either&lt;L, Set&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Either<L, Set<A>> filterT<L, A>(Either<L, Set<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEither<L, Set<A>>, Either<L, Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MEither<L, Set<A>>, Either<L, Set<A>>, MSet<A>, Set<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSet<A>).Pure(a)
                        : default(MSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Set&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Either<L, Set<A>> plusT<NUM, L, A>(Either<L, Set<A>> x, Either<L, Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Set&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Either<L, Set<A>> subtractT<NUM, L, A>(Either<L, Set<A>> x, Either<L, Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Set&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Either<L, Set<A>> productT<NUM, L, A>(Either<L, Set<A>> x, Either<L, Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Set&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Either<L, Set<A>> divideT<NUM, L, A>(Either<L, Set<A>> x, Either<L, Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Set&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Either<L, Set<A>> appendT<SEMI, L, A>(Either<L, Set<A>> x, Either<L, Set<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Either<L, Set<A>> x, Either<L, Set<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Set&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Either<L, Set<A>> x, Either<L, Set<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Set&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Set<B>> applyT<L, A, B>(Func<A, B> fab, Either<L, Set<A>> fa) =>
            default(ApplEither<L, Set<A>, Set<B>>).Apply(
                 default(MEither<L, Func<Set<A>, Set<B>>>).Pure((Set<A> a) => default(ApplSet< A, B>).Apply(
                     default(MSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Set&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Set<B>> applyT<L, A, B>(Either<L, Set<Func<A, B>>> fab, Either<L, Set<A>> fa) =>
            default(MEither<L, Set<Func<A, B>>>).Bind<MEither<L, Set<B>>, Either<L, Set<B>>, Set<B>>(fab, f =>
                default(MEither<L, Set<A>>).Bind<MEither<L, Set<B>>, Either<L, Set<B>>, Set<B>>(fa, a => 
                    default(MEither<L, Set<B>>).Pure(default(ApplSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Set&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Either&lt;L, Set&lt;A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Set&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Either<L, Set<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Either<L, Set<A>> fa, Either<L, Set<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ValidationT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, FAIL, A>(Either<L, Validation<FAIL, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEither<L, Validation<FAIL, A>>, Either<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, FAIL, A>(Either<L, Validation<FAIL, A>> ma) =>
            default(Trans<MEither<L, Validation<FAIL, A>>, Either<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Either&lt;L, Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Validation<FAIL, B>> bindT<L, FAIL, A, B>(Either<L, Validation<FAIL, A>> ma, Func<A, Validation<FAIL, B>> f) =>
            default(Trans<MEither<L, Validation<FAIL, A>>, Either<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MEither<L, Validation<FAIL, B>>, Either<L, Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Either&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Either&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Either<L, B>> traverse<L, FAIL, A, B>(Either<L, Validation<FAIL, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Either<L, A>> sequence<L, FAIL, A>(Either<L, Validation<FAIL, A>> ma) =>
            ma.Traverse<L, FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Either<L, Validation<FAIL, B>> mapT<L, FAIL, A, B>(Either<L, Validation<FAIL, A>> ma, Func<A, B> f) =>
            default(Trans<MEither<L, Validation<FAIL, A>>, Either<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Map<MEither<L, Validation<FAIL, B>>, Either<L, Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, FAIL, A>(Either<L, Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Validation<FAIL, A>>, Either<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, FAIL, A>(Either<L, Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEither<L, Validation<FAIL, A>>, Either<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, FAIL, A>(Either<L, Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Validation<FAIL, A>>, Either<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, FAIL, A>(Either<L, Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(Trans<MEither<L, Validation<FAIL, A>>, Either<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, FAIL, A>(Either<L, Validation<FAIL, A>> ma, Action<A> f) =>
            default(Trans<MEither<L, Validation<FAIL, A>>, Either<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Either<L, Validation<FAIL, A>> filterT<L, FAIL, A>(Either<L, Validation<FAIL, A>> ma, Func<A, bool> pred) =>
            default(Trans<MEither<L, Validation<FAIL, A>>, Either<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MEither<L, Validation<FAIL, A>>, Either<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>(ma, 
                    a => pred(a)
                        ? default(MValidation<FAIL, A>).Pure(a)
                        : default(MValidation<FAIL, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Either<L, Validation<FAIL, A>> plusT<NUM, L, FAIL, A>(Either<L, Validation<FAIL, A>> x, Either<L, Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Either<L, Validation<FAIL, A>> subtractT<NUM, L, FAIL, A>(Either<L, Validation<FAIL, A>> x, Either<L, Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Either<L, Validation<FAIL, A>> productT<NUM, L, FAIL, A>(Either<L, Validation<FAIL, A>> x, Either<L, Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Either<L, Validation<FAIL, A>> divideT<NUM, L, FAIL, A>(Either<L, Validation<FAIL, A>> x, Either<L, Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Either<L, Validation<FAIL, A>> appendT<SEMI, L, FAIL, A>(Either<L, Validation<FAIL, A>> x, Either<L, Validation<FAIL, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, FAIL, A>(Either<L, Validation<FAIL, A>> x, Either<L, Validation<FAIL, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Either&lt;L, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, FAIL, A>(Either<L, Validation<FAIL, A>> x, Either<L, Validation<FAIL, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Validation<FAIL, B>> applyT<L, FAIL, A, B>(Func<A, B> fab, Either<L, Validation<FAIL, A>> fa) =>
            default(ApplEither<L, Validation<FAIL, A>, Validation<FAIL, B>>).Apply(
                 default(MEither<L, Func<Validation<FAIL, A>, Validation<FAIL, B>>>).Pure((Validation<FAIL, A> a) => default(ApplValidation<FAIL, A, B>).Apply(
                     default(MValidation<FAIL, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Either<L, Validation<FAIL, B>> applyT<L, FAIL, A, B>(Either<L, Validation<FAIL, Func<A, B>>> fab, Either<L, Validation<FAIL, A>> fa) =>
            default(MEither<L, Validation<FAIL, Func<A, B>>>).Bind<MEither<L, Validation<FAIL, B>>, Either<L, Validation<FAIL, B>>, Validation<FAIL, B>>(fab, f =>
                default(MEither<L, Validation<FAIL, A>>).Bind<MEither<L, Validation<FAIL, B>>, Either<L, Validation<FAIL, B>>, Validation<FAIL, B>>(fa, a => 
                    default(MEither<L, Validation<FAIL, B>>).Pure(default(ApplValidation<FAIL, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Either&lt;L, Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Either<L, Validation<FAIL, C>> applyT<L, FAIL, A, B, C>(Func<A, B, C> fabc, Either<L, Validation<FAIL, A>> fa, Either<L, Validation<FAIL, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ArrT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(EitherUnsafe<L, Arr<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEitherUnsafe<L, Arr<A>>, EitherUnsafe<L, Arr<A>>, MArr<A>, Arr<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(EitherUnsafe<L, Arr<A>> ma) =>
            default(Trans<MEitherUnsafe<L, Arr<A>>, EitherUnsafe<L, Arr<A>>, MArr<A>, Arr<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Arr<B>> bindT<L, A, B>(EitherUnsafe<L, Arr<A>> ma, Func<A, Arr<B>> f) =>
            default(Trans<MEitherUnsafe<L, Arr<A>>, EitherUnsafe<L, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MEitherUnsafe<L, Arr<B>>, EitherUnsafe<L, Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;EitherUnsafe&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Arr<EitherUnsafe<L, B>> traverse<L, A, B>(EitherUnsafe<L, Arr<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Arr<EitherUnsafe<L, A>> sequence<L, A>(EitherUnsafe<L, Arr<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Arr<B>> mapT<L, A, B>(EitherUnsafe<L, Arr<A>> ma, Func<A, B> f) =>
            default(Trans<MEitherUnsafe<L, Arr<A>>, EitherUnsafe<L, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Map<MEitherUnsafe<L, Arr<B>>, EitherUnsafe<L, Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(EitherUnsafe<L, Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Arr<A>>, EitherUnsafe<L, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(EitherUnsafe<L, Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Arr<A>>, EitherUnsafe<L, Arr<A>>, MArr<A>, Arr<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(EitherUnsafe<L, Arr<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Arr<A>>, EitherUnsafe<L, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(EitherUnsafe<L, Arr<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Arr<A>>, EitherUnsafe<L, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(EitherUnsafe<L, Arr<A>> ma, Action<A> f) =>
            default(Trans<MEitherUnsafe<L, Arr<A>>, EitherUnsafe<L, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static EitherUnsafe<L, Arr<A>> filterT<L, A>(EitherUnsafe<L, Arr<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEitherUnsafe<L, Arr<A>>, EitherUnsafe<L, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MEitherUnsafe<L, Arr<A>>, EitherUnsafe<L, Arr<A>>, MArr<A>, Arr<A>, A>(ma, 
                    a => pred(a)
                        ? default(MArr<A>).Pure(a)
                        : default(MArr<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static EitherUnsafe<L, Arr<A>> plusT<NUM, L, A>(EitherUnsafe<L, Arr<A>> x, EitherUnsafe<L, Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static EitherUnsafe<L, Arr<A>> subtractT<NUM, L, A>(EitherUnsafe<L, Arr<A>> x, EitherUnsafe<L, Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static EitherUnsafe<L, Arr<A>> productT<NUM, L, A>(EitherUnsafe<L, Arr<A>> x, EitherUnsafe<L, Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static EitherUnsafe<L, Arr<A>> divideT<NUM, L, A>(EitherUnsafe<L, Arr<A>> x, EitherUnsafe<L, Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static EitherUnsafe<L, Arr<A>> appendT<SEMI, L, A>(EitherUnsafe<L, Arr<A>> x, EitherUnsafe<L, Arr<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(EitherUnsafe<L, Arr<A>> x, EitherUnsafe<L, Arr<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(EitherUnsafe<L, Arr<A>> x, EitherUnsafe<L, Arr<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Arr<B>> applyT<L, A, B>(Func<A, B> fab, EitherUnsafe<L, Arr<A>> fa) =>
            default(ApplEitherUnsafe<L, Arr<A>, Arr<B>>).Apply(
                 default(MEitherUnsafe<L, Func<Arr<A>, Arr<B>>>).Pure((Arr<A> a) => default(ApplArr< A, B>).Apply(
                     default(MArr< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Arr<B>> applyT<L, A, B>(EitherUnsafe<L, Arr<Func<A, B>>> fab, EitherUnsafe<L, Arr<A>> fa) =>
            default(MEitherUnsafe<L, Arr<Func<A, B>>>).Bind<MEitherUnsafe<L, Arr<B>>, EitherUnsafe<L, Arr<B>>, Arr<B>>(fab, f =>
                default(MEitherUnsafe<L, Arr<A>>).Bind<MEitherUnsafe<L, Arr<B>>, EitherUnsafe<L, Arr<B>>, Arr<B>>(fa, a => 
                    default(MEitherUnsafe<L, Arr<B>>).Pure(default(ApplArr< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `EitherUnsafe&lt;L, Arr&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Arr&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static EitherUnsafe<L, Arr<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, EitherUnsafe<L, Arr<A>> fa, EitherUnsafe<L, Arr<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class HashSetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(EitherUnsafe<L, HashSet<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEitherUnsafe<L, HashSet<A>>, EitherUnsafe<L, HashSet<A>>, MHashSet<A>, HashSet<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(EitherUnsafe<L, HashSet<A>> ma) =>
            default(Trans<MEitherUnsafe<L, HashSet<A>>, EitherUnsafe<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, HashSet<B>> bindT<L, A, B>(EitherUnsafe<L, HashSet<A>> ma, Func<A, HashSet<B>> f) =>
            default(Trans<MEitherUnsafe<L, HashSet<A>>, EitherUnsafe<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MEitherUnsafe<L, HashSet<B>>, EitherUnsafe<L, HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;EitherUnsafe&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static HashSet<EitherUnsafe<L, B>> traverse<L, A, B>(EitherUnsafe<L, HashSet<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static HashSet<EitherUnsafe<L, A>> sequence<L, A>(EitherUnsafe<L, HashSet<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, HashSet<B>> mapT<L, A, B>(EitherUnsafe<L, HashSet<A>> ma, Func<A, B> f) =>
            default(Trans<MEitherUnsafe<L, HashSet<A>>, EitherUnsafe<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Map<MEitherUnsafe<L, HashSet<B>>, EitherUnsafe<L, HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(EitherUnsafe<L, HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, HashSet<A>>, EitherUnsafe<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(EitherUnsafe<L, HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, HashSet<A>>, EitherUnsafe<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(EitherUnsafe<L, HashSet<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, HashSet<A>>, EitherUnsafe<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(EitherUnsafe<L, HashSet<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, HashSet<A>>, EitherUnsafe<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(EitherUnsafe<L, HashSet<A>> ma, Action<A> f) =>
            default(Trans<MEitherUnsafe<L, HashSet<A>>, EitherUnsafe<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static EitherUnsafe<L, HashSet<A>> filterT<L, A>(EitherUnsafe<L, HashSet<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEitherUnsafe<L, HashSet<A>>, EitherUnsafe<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MEitherUnsafe<L, HashSet<A>>, EitherUnsafe<L, HashSet<A>>, MHashSet<A>, HashSet<A>, A>(ma, 
                    a => pred(a)
                        ? default(MHashSet<A>).Pure(a)
                        : default(MHashSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static EitherUnsafe<L, HashSet<A>> plusT<NUM, L, A>(EitherUnsafe<L, HashSet<A>> x, EitherUnsafe<L, HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static EitherUnsafe<L, HashSet<A>> subtractT<NUM, L, A>(EitherUnsafe<L, HashSet<A>> x, EitherUnsafe<L, HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static EitherUnsafe<L, HashSet<A>> productT<NUM, L, A>(EitherUnsafe<L, HashSet<A>> x, EitherUnsafe<L, HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static EitherUnsafe<L, HashSet<A>> divideT<NUM, L, A>(EitherUnsafe<L, HashSet<A>> x, EitherUnsafe<L, HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static EitherUnsafe<L, HashSet<A>> appendT<SEMI, L, A>(EitherUnsafe<L, HashSet<A>> x, EitherUnsafe<L, HashSet<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(EitherUnsafe<L, HashSet<A>> x, EitherUnsafe<L, HashSet<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(EitherUnsafe<L, HashSet<A>> x, EitherUnsafe<L, HashSet<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, HashSet<B>> applyT<L, A, B>(Func<A, B> fab, EitherUnsafe<L, HashSet<A>> fa) =>
            default(ApplEitherUnsafe<L, HashSet<A>, HashSet<B>>).Apply(
                 default(MEitherUnsafe<L, Func<HashSet<A>, HashSet<B>>>).Pure((HashSet<A> a) => default(ApplHashSet< A, B>).Apply(
                     default(MHashSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, HashSet<B>> applyT<L, A, B>(EitherUnsafe<L, HashSet<Func<A, B>>> fab, EitherUnsafe<L, HashSet<A>> fa) =>
            default(MEitherUnsafe<L, HashSet<Func<A, B>>>).Bind<MEitherUnsafe<L, HashSet<B>>, EitherUnsafe<L, HashSet<B>>, HashSet<B>>(fab, f =>
                default(MEitherUnsafe<L, HashSet<A>>).Bind<MEitherUnsafe<L, HashSet<B>>, EitherUnsafe<L, HashSet<B>>, HashSet<B>>(fa, a => 
                    default(MEitherUnsafe<L, HashSet<B>>).Pure(default(ApplHashSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `EitherUnsafe&lt;L, HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, HashSet&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static EitherUnsafe<L, HashSet<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, EitherUnsafe<L, HashSet<A>> fa, EitherUnsafe<L, HashSet<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class LstT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(EitherUnsafe<L, Lst<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEitherUnsafe<L, Lst<A>>, EitherUnsafe<L, Lst<A>>, MLst<A>, Lst<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(EitherUnsafe<L, Lst<A>> ma) =>
            default(Trans<MEitherUnsafe<L, Lst<A>>, EitherUnsafe<L, Lst<A>>, MLst<A>, Lst<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Lst<B>> bindT<L, A, B>(EitherUnsafe<L, Lst<A>> ma, Func<A, Lst<B>> f) =>
            default(Trans<MEitherUnsafe<L, Lst<A>>, EitherUnsafe<L, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MEitherUnsafe<L, Lst<B>>, EitherUnsafe<L, Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;EitherUnsafe&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Lst<EitherUnsafe<L, B>> traverse<L, A, B>(EitherUnsafe<L, Lst<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Lst<EitherUnsafe<L, A>> sequence<L, A>(EitherUnsafe<L, Lst<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Lst<B>> mapT<L, A, B>(EitherUnsafe<L, Lst<A>> ma, Func<A, B> f) =>
            default(Trans<MEitherUnsafe<L, Lst<A>>, EitherUnsafe<L, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Map<MEitherUnsafe<L, Lst<B>>, EitherUnsafe<L, Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(EitherUnsafe<L, Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Lst<A>>, EitherUnsafe<L, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(EitherUnsafe<L, Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Lst<A>>, EitherUnsafe<L, Lst<A>>, MLst<A>, Lst<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(EitherUnsafe<L, Lst<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Lst<A>>, EitherUnsafe<L, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(EitherUnsafe<L, Lst<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Lst<A>>, EitherUnsafe<L, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(EitherUnsafe<L, Lst<A>> ma, Action<A> f) =>
            default(Trans<MEitherUnsafe<L, Lst<A>>, EitherUnsafe<L, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static EitherUnsafe<L, Lst<A>> filterT<L, A>(EitherUnsafe<L, Lst<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEitherUnsafe<L, Lst<A>>, EitherUnsafe<L, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MEitherUnsafe<L, Lst<A>>, EitherUnsafe<L, Lst<A>>, MLst<A>, Lst<A>, A>(ma, 
                    a => pred(a)
                        ? default(MLst<A>).Pure(a)
                        : default(MLst<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static EitherUnsafe<L, Lst<A>> plusT<NUM, L, A>(EitherUnsafe<L, Lst<A>> x, EitherUnsafe<L, Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static EitherUnsafe<L, Lst<A>> subtractT<NUM, L, A>(EitherUnsafe<L, Lst<A>> x, EitherUnsafe<L, Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static EitherUnsafe<L, Lst<A>> productT<NUM, L, A>(EitherUnsafe<L, Lst<A>> x, EitherUnsafe<L, Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static EitherUnsafe<L, Lst<A>> divideT<NUM, L, A>(EitherUnsafe<L, Lst<A>> x, EitherUnsafe<L, Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static EitherUnsafe<L, Lst<A>> appendT<SEMI, L, A>(EitherUnsafe<L, Lst<A>> x, EitherUnsafe<L, Lst<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(EitherUnsafe<L, Lst<A>> x, EitherUnsafe<L, Lst<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(EitherUnsafe<L, Lst<A>> x, EitherUnsafe<L, Lst<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Lst<B>> applyT<L, A, B>(Func<A, B> fab, EitherUnsafe<L, Lst<A>> fa) =>
            default(ApplEitherUnsafe<L, Lst<A>, Lst<B>>).Apply(
                 default(MEitherUnsafe<L, Func<Lst<A>, Lst<B>>>).Pure((Lst<A> a) => default(ApplLst< A, B>).Apply(
                     default(MLst< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Lst<B>> applyT<L, A, B>(EitherUnsafe<L, Lst<Func<A, B>>> fab, EitherUnsafe<L, Lst<A>> fa) =>
            default(MEitherUnsafe<L, Lst<Func<A, B>>>).Bind<MEitherUnsafe<L, Lst<B>>, EitherUnsafe<L, Lst<B>>, Lst<B>>(fab, f =>
                default(MEitherUnsafe<L, Lst<A>>).Bind<MEitherUnsafe<L, Lst<B>>, EitherUnsafe<L, Lst<B>>, Lst<B>>(fa, a => 
                    default(MEitherUnsafe<L, Lst<B>>).Pure(default(ApplLst< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `EitherUnsafe&lt;L, Lst&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Lst&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static EitherUnsafe<L, Lst<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, EitherUnsafe<L, Lst<A>> fa, EitherUnsafe<L, Lst<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class FinT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(EitherUnsafe<L, Fin<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEitherUnsafe<L, Fin<A>>, EitherUnsafe<L, Fin<A>>, MFin<A>, Fin<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(EitherUnsafe<L, Fin<A>> ma) =>
            default(Trans<MEitherUnsafe<L, Fin<A>>, EitherUnsafe<L, Fin<A>>, MFin<A>, Fin<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Fin<B>> bindT<L, A, B>(EitherUnsafe<L, Fin<A>> ma, Func<A, Fin<B>> f) =>
            default(Trans<MEitherUnsafe<L, Fin<A>>, EitherUnsafe<L, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MEitherUnsafe<L, Fin<B>>, EitherUnsafe<L, Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;EitherUnsafe&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;EitherUnsafe&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Fin<EitherUnsafe<L, B>> traverse<L, A, B>(EitherUnsafe<L, Fin<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Fin<EitherUnsafe<L, A>> sequence<L, A>(EitherUnsafe<L, Fin<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Fin<B>> mapT<L, A, B>(EitherUnsafe<L, Fin<A>> ma, Func<A, B> f) =>
            default(Trans<MEitherUnsafe<L, Fin<A>>, EitherUnsafe<L, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Map<MEitherUnsafe<L, Fin<B>>, EitherUnsafe<L, Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(EitherUnsafe<L, Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Fin<A>>, EitherUnsafe<L, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(EitherUnsafe<L, Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Fin<A>>, EitherUnsafe<L, Fin<A>>, MFin<A>, Fin<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(EitherUnsafe<L, Fin<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Fin<A>>, EitherUnsafe<L, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(EitherUnsafe<L, Fin<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Fin<A>>, EitherUnsafe<L, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(EitherUnsafe<L, Fin<A>> ma, Action<A> f) =>
            default(Trans<MEitherUnsafe<L, Fin<A>>, EitherUnsafe<L, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static EitherUnsafe<L, Fin<A>> filterT<L, A>(EitherUnsafe<L, Fin<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEitherUnsafe<L, Fin<A>>, EitherUnsafe<L, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MEitherUnsafe<L, Fin<A>>, EitherUnsafe<L, Fin<A>>, MFin<A>, Fin<A>, A>(ma, 
                    a => pred(a)
                        ? default(MFin<A>).Pure(a)
                        : default(MFin<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static EitherUnsafe<L, Fin<A>> plusT<NUM, L, A>(EitherUnsafe<L, Fin<A>> x, EitherUnsafe<L, Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static EitherUnsafe<L, Fin<A>> subtractT<NUM, L, A>(EitherUnsafe<L, Fin<A>> x, EitherUnsafe<L, Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static EitherUnsafe<L, Fin<A>> productT<NUM, L, A>(EitherUnsafe<L, Fin<A>> x, EitherUnsafe<L, Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static EitherUnsafe<L, Fin<A>> divideT<NUM, L, A>(EitherUnsafe<L, Fin<A>> x, EitherUnsafe<L, Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static EitherUnsafe<L, Fin<A>> appendT<SEMI, L, A>(EitherUnsafe<L, Fin<A>> x, EitherUnsafe<L, Fin<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(EitherUnsafe<L, Fin<A>> x, EitherUnsafe<L, Fin<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(EitherUnsafe<L, Fin<A>> x, EitherUnsafe<L, Fin<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Fin<B>> applyT<L, A, B>(Func<A, B> fab, EitherUnsafe<L, Fin<A>> fa) =>
            default(ApplEitherUnsafe<L, Fin<A>, Fin<B>>).Apply(
                 default(MEitherUnsafe<L, Func<Fin<A>, Fin<B>>>).Pure((Fin<A> a) => default(ApplFin< A, B>).Apply(
                     default(MFin< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Fin<B>> applyT<L, A, B>(EitherUnsafe<L, Fin<Func<A, B>>> fab, EitherUnsafe<L, Fin<A>> fa) =>
            default(MEitherUnsafe<L, Fin<Func<A, B>>>).Bind<MEitherUnsafe<L, Fin<B>>, EitherUnsafe<L, Fin<B>>, Fin<B>>(fab, f =>
                default(MEitherUnsafe<L, Fin<A>>).Bind<MEitherUnsafe<L, Fin<B>>, EitherUnsafe<L, Fin<B>>, Fin<B>>(fa, a => 
                    default(MEitherUnsafe<L, Fin<B>>).Pure(default(ApplFin< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `EitherUnsafe&lt;L, Fin&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Fin&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static EitherUnsafe<L, Fin<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, EitherUnsafe<L, Fin<A>> fa, EitherUnsafe<L, Fin<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(EitherUnsafe<L, Option<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEitherUnsafe<L, Option<A>>, EitherUnsafe<L, Option<A>>, MOption<A>, Option<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(EitherUnsafe<L, Option<A>> ma) =>
            default(Trans<MEitherUnsafe<L, Option<A>>, EitherUnsafe<L, Option<A>>, MOption<A>, Option<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Option<B>> bindT<L, A, B>(EitherUnsafe<L, Option<A>> ma, Func<A, Option<B>> f) =>
            default(Trans<MEitherUnsafe<L, Option<A>>, EitherUnsafe<L, Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MEitherUnsafe<L, Option<B>>, EitherUnsafe<L, Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;EitherUnsafe&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;EitherUnsafe&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Option<EitherUnsafe<L, B>> traverse<L, A, B>(EitherUnsafe<L, Option<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;EitherUnsafe&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Option<EitherUnsafe<L, A>> sequence<L, A>(EitherUnsafe<L, Option<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Option<B>> mapT<L, A, B>(EitherUnsafe<L, Option<A>> ma, Func<A, B> f) =>
            default(Trans<MEitherUnsafe<L, Option<A>>, EitherUnsafe<L, Option<A>>, MOption<A>, Option<A>, A>)
                .Map<MEitherUnsafe<L, Option<B>>, EitherUnsafe<L, Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(EitherUnsafe<L, Option<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Option<A>>, EitherUnsafe<L, Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(EitherUnsafe<L, Option<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Option<A>>, EitherUnsafe<L, Option<A>>, MOption<A>, Option<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(EitherUnsafe<L, Option<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Option<A>>, EitherUnsafe<L, Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(EitherUnsafe<L, Option<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Option<A>>, EitherUnsafe<L, Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(EitherUnsafe<L, Option<A>> ma, Action<A> f) =>
            default(Trans<MEitherUnsafe<L, Option<A>>, EitherUnsafe<L, Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static EitherUnsafe<L, Option<A>> filterT<L, A>(EitherUnsafe<L, Option<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEitherUnsafe<L, Option<A>>, EitherUnsafe<L, Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MEitherUnsafe<L, Option<A>>, EitherUnsafe<L, Option<A>>, MOption<A>, Option<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOption<A>).Pure(a)
                        : default(MOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static EitherUnsafe<L, Option<A>> plusT<NUM, L, A>(EitherUnsafe<L, Option<A>> x, EitherUnsafe<L, Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static EitherUnsafe<L, Option<A>> subtractT<NUM, L, A>(EitherUnsafe<L, Option<A>> x, EitherUnsafe<L, Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static EitherUnsafe<L, Option<A>> productT<NUM, L, A>(EitherUnsafe<L, Option<A>> x, EitherUnsafe<L, Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static EitherUnsafe<L, Option<A>> divideT<NUM, L, A>(EitherUnsafe<L, Option<A>> x, EitherUnsafe<L, Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static EitherUnsafe<L, Option<A>> appendT<SEMI, L, A>(EitherUnsafe<L, Option<A>> x, EitherUnsafe<L, Option<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(EitherUnsafe<L, Option<A>> x, EitherUnsafe<L, Option<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Option&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(EitherUnsafe<L, Option<A>> x, EitherUnsafe<L, Option<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Option<B>> applyT<L, A, B>(Func<A, B> fab, EitherUnsafe<L, Option<A>> fa) =>
            default(ApplEitherUnsafe<L, Option<A>, Option<B>>).Apply(
                 default(MEitherUnsafe<L, Func<Option<A>, Option<B>>>).Pure((Option<A> a) => default(ApplOption< A, B>).Apply(
                     default(MOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Option<B>> applyT<L, A, B>(EitherUnsafe<L, Option<Func<A, B>>> fab, EitherUnsafe<L, Option<A>> fa) =>
            default(MEitherUnsafe<L, Option<Func<A, B>>>).Bind<MEitherUnsafe<L, Option<B>>, EitherUnsafe<L, Option<B>>, Option<B>>(fab, f =>
                default(MEitherUnsafe<L, Option<A>>).Bind<MEitherUnsafe<L, Option<B>>, EitherUnsafe<L, Option<B>>, Option<B>>(fa, a => 
                    default(MEitherUnsafe<L, Option<B>>).Pure(default(ApplOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `EitherUnsafe&lt;L, Option&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Option&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static EitherUnsafe<L, Option<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, EitherUnsafe<L, Option<A>> fa, EitherUnsafe<L, Option<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(EitherUnsafe<L, OptionUnsafe<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEitherUnsafe<L, OptionUnsafe<A>>, EitherUnsafe<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(EitherUnsafe<L, OptionUnsafe<A>> ma) =>
            default(Trans<MEitherUnsafe<L, OptionUnsafe<A>>, EitherUnsafe<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, OptionUnsafe<B>> bindT<L, A, B>(EitherUnsafe<L, OptionUnsafe<A>> ma, Func<A, OptionUnsafe<B>> f) =>
            default(Trans<MEitherUnsafe<L, OptionUnsafe<A>>, EitherUnsafe<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MEitherUnsafe<L, OptionUnsafe<B>>, EitherUnsafe<L, OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;EitherUnsafe&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<EitherUnsafe<L, B>> traverse<L, A, B>(EitherUnsafe<L, OptionUnsafe<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<EitherUnsafe<L, A>> sequence<L, A>(EitherUnsafe<L, OptionUnsafe<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, OptionUnsafe<B>> mapT<L, A, B>(EitherUnsafe<L, OptionUnsafe<A>> ma, Func<A, B> f) =>
            default(Trans<MEitherUnsafe<L, OptionUnsafe<A>>, EitherUnsafe<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Map<MEitherUnsafe<L, OptionUnsafe<B>>, EitherUnsafe<L, OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(EitherUnsafe<L, OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, OptionUnsafe<A>>, EitherUnsafe<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(EitherUnsafe<L, OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, OptionUnsafe<A>>, EitherUnsafe<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(EitherUnsafe<L, OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, OptionUnsafe<A>>, EitherUnsafe<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(EitherUnsafe<L, OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, OptionUnsafe<A>>, EitherUnsafe<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(EitherUnsafe<L, OptionUnsafe<A>> ma, Action<A> f) =>
            default(Trans<MEitherUnsafe<L, OptionUnsafe<A>>, EitherUnsafe<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static EitherUnsafe<L, OptionUnsafe<A>> filterT<L, A>(EitherUnsafe<L, OptionUnsafe<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEitherUnsafe<L, OptionUnsafe<A>>, EitherUnsafe<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MEitherUnsafe<L, OptionUnsafe<A>>, EitherUnsafe<L, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOptionUnsafe<A>).Pure(a)
                        : default(MOptionUnsafe<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static EitherUnsafe<L, OptionUnsafe<A>> plusT<NUM, L, A>(EitherUnsafe<L, OptionUnsafe<A>> x, EitherUnsafe<L, OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static EitherUnsafe<L, OptionUnsafe<A>> subtractT<NUM, L, A>(EitherUnsafe<L, OptionUnsafe<A>> x, EitherUnsafe<L, OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static EitherUnsafe<L, OptionUnsafe<A>> productT<NUM, L, A>(EitherUnsafe<L, OptionUnsafe<A>> x, EitherUnsafe<L, OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static EitherUnsafe<L, OptionUnsafe<A>> divideT<NUM, L, A>(EitherUnsafe<L, OptionUnsafe<A>> x, EitherUnsafe<L, OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static EitherUnsafe<L, OptionUnsafe<A>> appendT<SEMI, L, A>(EitherUnsafe<L, OptionUnsafe<A>> x, EitherUnsafe<L, OptionUnsafe<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(EitherUnsafe<L, OptionUnsafe<A>> x, EitherUnsafe<L, OptionUnsafe<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(EitherUnsafe<L, OptionUnsafe<A>> x, EitherUnsafe<L, OptionUnsafe<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, OptionUnsafe<B>> applyT<L, A, B>(Func<A, B> fab, EitherUnsafe<L, OptionUnsafe<A>> fa) =>
            default(ApplEitherUnsafe<L, OptionUnsafe<A>, OptionUnsafe<B>>).Apply(
                 default(MEitherUnsafe<L, Func<OptionUnsafe<A>, OptionUnsafe<B>>>).Pure((OptionUnsafe<A> a) => default(ApplOptionUnsafe< A, B>).Apply(
                     default(MOptionUnsafe< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, OptionUnsafe<B>> applyT<L, A, B>(EitherUnsafe<L, OptionUnsafe<Func<A, B>>> fab, EitherUnsafe<L, OptionUnsafe<A>> fa) =>
            default(MEitherUnsafe<L, OptionUnsafe<Func<A, B>>>).Bind<MEitherUnsafe<L, OptionUnsafe<B>>, EitherUnsafe<L, OptionUnsafe<B>>, OptionUnsafe<B>>(fab, f =>
                default(MEitherUnsafe<L, OptionUnsafe<A>>).Bind<MEitherUnsafe<L, OptionUnsafe<B>>, EitherUnsafe<L, OptionUnsafe<B>>, OptionUnsafe<B>>(fa, a => 
                    default(MEitherUnsafe<L, OptionUnsafe<B>>).Pure(default(ApplOptionUnsafe< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `EitherUnsafe&lt;L, OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static EitherUnsafe<L, OptionUnsafe<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, EitherUnsafe<L, OptionUnsafe<A>> fa, EitherUnsafe<L, OptionUnsafe<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(EitherUnsafe<L, Either<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEitherUnsafe<L, Either<L, A>>, EitherUnsafe<L, Either<L, A>>, MEither<L, A>, Either<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(EitherUnsafe<L, Either<L, A>> ma) =>
            default(Trans<MEitherUnsafe<L, Either<L, A>>, EitherUnsafe<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Either<L, B>> bindT<L, A, B>(EitherUnsafe<L, Either<L, A>> ma, Func<A, Either<L, B>> f) =>
            default(Trans<MEitherUnsafe<L, Either<L, A>>, EitherUnsafe<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MEitherUnsafe<L, Either<L, B>>, EitherUnsafe<L, Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, EitherUnsafe&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Either<L, EitherUnsafe<L, B>> traverse<L, A, B>(EitherUnsafe<L, Either<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Either<L, EitherUnsafe<L, A>> sequence<L, A>(EitherUnsafe<L, Either<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Either<L, B>> mapT<L, A, B>(EitherUnsafe<L, Either<L, A>> ma, Func<A, B> f) =>
            default(Trans<MEitherUnsafe<L, Either<L, A>>, EitherUnsafe<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Map<MEitherUnsafe<L, Either<L, B>>, EitherUnsafe<L, Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(EitherUnsafe<L, Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Either<L, A>>, EitherUnsafe<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(EitherUnsafe<L, Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Either<L, A>>, EitherUnsafe<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(EitherUnsafe<L, Either<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Either<L, A>>, EitherUnsafe<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(EitherUnsafe<L, Either<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Either<L, A>>, EitherUnsafe<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(EitherUnsafe<L, Either<L, A>> ma, Action<A> f) =>
            default(Trans<MEitherUnsafe<L, Either<L, A>>, EitherUnsafe<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static EitherUnsafe<L, Either<L, A>> filterT<L, A>(EitherUnsafe<L, Either<L, A>> ma, Func<A, bool> pred) =>
            default(Trans<MEitherUnsafe<L, Either<L, A>>, EitherUnsafe<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MEitherUnsafe<L, Either<L, A>>, EitherUnsafe<L, Either<L, A>>, MEither<L, A>, Either<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEither<L, A>).Pure(a)
                        : default(MEither<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static EitherUnsafe<L, Either<L, A>> plusT<NUM, L, A>(EitherUnsafe<L, Either<L, A>> x, EitherUnsafe<L, Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static EitherUnsafe<L, Either<L, A>> subtractT<NUM, L, A>(EitherUnsafe<L, Either<L, A>> x, EitherUnsafe<L, Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static EitherUnsafe<L, Either<L, A>> productT<NUM, L, A>(EitherUnsafe<L, Either<L, A>> x, EitherUnsafe<L, Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static EitherUnsafe<L, Either<L, A>> divideT<NUM, L, A>(EitherUnsafe<L, Either<L, A>> x, EitherUnsafe<L, Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static EitherUnsafe<L, Either<L, A>> appendT<SEMI, L, A>(EitherUnsafe<L, Either<L, A>> x, EitherUnsafe<L, Either<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(EitherUnsafe<L, Either<L, A>> x, EitherUnsafe<L, Either<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(EitherUnsafe<L, Either<L, A>> x, EitherUnsafe<L, Either<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Either<L, B>> applyT<L, A, B>(Func<A, B> fab, EitherUnsafe<L, Either<L, A>> fa) =>
            default(ApplEitherUnsafe<L, Either<L, A>, Either<L, B>>).Apply(
                 default(MEitherUnsafe<L, Func<Either<L, A>, Either<L, B>>>).Pure((Either<L, A> a) => default(ApplEither<L, A, B>).Apply(
                     default(MEither<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Either<L, B>> applyT<L, A, B>(EitherUnsafe<L, Either<L, Func<A, B>>> fab, EitherUnsafe<L, Either<L, A>> fa) =>
            default(MEitherUnsafe<L, Either<L, Func<A, B>>>).Bind<MEitherUnsafe<L, Either<L, B>>, EitherUnsafe<L, Either<L, B>>, Either<L, B>>(fab, f =>
                default(MEitherUnsafe<L, Either<L, A>>).Bind<MEitherUnsafe<L, Either<L, B>>, EitherUnsafe<L, Either<L, B>>, Either<L, B>>(fa, a => 
                    default(MEitherUnsafe<L, Either<L, B>>).Pure(default(ApplEither<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `EitherUnsafe&lt;L, Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Either&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static EitherUnsafe<L, Either<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, EitherUnsafe<L, Either<L, A>> fa, EitherUnsafe<L, Either<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(EitherUnsafe<L, EitherUnsafe<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEitherUnsafe<L, EitherUnsafe<L, A>>, EitherUnsafe<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(EitherUnsafe<L, EitherUnsafe<L, A>> ma) =>
            default(Trans<MEitherUnsafe<L, EitherUnsafe<L, A>>, EitherUnsafe<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, EitherUnsafe<L, B>> bindT<L, A, B>(EitherUnsafe<L, EitherUnsafe<L, A>> ma, Func<A, EitherUnsafe<L, B>> f) =>
            default(Trans<MEitherUnsafe<L, EitherUnsafe<L, A>>, EitherUnsafe<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MEitherUnsafe<L, EitherUnsafe<L, B>>, EitherUnsafe<L, EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, EitherUnsafe<L, B>> traverse<L, A, B>(EitherUnsafe<L, EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, EitherUnsafe<L, A>> sequence<L, A>(EitherUnsafe<L, EitherUnsafe<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, EitherUnsafe<L, B>> mapT<L, A, B>(EitherUnsafe<L, EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            default(Trans<MEitherUnsafe<L, EitherUnsafe<L, A>>, EitherUnsafe<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Map<MEitherUnsafe<L, EitherUnsafe<L, B>>, EitherUnsafe<L, EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(EitherUnsafe<L, EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, EitherUnsafe<L, A>>, EitherUnsafe<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(EitherUnsafe<L, EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, EitherUnsafe<L, A>>, EitherUnsafe<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(EitherUnsafe<L, EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, EitherUnsafe<L, A>>, EitherUnsafe<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(EitherUnsafe<L, EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, EitherUnsafe<L, A>>, EitherUnsafe<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(EitherUnsafe<L, EitherUnsafe<L, A>> ma, Action<A> f) =>
            default(Trans<MEitherUnsafe<L, EitherUnsafe<L, A>>, EitherUnsafe<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static EitherUnsafe<L, EitherUnsafe<L, A>> filterT<L, A>(EitherUnsafe<L, EitherUnsafe<L, A>> ma, Func<A, bool> pred) =>
            default(Trans<MEitherUnsafe<L, EitherUnsafe<L, A>>, EitherUnsafe<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MEitherUnsafe<L, EitherUnsafe<L, A>>, EitherUnsafe<L, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEitherUnsafe<L, A>).Pure(a)
                        : default(MEitherUnsafe<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static EitherUnsafe<L, EitherUnsafe<L, A>> plusT<NUM, L, A>(EitherUnsafe<L, EitherUnsafe<L, A>> x, EitherUnsafe<L, EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static EitherUnsafe<L, EitherUnsafe<L, A>> subtractT<NUM, L, A>(EitherUnsafe<L, EitherUnsafe<L, A>> x, EitherUnsafe<L, EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static EitherUnsafe<L, EitherUnsafe<L, A>> productT<NUM, L, A>(EitherUnsafe<L, EitherUnsafe<L, A>> x, EitherUnsafe<L, EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static EitherUnsafe<L, EitherUnsafe<L, A>> divideT<NUM, L, A>(EitherUnsafe<L, EitherUnsafe<L, A>> x, EitherUnsafe<L, EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static EitherUnsafe<L, EitherUnsafe<L, A>> appendT<SEMI, L, A>(EitherUnsafe<L, EitherUnsafe<L, A>> x, EitherUnsafe<L, EitherUnsafe<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(EitherUnsafe<L, EitherUnsafe<L, A>> x, EitherUnsafe<L, EitherUnsafe<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(EitherUnsafe<L, EitherUnsafe<L, A>> x, EitherUnsafe<L, EitherUnsafe<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, EitherUnsafe<L, B>> applyT<L, A, B>(Func<A, B> fab, EitherUnsafe<L, EitherUnsafe<L, A>> fa) =>
            default(ApplEitherUnsafe<L, EitherUnsafe<L, A>, EitherUnsafe<L, B>>).Apply(
                 default(MEitherUnsafe<L, Func<EitherUnsafe<L, A>, EitherUnsafe<L, B>>>).Pure((EitherUnsafe<L, A> a) => default(ApplEitherUnsafe<L, A, B>).Apply(
                     default(MEitherUnsafe<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, EitherUnsafe<L, B>> applyT<L, A, B>(EitherUnsafe<L, EitherUnsafe<L, Func<A, B>>> fab, EitherUnsafe<L, EitherUnsafe<L, A>> fa) =>
            default(MEitherUnsafe<L, EitherUnsafe<L, Func<A, B>>>).Bind<MEitherUnsafe<L, EitherUnsafe<L, B>>, EitherUnsafe<L, EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fab, f =>
                default(MEitherUnsafe<L, EitherUnsafe<L, A>>).Bind<MEitherUnsafe<L, EitherUnsafe<L, B>>, EitherUnsafe<L, EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fa, a => 
                    default(MEitherUnsafe<L, EitherUnsafe<L, B>>).Pure(default(ApplEitherUnsafe<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `EitherUnsafe&lt;L, EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static EitherUnsafe<L, EitherUnsafe<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, EitherUnsafe<L, EitherUnsafe<L, A>> fa, EitherUnsafe<L, EitherUnsafe<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(EitherUnsafe<L, Try<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEitherUnsafe<L, Try<A>>, EitherUnsafe<L, Try<A>>, MTry<A>, Try<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(EitherUnsafe<L, Try<A>> ma) =>
            default(Trans<MEitherUnsafe<L, Try<A>>, EitherUnsafe<L, Try<A>>, MTry<A>, Try<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Try<B>> bindT<L, A, B>(EitherUnsafe<L, Try<A>> ma, Func<A, Try<B>> f) =>
            default(Trans<MEitherUnsafe<L, Try<A>>, EitherUnsafe<L, Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MEitherUnsafe<L, Try<B>>, EitherUnsafe<L, Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;EitherUnsafe&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;EitherUnsafe&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Try<EitherUnsafe<L, B>> traverse<L, A, B>(EitherUnsafe<L, Try<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Try<EitherUnsafe<L, A>> sequence<L, A>(EitherUnsafe<L, Try<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Try<B>> mapT<L, A, B>(EitherUnsafe<L, Try<A>> ma, Func<A, B> f) =>
            default(Trans<MEitherUnsafe<L, Try<A>>, EitherUnsafe<L, Try<A>>, MTry<A>, Try<A>, A>)
                .Map<MEitherUnsafe<L, Try<B>>, EitherUnsafe<L, Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(EitherUnsafe<L, Try<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Try<A>>, EitherUnsafe<L, Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(EitherUnsafe<L, Try<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Try<A>>, EitherUnsafe<L, Try<A>>, MTry<A>, Try<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(EitherUnsafe<L, Try<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Try<A>>, EitherUnsafe<L, Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(EitherUnsafe<L, Try<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Try<A>>, EitherUnsafe<L, Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(EitherUnsafe<L, Try<A>> ma, Action<A> f) =>
            default(Trans<MEitherUnsafe<L, Try<A>>, EitherUnsafe<L, Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static EitherUnsafe<L, Try<A>> filterT<L, A>(EitherUnsafe<L, Try<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEitherUnsafe<L, Try<A>>, EitherUnsafe<L, Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MEitherUnsafe<L, Try<A>>, EitherUnsafe<L, Try<A>>, MTry<A>, Try<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTry<A>).Pure(a)
                        : default(MTry<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static EitherUnsafe<L, Try<A>> plusT<NUM, L, A>(EitherUnsafe<L, Try<A>> x, EitherUnsafe<L, Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static EitherUnsafe<L, Try<A>> subtractT<NUM, L, A>(EitherUnsafe<L, Try<A>> x, EitherUnsafe<L, Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static EitherUnsafe<L, Try<A>> productT<NUM, L, A>(EitherUnsafe<L, Try<A>> x, EitherUnsafe<L, Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static EitherUnsafe<L, Try<A>> divideT<NUM, L, A>(EitherUnsafe<L, Try<A>> x, EitherUnsafe<L, Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static EitherUnsafe<L, Try<A>> appendT<SEMI, L, A>(EitherUnsafe<L, Try<A>> x, EitherUnsafe<L, Try<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(EitherUnsafe<L, Try<A>> x, EitherUnsafe<L, Try<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Try&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(EitherUnsafe<L, Try<A>> x, EitherUnsafe<L, Try<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Try<B>> applyT<L, A, B>(Func<A, B> fab, EitherUnsafe<L, Try<A>> fa) =>
            default(ApplEitherUnsafe<L, Try<A>, Try<B>>).Apply(
                 default(MEitherUnsafe<L, Func<Try<A>, Try<B>>>).Pure((Try<A> a) => default(ApplTry< A, B>).Apply(
                     default(MTry< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Try<B>> applyT<L, A, B>(EitherUnsafe<L, Try<Func<A, B>>> fab, EitherUnsafe<L, Try<A>> fa) =>
            default(MEitherUnsafe<L, Try<Func<A, B>>>).Bind<MEitherUnsafe<L, Try<B>>, EitherUnsafe<L, Try<B>>, Try<B>>(fab, f =>
                default(MEitherUnsafe<L, Try<A>>).Bind<MEitherUnsafe<L, Try<B>>, EitherUnsafe<L, Try<B>>, Try<B>>(fa, a => 
                    default(MEitherUnsafe<L, Try<B>>).Pure(default(ApplTry< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Try&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static EitherUnsafe<L, Try<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, EitherUnsafe<L, Try<A>> fa, EitherUnsafe<L, Try<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryOptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(EitherUnsafe<L, TryOption<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEitherUnsafe<L, TryOption<A>>, EitherUnsafe<L, TryOption<A>>, MTryOption<A>, TryOption<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(EitherUnsafe<L, TryOption<A>> ma) =>
            default(Trans<MEitherUnsafe<L, TryOption<A>>, EitherUnsafe<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, TryOption<B>> bindT<L, A, B>(EitherUnsafe<L, TryOption<A>> ma, Func<A, TryOption<B>> f) =>
            default(Trans<MEitherUnsafe<L, TryOption<A>>, EitherUnsafe<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MEitherUnsafe<L, TryOption<B>>, EitherUnsafe<L, TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static TryOption<EitherUnsafe<L, B>> traverse<L, A, B>(EitherUnsafe<L, TryOption<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static TryOption<EitherUnsafe<L, A>> sequence<L, A>(EitherUnsafe<L, TryOption<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, TryOption<B>> mapT<L, A, B>(EitherUnsafe<L, TryOption<A>> ma, Func<A, B> f) =>
            default(Trans<MEitherUnsafe<L, TryOption<A>>, EitherUnsafe<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Map<MEitherUnsafe<L, TryOption<B>>, EitherUnsafe<L, TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(EitherUnsafe<L, TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, TryOption<A>>, EitherUnsafe<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(EitherUnsafe<L, TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, TryOption<A>>, EitherUnsafe<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(EitherUnsafe<L, TryOption<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, TryOption<A>>, EitherUnsafe<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(EitherUnsafe<L, TryOption<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, TryOption<A>>, EitherUnsafe<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(EitherUnsafe<L, TryOption<A>> ma, Action<A> f) =>
            default(Trans<MEitherUnsafe<L, TryOption<A>>, EitherUnsafe<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static EitherUnsafe<L, TryOption<A>> filterT<L, A>(EitherUnsafe<L, TryOption<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEitherUnsafe<L, TryOption<A>>, EitherUnsafe<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MEitherUnsafe<L, TryOption<A>>, EitherUnsafe<L, TryOption<A>>, MTryOption<A>, TryOption<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTryOption<A>).Pure(a)
                        : default(MTryOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static EitherUnsafe<L, TryOption<A>> plusT<NUM, L, A>(EitherUnsafe<L, TryOption<A>> x, EitherUnsafe<L, TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static EitherUnsafe<L, TryOption<A>> subtractT<NUM, L, A>(EitherUnsafe<L, TryOption<A>> x, EitherUnsafe<L, TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static EitherUnsafe<L, TryOption<A>> productT<NUM, L, A>(EitherUnsafe<L, TryOption<A>> x, EitherUnsafe<L, TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static EitherUnsafe<L, TryOption<A>> divideT<NUM, L, A>(EitherUnsafe<L, TryOption<A>> x, EitherUnsafe<L, TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static EitherUnsafe<L, TryOption<A>> appendT<SEMI, L, A>(EitherUnsafe<L, TryOption<A>> x, EitherUnsafe<L, TryOption<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(EitherUnsafe<L, TryOption<A>> x, EitherUnsafe<L, TryOption<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(EitherUnsafe<L, TryOption<A>> x, EitherUnsafe<L, TryOption<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, TryOption<B>> applyT<L, A, B>(Func<A, B> fab, EitherUnsafe<L, TryOption<A>> fa) =>
            default(ApplEitherUnsafe<L, TryOption<A>, TryOption<B>>).Apply(
                 default(MEitherUnsafe<L, Func<TryOption<A>, TryOption<B>>>).Pure((TryOption<A> a) => default(ApplTryOption< A, B>).Apply(
                     default(MTryOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, TryOption<B>> applyT<L, A, B>(EitherUnsafe<L, TryOption<Func<A, B>>> fab, EitherUnsafe<L, TryOption<A>> fa) =>
            default(MEitherUnsafe<L, TryOption<Func<A, B>>>).Bind<MEitherUnsafe<L, TryOption<B>>, EitherUnsafe<L, TryOption<B>>, TryOption<B>>(fab, f =>
                default(MEitherUnsafe<L, TryOption<A>>).Bind<MEitherUnsafe<L, TryOption<B>>, EitherUnsafe<L, TryOption<B>>, TryOption<B>>(fa, a => 
                    default(MEitherUnsafe<L, TryOption<B>>).Pure(default(ApplTryOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, TryOption&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static EitherUnsafe<L, TryOption<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, EitherUnsafe<L, TryOption<A>> fa, EitherUnsafe<L, TryOption<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class IEnumerableT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(EitherUnsafe<L, IEnumerable<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEitherUnsafe<L, IEnumerable<A>>, EitherUnsafe<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(EitherUnsafe<L, IEnumerable<A>> ma) =>
            default(Trans<MEitherUnsafe<L, IEnumerable<A>>, EitherUnsafe<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, IEnumerable<B>> bindT<L, A, B>(EitherUnsafe<L, IEnumerable<A>> ma, Func<A, IEnumerable<B>> f) =>
            default(Trans<MEitherUnsafe<L, IEnumerable<A>>, EitherUnsafe<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MEitherUnsafe<L, IEnumerable<B>>, EitherUnsafe<L, IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<EitherUnsafe<L, B>> traverse<L, A, B>(EitherUnsafe<L, IEnumerable<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<EitherUnsafe<L, A>> sequence<L, A>(EitherUnsafe<L, IEnumerable<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, IEnumerable<B>> mapT<L, A, B>(EitherUnsafe<L, IEnumerable<A>> ma, Func<A, B> f) =>
            default(Trans<MEitherUnsafe<L, IEnumerable<A>>, EitherUnsafe<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Map<MEitherUnsafe<L, IEnumerable<B>>, EitherUnsafe<L, IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(EitherUnsafe<L, IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, IEnumerable<A>>, EitherUnsafe<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(EitherUnsafe<L, IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, IEnumerable<A>>, EitherUnsafe<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(EitherUnsafe<L, IEnumerable<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, IEnumerable<A>>, EitherUnsafe<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(EitherUnsafe<L, IEnumerable<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, IEnumerable<A>>, EitherUnsafe<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(EitherUnsafe<L, IEnumerable<A>> ma, Action<A> f) =>
            default(Trans<MEitherUnsafe<L, IEnumerable<A>>, EitherUnsafe<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static EitherUnsafe<L, IEnumerable<A>> filterT<L, A>(EitherUnsafe<L, IEnumerable<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEitherUnsafe<L, IEnumerable<A>>, EitherUnsafe<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MEitherUnsafe<L, IEnumerable<A>>, EitherUnsafe<L, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>(ma, 
                    a => pred(a)
                        ? default(MEnumerable<A>).Pure(a)
                        : default(MEnumerable<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static EitherUnsafe<L, IEnumerable<A>> plusT<NUM, L, A>(EitherUnsafe<L, IEnumerable<A>> x, EitherUnsafe<L, IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static EitherUnsafe<L, IEnumerable<A>> subtractT<NUM, L, A>(EitherUnsafe<L, IEnumerable<A>> x, EitherUnsafe<L, IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static EitherUnsafe<L, IEnumerable<A>> productT<NUM, L, A>(EitherUnsafe<L, IEnumerable<A>> x, EitherUnsafe<L, IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static EitherUnsafe<L, IEnumerable<A>> divideT<NUM, L, A>(EitherUnsafe<L, IEnumerable<A>> x, EitherUnsafe<L, IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static EitherUnsafe<L, IEnumerable<A>> appendT<SEMI, L, A>(EitherUnsafe<L, IEnumerable<A>> x, EitherUnsafe<L, IEnumerable<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(EitherUnsafe<L, IEnumerable<A>> x, EitherUnsafe<L, IEnumerable<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(EitherUnsafe<L, IEnumerable<A>> x, EitherUnsafe<L, IEnumerable<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, IEnumerable<B>> applyT<L, A, B>(Func<A, B> fab, EitherUnsafe<L, IEnumerable<A>> fa) =>
            default(ApplEitherUnsafe<L, IEnumerable<A>, IEnumerable<B>>).Apply(
                 default(MEitherUnsafe<L, Func<IEnumerable<A>, IEnumerable<B>>>).Pure((IEnumerable<A> a) => default(ApplEnumerable< A, B>).Apply(
                     default(MEnumerable< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, IEnumerable<B>> applyT<L, A, B>(EitherUnsafe<L, IEnumerable<Func<A, B>>> fab, EitherUnsafe<L, IEnumerable<A>> fa) =>
            default(MEitherUnsafe<L, IEnumerable<Func<A, B>>>).Bind<MEitherUnsafe<L, IEnumerable<B>>, EitherUnsafe<L, IEnumerable<B>>, IEnumerable<B>>(fab, f =>
                default(MEitherUnsafe<L, IEnumerable<A>>).Bind<MEitherUnsafe<L, IEnumerable<B>>, EitherUnsafe<L, IEnumerable<B>>, IEnumerable<B>>(fa, a => 
                    default(MEitherUnsafe<L, IEnumerable<B>>).Pure(default(ApplEnumerable< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, IEnumerable&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static EitherUnsafe<L, IEnumerable<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, EitherUnsafe<L, IEnumerable<A>> fa, EitherUnsafe<L, IEnumerable<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SeqT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(EitherUnsafe<L, Seq<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEitherUnsafe<L, Seq<A>>, EitherUnsafe<L, Seq<A>>, MSeq<A>, Seq<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(EitherUnsafe<L, Seq<A>> ma) =>
            default(Trans<MEitherUnsafe<L, Seq<A>>, EitherUnsafe<L, Seq<A>>, MSeq<A>, Seq<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Seq<B>> bindT<L, A, B>(EitherUnsafe<L, Seq<A>> ma, Func<A, Seq<B>> f) =>
            default(Trans<MEitherUnsafe<L, Seq<A>>, EitherUnsafe<L, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MEitherUnsafe<L, Seq<B>>, EitherUnsafe<L, Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;EitherUnsafe&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;EitherUnsafe&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Seq<EitherUnsafe<L, B>> traverse<L, A, B>(EitherUnsafe<L, Seq<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Seq<EitherUnsafe<L, A>> sequence<L, A>(EitherUnsafe<L, Seq<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Seq<B>> mapT<L, A, B>(EitherUnsafe<L, Seq<A>> ma, Func<A, B> f) =>
            default(Trans<MEitherUnsafe<L, Seq<A>>, EitherUnsafe<L, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Map<MEitherUnsafe<L, Seq<B>>, EitherUnsafe<L, Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(EitherUnsafe<L, Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Seq<A>>, EitherUnsafe<L, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(EitherUnsafe<L, Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Seq<A>>, EitherUnsafe<L, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(EitherUnsafe<L, Seq<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Seq<A>>, EitherUnsafe<L, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(EitherUnsafe<L, Seq<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Seq<A>>, EitherUnsafe<L, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(EitherUnsafe<L, Seq<A>> ma, Action<A> f) =>
            default(Trans<MEitherUnsafe<L, Seq<A>>, EitherUnsafe<L, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static EitherUnsafe<L, Seq<A>> filterT<L, A>(EitherUnsafe<L, Seq<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEitherUnsafe<L, Seq<A>>, EitherUnsafe<L, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MEitherUnsafe<L, Seq<A>>, EitherUnsafe<L, Seq<A>>, MSeq<A>, Seq<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSeq<A>).Pure(a)
                        : default(MSeq<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static EitherUnsafe<L, Seq<A>> plusT<NUM, L, A>(EitherUnsafe<L, Seq<A>> x, EitherUnsafe<L, Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static EitherUnsafe<L, Seq<A>> subtractT<NUM, L, A>(EitherUnsafe<L, Seq<A>> x, EitherUnsafe<L, Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static EitherUnsafe<L, Seq<A>> productT<NUM, L, A>(EitherUnsafe<L, Seq<A>> x, EitherUnsafe<L, Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static EitherUnsafe<L, Seq<A>> divideT<NUM, L, A>(EitherUnsafe<L, Seq<A>> x, EitherUnsafe<L, Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static EitherUnsafe<L, Seq<A>> appendT<SEMI, L, A>(EitherUnsafe<L, Seq<A>> x, EitherUnsafe<L, Seq<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(EitherUnsafe<L, Seq<A>> x, EitherUnsafe<L, Seq<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(EitherUnsafe<L, Seq<A>> x, EitherUnsafe<L, Seq<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Seq<B>> applyT<L, A, B>(Func<A, B> fab, EitherUnsafe<L, Seq<A>> fa) =>
            default(ApplEitherUnsafe<L, Seq<A>, Seq<B>>).Apply(
                 default(MEitherUnsafe<L, Func<Seq<A>, Seq<B>>>).Pure((Seq<A> a) => default(ApplSeq< A, B>).Apply(
                     default(MSeq< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Seq<B>> applyT<L, A, B>(EitherUnsafe<L, Seq<Func<A, B>>> fab, EitherUnsafe<L, Seq<A>> fa) =>
            default(MEitherUnsafe<L, Seq<Func<A, B>>>).Bind<MEitherUnsafe<L, Seq<B>>, EitherUnsafe<L, Seq<B>>, Seq<B>>(fab, f =>
                default(MEitherUnsafe<L, Seq<A>>).Bind<MEitherUnsafe<L, Seq<B>>, EitherUnsafe<L, Seq<B>>, Seq<B>>(fa, a => 
                    default(MEitherUnsafe<L, Seq<B>>).Pure(default(ApplSeq< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Seq&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static EitherUnsafe<L, Seq<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, EitherUnsafe<L, Seq<A>> fa, EitherUnsafe<L, Seq<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(EitherUnsafe<L, Set<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEitherUnsafe<L, Set<A>>, EitherUnsafe<L, Set<A>>, MSet<A>, Set<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(EitherUnsafe<L, Set<A>> ma) =>
            default(Trans<MEitherUnsafe<L, Set<A>>, EitherUnsafe<L, Set<A>>, MSet<A>, Set<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Set<B>> bindT<L, A, B>(EitherUnsafe<L, Set<A>> ma, Func<A, Set<B>> f) =>
            default(Trans<MEitherUnsafe<L, Set<A>>, EitherUnsafe<L, Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MEitherUnsafe<L, Set<B>>, EitherUnsafe<L, Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;EitherUnsafe&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;EitherUnsafe&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Set<EitherUnsafe<L, B>> traverse<L, A, B>(EitherUnsafe<L, Set<A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Set<EitherUnsafe<L, A>> sequence<L, A>(EitherUnsafe<L, Set<A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Set<B>> mapT<L, A, B>(EitherUnsafe<L, Set<A>> ma, Func<A, B> f) =>
            default(Trans<MEitherUnsafe<L, Set<A>>, EitherUnsafe<L, Set<A>>, MSet<A>, Set<A>, A>)
                .Map<MEitherUnsafe<L, Set<B>>, EitherUnsafe<L, Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(EitherUnsafe<L, Set<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Set<A>>, EitherUnsafe<L, Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(EitherUnsafe<L, Set<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Set<A>>, EitherUnsafe<L, Set<A>>, MSet<A>, Set<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(EitherUnsafe<L, Set<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Set<A>>, EitherUnsafe<L, Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(EitherUnsafe<L, Set<A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Set<A>>, EitherUnsafe<L, Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(EitherUnsafe<L, Set<A>> ma, Action<A> f) =>
            default(Trans<MEitherUnsafe<L, Set<A>>, EitherUnsafe<L, Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static EitherUnsafe<L, Set<A>> filterT<L, A>(EitherUnsafe<L, Set<A>> ma, Func<A, bool> pred) =>
            default(Trans<MEitherUnsafe<L, Set<A>>, EitherUnsafe<L, Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MEitherUnsafe<L, Set<A>>, EitherUnsafe<L, Set<A>>, MSet<A>, Set<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSet<A>).Pure(a)
                        : default(MSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static EitherUnsafe<L, Set<A>> plusT<NUM, L, A>(EitherUnsafe<L, Set<A>> x, EitherUnsafe<L, Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static EitherUnsafe<L, Set<A>> subtractT<NUM, L, A>(EitherUnsafe<L, Set<A>> x, EitherUnsafe<L, Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static EitherUnsafe<L, Set<A>> productT<NUM, L, A>(EitherUnsafe<L, Set<A>> x, EitherUnsafe<L, Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static EitherUnsafe<L, Set<A>> divideT<NUM, L, A>(EitherUnsafe<L, Set<A>> x, EitherUnsafe<L, Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static EitherUnsafe<L, Set<A>> appendT<SEMI, L, A>(EitherUnsafe<L, Set<A>> x, EitherUnsafe<L, Set<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(EitherUnsafe<L, Set<A>> x, EitherUnsafe<L, Set<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Set&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(EitherUnsafe<L, Set<A>> x, EitherUnsafe<L, Set<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Set<B>> applyT<L, A, B>(Func<A, B> fab, EitherUnsafe<L, Set<A>> fa) =>
            default(ApplEitherUnsafe<L, Set<A>, Set<B>>).Apply(
                 default(MEitherUnsafe<L, Func<Set<A>, Set<B>>>).Pure((Set<A> a) => default(ApplSet< A, B>).Apply(
                     default(MSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Set<B>> applyT<L, A, B>(EitherUnsafe<L, Set<Func<A, B>>> fab, EitherUnsafe<L, Set<A>> fa) =>
            default(MEitherUnsafe<L, Set<Func<A, B>>>).Bind<MEitherUnsafe<L, Set<B>>, EitherUnsafe<L, Set<B>>, Set<B>>(fab, f =>
                default(MEitherUnsafe<L, Set<A>>).Bind<MEitherUnsafe<L, Set<B>>, EitherUnsafe<L, Set<B>>, Set<B>>(fa, a => 
                    default(MEitherUnsafe<L, Set<B>>).Pure(default(ApplSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Set&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static EitherUnsafe<L, Set<C>> applyT<L, A, B, C>(Func<A, B, C> fabc, EitherUnsafe<L, Set<A>> fa, EitherUnsafe<L, Set<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ValidationT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, FAIL, A>(EitherUnsafe<L, Validation<FAIL, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MEitherUnsafe<L, Validation<FAIL, A>>, EitherUnsafe<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, FAIL, A>(EitherUnsafe<L, Validation<FAIL, A>> ma) =>
            default(Trans<MEitherUnsafe<L, Validation<FAIL, A>>, EitherUnsafe<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Validation<FAIL, B>> bindT<L, FAIL, A, B>(EitherUnsafe<L, Validation<FAIL, A>> ma, Func<A, Validation<FAIL, B>> f) =>
            default(Trans<MEitherUnsafe<L, Validation<FAIL, A>>, EitherUnsafe<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MEitherUnsafe<L, Validation<FAIL, B>>, EitherUnsafe<L, Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, EitherUnsafe<L, B>> traverse<L, FAIL, A, B>(EitherUnsafe<L, Validation<FAIL, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, EitherUnsafe<L, A>> sequence<L, FAIL, A>(EitherUnsafe<L, Validation<FAIL, A>> ma) =>
            ma.Traverse<L, FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static EitherUnsafe<L, Validation<FAIL, B>> mapT<L, FAIL, A, B>(EitherUnsafe<L, Validation<FAIL, A>> ma, Func<A, B> f) =>
            default(Trans<MEitherUnsafe<L, Validation<FAIL, A>>, EitherUnsafe<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Map<MEitherUnsafe<L, Validation<FAIL, B>>, EitherUnsafe<L, Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, FAIL, A>(EitherUnsafe<L, Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Validation<FAIL, A>>, EitherUnsafe<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, FAIL, A>(EitherUnsafe<L, Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MEitherUnsafe<L, Validation<FAIL, A>>, EitherUnsafe<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, FAIL, A>(EitherUnsafe<L, Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Validation<FAIL, A>>, EitherUnsafe<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, FAIL, A>(EitherUnsafe<L, Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(Trans<MEitherUnsafe<L, Validation<FAIL, A>>, EitherUnsafe<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, FAIL, A>(EitherUnsafe<L, Validation<FAIL, A>> ma, Action<A> f) =>
            default(Trans<MEitherUnsafe<L, Validation<FAIL, A>>, EitherUnsafe<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static EitherUnsafe<L, Validation<FAIL, A>> filterT<L, FAIL, A>(EitherUnsafe<L, Validation<FAIL, A>> ma, Func<A, bool> pred) =>
            default(Trans<MEitherUnsafe<L, Validation<FAIL, A>>, EitherUnsafe<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MEitherUnsafe<L, Validation<FAIL, A>>, EitherUnsafe<L, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>(ma, 
                    a => pred(a)
                        ? default(MValidation<FAIL, A>).Pure(a)
                        : default(MValidation<FAIL, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static EitherUnsafe<L, Validation<FAIL, A>> plusT<NUM, L, FAIL, A>(EitherUnsafe<L, Validation<FAIL, A>> x, EitherUnsafe<L, Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static EitherUnsafe<L, Validation<FAIL, A>> subtractT<NUM, L, FAIL, A>(EitherUnsafe<L, Validation<FAIL, A>> x, EitherUnsafe<L, Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static EitherUnsafe<L, Validation<FAIL, A>> productT<NUM, L, FAIL, A>(EitherUnsafe<L, Validation<FAIL, A>> x, EitherUnsafe<L, Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static EitherUnsafe<L, Validation<FAIL, A>> divideT<NUM, L, FAIL, A>(EitherUnsafe<L, Validation<FAIL, A>> x, EitherUnsafe<L, Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static EitherUnsafe<L, Validation<FAIL, A>> appendT<SEMI, L, FAIL, A>(EitherUnsafe<L, Validation<FAIL, A>> x, EitherUnsafe<L, Validation<FAIL, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, FAIL, A>(EitherUnsafe<L, Validation<FAIL, A>> x, EitherUnsafe<L, Validation<FAIL, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, FAIL, A>(EitherUnsafe<L, Validation<FAIL, A>> x, EitherUnsafe<L, Validation<FAIL, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Validation<FAIL, B>> applyT<L, FAIL, A, B>(Func<A, B> fab, EitherUnsafe<L, Validation<FAIL, A>> fa) =>
            default(ApplEitherUnsafe<L, Validation<FAIL, A>, Validation<FAIL, B>>).Apply(
                 default(MEitherUnsafe<L, Func<Validation<FAIL, A>, Validation<FAIL, B>>>).Pure((Validation<FAIL, A> a) => default(ApplValidation<FAIL, A, B>).Apply(
                     default(MValidation<FAIL, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static EitherUnsafe<L, Validation<FAIL, B>> applyT<L, FAIL, A, B>(EitherUnsafe<L, Validation<FAIL, Func<A, B>>> fab, EitherUnsafe<L, Validation<FAIL, A>> fa) =>
            default(MEitherUnsafe<L, Validation<FAIL, Func<A, B>>>).Bind<MEitherUnsafe<L, Validation<FAIL, B>>, EitherUnsafe<L, Validation<FAIL, B>>, Validation<FAIL, B>>(fab, f =>
                default(MEitherUnsafe<L, Validation<FAIL, A>>).Bind<MEitherUnsafe<L, Validation<FAIL, B>>, EitherUnsafe<L, Validation<FAIL, B>>, Validation<FAIL, B>>(fa, a => 
                    default(MEitherUnsafe<L, Validation<FAIL, B>>).Pure(default(ApplValidation<FAIL, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`EitherUnsafe&lt;L, Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static EitherUnsafe<L, Validation<FAIL, C>> applyT<L, FAIL, A, B, C>(Func<A, B, C> fabc, EitherUnsafe<L, Validation<FAIL, A>> fa, EitherUnsafe<L, Validation<FAIL, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ArrT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Try&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Arr&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Try&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Try<Arr<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTry<Arr<A>>, Try<Arr<A>>, MArr<A>, Arr<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Try&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Arr&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Try&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Try<Arr<A>> ma) =>
            default(Trans<MTry<Arr<A>>, Try<Arr<A>>, MArr<A>, Arr<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Try&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Arr<B>> bindT< A, B>(Try<Arr<A>> ma, Func<A, Arr<B>> f) =>
            default(Trans<MTry<Arr<A>>, Try<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MTry<Arr<B>>, Try<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Try&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Try&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Try&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Arr<Try<B>> traverse< A, B>(Try<Arr<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Try&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Try&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Arr<Try<A>> sequence< A>(Try<Arr<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Arr<B>> mapT< A, B>(Try<Arr<A>> ma, Func<A, B> f) =>
            default(Trans<MTry<Arr<A>>, Try<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Map<MTry<Arr<B>>, Try<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Try<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Arr<A>>, Try<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Try<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Arr<A>>, Try<Arr<A>>, MArr<A>, Arr<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Try<Arr<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Arr<A>>, Try<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Try<Arr<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Arr<A>>, Try<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Try&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Try<Arr<A>> ma, Action<A> f) =>
            default(Trans<MTry<Arr<A>>, Try<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Try&lt;Arr&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Try<Arr<A>> filterT< A>(Try<Arr<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTry<Arr<A>>, Try<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MTry<Arr<A>>, Try<Arr<A>>, MArr<A>, Arr<A>, A>(ma, 
                    a => pred(a)
                        ? default(MArr<A>).Pure(a)
                        : default(MArr<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Arr&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Try<Arr<A>> plusT<NUM,  A>(Try<Arr<A>> x, Try<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Arr&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Try<Arr<A>> subtractT<NUM,  A>(Try<Arr<A>> x, Try<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Try<Arr<A>> productT<NUM,  A>(Try<Arr<A>> x, Try<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Try<Arr<A>> divideT<NUM,  A>(Try<Arr<A>> x, Try<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Try<Arr<A>> appendT<SEMI,  A>(Try<Arr<A>> x, Try<Arr<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Try<Arr<A>> x, Try<Arr<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Try<Arr<A>> x, Try<Arr<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Arr<B>> applyT< A, B>(Func<A, B> fab, Try<Arr<A>> fa) =>
            default(ApplTry< Arr<A>, Arr<B>>).Apply(
                 default(MTry< Func<Arr<A>, Arr<B>>>).Pure((Arr<A> a) => default(ApplArr< A, B>).Apply(
                     default(MArr< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Arr<B>> applyT< A, B>(Try<Arr<Func<A, B>>> fab, Try<Arr<A>> fa) =>
            default(MTry<Arr<Func<A, B>>>).Bind<MTry<Arr<B>>, Try<Arr<B>>, Arr<B>>(fab, f =>
                default(MTry<Arr<A>>).Bind<MTry<Arr<B>>, Try<Arr<B>>, Arr<B>>(fa, a => 
                    default(MTry<Arr<B>>).Pure(default(ApplArr< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Arr&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Try&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Try<Arr<C>> applyT< A, B, C>(Func<A, B, C> fabc, Try<Arr<A>> fa, Try<Arr<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class HashSetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Try&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;HashSet&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Try&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Try<HashSet<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTry<HashSet<A>>, Try<HashSet<A>>, MHashSet<A>, HashSet<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Try&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;HashSet&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Try&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Try<HashSet<A>> ma) =>
            default(Trans<MTry<HashSet<A>>, Try<HashSet<A>>, MHashSet<A>, HashSet<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Try&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<HashSet<B>> bindT< A, B>(Try<HashSet<A>> ma, Func<A, HashSet<B>> f) =>
            default(Trans<MTry<HashSet<A>>, Try<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MTry<HashSet<B>>, Try<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Try&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Try&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Try&lt;B&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Try<B>> traverse< A, B>(Try<HashSet<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Try&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Try&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Try<A>> sequence< A>(Try<HashSet<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<HashSet<B>> mapT< A, B>(Try<HashSet<A>> ma, Func<A, B> f) =>
            default(Trans<MTry<HashSet<A>>, Try<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Map<MTry<HashSet<B>>, Try<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Try<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<HashSet<A>>, Try<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Try<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<HashSet<A>>, Try<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Try<HashSet<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<HashSet<A>>, Try<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Try<HashSet<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<HashSet<A>>, Try<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Try&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Try<HashSet<A>> ma, Action<A> f) =>
            default(Trans<MTry<HashSet<A>>, Try<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Try&lt;HashSet&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Try<HashSet<A>> filterT< A>(Try<HashSet<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTry<HashSet<A>>, Try<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MTry<HashSet<A>>, Try<HashSet<A>>, MHashSet<A>, HashSet<A>, A>(ma, 
                    a => pred(a)
                        ? default(MHashSet<A>).Pure(a)
                        : default(MHashSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Try<HashSet<A>> plusT<NUM,  A>(Try<HashSet<A>> x, Try<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Try<HashSet<A>> subtractT<NUM,  A>(Try<HashSet<A>> x, Try<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Try<HashSet<A>> productT<NUM,  A>(Try<HashSet<A>> x, Try<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Try<HashSet<A>> divideT<NUM,  A>(Try<HashSet<A>> x, Try<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Try<HashSet<A>> appendT<SEMI,  A>(Try<HashSet<A>> x, Try<HashSet<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Try<HashSet<A>> x, Try<HashSet<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Try<HashSet<A>> x, Try<HashSet<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<HashSet<B>> applyT< A, B>(Func<A, B> fab, Try<HashSet<A>> fa) =>
            default(ApplTry< HashSet<A>, HashSet<B>>).Apply(
                 default(MTry< Func<HashSet<A>, HashSet<B>>>).Pure((HashSet<A> a) => default(ApplHashSet< A, B>).Apply(
                     default(MHashSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<HashSet<B>> applyT< A, B>(Try<HashSet<Func<A, B>>> fab, Try<HashSet<A>> fa) =>
            default(MTry<HashSet<Func<A, B>>>).Bind<MTry<HashSet<B>>, Try<HashSet<B>>, HashSet<B>>(fab, f =>
                default(MTry<HashSet<A>>).Bind<MTry<HashSet<B>>, Try<HashSet<B>>, HashSet<B>>(fa, a => 
                    default(MTry<HashSet<B>>).Pure(default(ApplHashSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Try&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Try&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Try<HashSet<C>> applyT< A, B, C>(Func<A, B, C> fabc, Try<HashSet<A>> fa, Try<HashSet<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class LstT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Try&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Lst&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Try&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Try<Lst<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTry<Lst<A>>, Try<Lst<A>>, MLst<A>, Lst<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Try&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Lst&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Try&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Try<Lst<A>> ma) =>
            default(Trans<MTry<Lst<A>>, Try<Lst<A>>, MLst<A>, Lst<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Try&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Lst<B>> bindT< A, B>(Try<Lst<A>> ma, Func<A, Lst<B>> f) =>
            default(Trans<MTry<Lst<A>>, Try<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MTry<Lst<B>>, Try<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Try&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Try&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Try&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Lst<Try<B>> traverse< A, B>(Try<Lst<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Try&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Try&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Lst<Try<A>> sequence< A>(Try<Lst<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Lst<B>> mapT< A, B>(Try<Lst<A>> ma, Func<A, B> f) =>
            default(Trans<MTry<Lst<A>>, Try<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Map<MTry<Lst<B>>, Try<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Try<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Lst<A>>, Try<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Try<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Lst<A>>, Try<Lst<A>>, MLst<A>, Lst<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Try<Lst<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Lst<A>>, Try<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Try<Lst<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Lst<A>>, Try<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Try&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Try<Lst<A>> ma, Action<A> f) =>
            default(Trans<MTry<Lst<A>>, Try<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Try&lt;Lst&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Try<Lst<A>> filterT< A>(Try<Lst<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTry<Lst<A>>, Try<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MTry<Lst<A>>, Try<Lst<A>>, MLst<A>, Lst<A>, A>(ma, 
                    a => pred(a)
                        ? default(MLst<A>).Pure(a)
                        : default(MLst<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Lst&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Try<Lst<A>> plusT<NUM,  A>(Try<Lst<A>> x, Try<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Lst&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Try<Lst<A>> subtractT<NUM,  A>(Try<Lst<A>> x, Try<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Try<Lst<A>> productT<NUM,  A>(Try<Lst<A>> x, Try<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Try<Lst<A>> divideT<NUM,  A>(Try<Lst<A>> x, Try<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Try<Lst<A>> appendT<SEMI,  A>(Try<Lst<A>> x, Try<Lst<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Try<Lst<A>> x, Try<Lst<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Try<Lst<A>> x, Try<Lst<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Lst<B>> applyT< A, B>(Func<A, B> fab, Try<Lst<A>> fa) =>
            default(ApplTry< Lst<A>, Lst<B>>).Apply(
                 default(MTry< Func<Lst<A>, Lst<B>>>).Pure((Lst<A> a) => default(ApplLst< A, B>).Apply(
                     default(MLst< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Lst<B>> applyT< A, B>(Try<Lst<Func<A, B>>> fab, Try<Lst<A>> fa) =>
            default(MTry<Lst<Func<A, B>>>).Bind<MTry<Lst<B>>, Try<Lst<B>>, Lst<B>>(fab, f =>
                default(MTry<Lst<A>>).Bind<MTry<Lst<B>>, Try<Lst<B>>, Lst<B>>(fa, a => 
                    default(MTry<Lst<B>>).Pure(default(ApplLst< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Lst&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Try&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Try<Lst<C>> applyT< A, B, C>(Func<A, B, C> fabc, Try<Lst<A>> fa, Try<Lst<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class FinT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Try&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Fin&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Try&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Try<Fin<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTry<Fin<A>>, Try<Fin<A>>, MFin<A>, Fin<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Try&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Fin&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Try&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Try<Fin<A>> ma) =>
            default(Trans<MTry<Fin<A>>, Try<Fin<A>>, MFin<A>, Fin<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Try&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Fin<B>> bindT< A, B>(Try<Fin<A>> ma, Func<A, Fin<B>> f) =>
            default(Trans<MTry<Fin<A>>, Try<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MTry<Fin<B>>, Try<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Try&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Try&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Try&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Fin<Try<B>> traverse< A, B>(Try<Fin<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Try&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Try&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Fin<Try<A>> sequence< A>(Try<Fin<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Fin<B>> mapT< A, B>(Try<Fin<A>> ma, Func<A, B> f) =>
            default(Trans<MTry<Fin<A>>, Try<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Map<MTry<Fin<B>>, Try<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Try<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Fin<A>>, Try<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Try<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Fin<A>>, Try<Fin<A>>, MFin<A>, Fin<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Try<Fin<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Fin<A>>, Try<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Try<Fin<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Fin<A>>, Try<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Try&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Try<Fin<A>> ma, Action<A> f) =>
            default(Trans<MTry<Fin<A>>, Try<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Try&lt;Fin&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Try<Fin<A>> filterT< A>(Try<Fin<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTry<Fin<A>>, Try<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MTry<Fin<A>>, Try<Fin<A>>, MFin<A>, Fin<A>, A>(ma, 
                    a => pred(a)
                        ? default(MFin<A>).Pure(a)
                        : default(MFin<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Fin&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Try<Fin<A>> plusT<NUM,  A>(Try<Fin<A>> x, Try<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Fin&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Try<Fin<A>> subtractT<NUM,  A>(Try<Fin<A>> x, Try<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Try<Fin<A>> productT<NUM,  A>(Try<Fin<A>> x, Try<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Try<Fin<A>> divideT<NUM,  A>(Try<Fin<A>> x, Try<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Try<Fin<A>> appendT<SEMI,  A>(Try<Fin<A>> x, Try<Fin<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Try<Fin<A>> x, Try<Fin<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Try<Fin<A>> x, Try<Fin<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Fin<B>> applyT< A, B>(Func<A, B> fab, Try<Fin<A>> fa) =>
            default(ApplTry< Fin<A>, Fin<B>>).Apply(
                 default(MTry< Func<Fin<A>, Fin<B>>>).Pure((Fin<A> a) => default(ApplFin< A, B>).Apply(
                     default(MFin< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Fin<B>> applyT< A, B>(Try<Fin<Func<A, B>>> fab, Try<Fin<A>> fa) =>
            default(MTry<Fin<Func<A, B>>>).Bind<MTry<Fin<B>>, Try<Fin<B>>, Fin<B>>(fab, f =>
                default(MTry<Fin<A>>).Bind<MTry<Fin<B>>, Try<Fin<B>>, Fin<B>>(fa, a => 
                    default(MTry<Fin<B>>).Pure(default(ApplFin< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Fin&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Try&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Try<Fin<C>> applyT< A, B, C>(Func<A, B, C> fabc, Try<Fin<A>> fa, Try<Fin<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Try&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Option&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Try&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Try<Option<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTry<Option<A>>, Try<Option<A>>, MOption<A>, Option<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Try&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Option&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Try&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Try<Option<A>> ma) =>
            default(Trans<MTry<Option<A>>, Try<Option<A>>, MOption<A>, Option<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Try&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Option<B>> bindT< A, B>(Try<Option<A>> ma, Func<A, Option<B>> f) =>
            default(Trans<MTry<Option<A>>, Try<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MTry<Option<B>>, Try<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Try&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Try&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Try&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Option<Try<B>> traverse< A, B>(Try<Option<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Try&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Try&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Option<Try<A>> sequence< A>(Try<Option<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Option<B>> mapT< A, B>(Try<Option<A>> ma, Func<A, B> f) =>
            default(Trans<MTry<Option<A>>, Try<Option<A>>, MOption<A>, Option<A>, A>)
                .Map<MTry<Option<B>>, Try<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Try<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Option<A>>, Try<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Try<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Option<A>>, Try<Option<A>>, MOption<A>, Option<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Try<Option<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Option<A>>, Try<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Try<Option<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Option<A>>, Try<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Try&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Try<Option<A>> ma, Action<A> f) =>
            default(Trans<MTry<Option<A>>, Try<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Try&lt;Option&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Try<Option<A>> filterT< A>(Try<Option<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTry<Option<A>>, Try<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MTry<Option<A>>, Try<Option<A>>, MOption<A>, Option<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOption<A>).Pure(a)
                        : default(MOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Option&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Try<Option<A>> plusT<NUM,  A>(Try<Option<A>> x, Try<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Option&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Try<Option<A>> subtractT<NUM,  A>(Try<Option<A>> x, Try<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Option&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Try<Option<A>> productT<NUM,  A>(Try<Option<A>> x, Try<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Option&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Try<Option<A>> divideT<NUM,  A>(Try<Option<A>> x, Try<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Option&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Try<Option<A>> appendT<SEMI,  A>(Try<Option<A>> x, Try<Option<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Try<Option<A>> x, Try<Option<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Option&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Try<Option<A>> x, Try<Option<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Option<B>> applyT< A, B>(Func<A, B> fab, Try<Option<A>> fa) =>
            default(ApplTry< Option<A>, Option<B>>).Apply(
                 default(MTry< Func<Option<A>, Option<B>>>).Pure((Option<A> a) => default(ApplOption< A, B>).Apply(
                     default(MOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Option<B>> applyT< A, B>(Try<Option<Func<A, B>>> fab, Try<Option<A>> fa) =>
            default(MTry<Option<Func<A, B>>>).Bind<MTry<Option<B>>, Try<Option<B>>, Option<B>>(fab, f =>
                default(MTry<Option<A>>).Bind<MTry<Option<B>>, Try<Option<B>>, Option<B>>(fa, a => 
                    default(MTry<Option<B>>).Pure(default(ApplOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Option&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Try&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Option&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Try<Option<C>> applyT< A, B, C>(Func<A, B, C> fabc, Try<Option<A>> fa, Try<Option<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Try&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Try&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Try<OptionUnsafe<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTry<OptionUnsafe<A>>, Try<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Try&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Try&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Try<OptionUnsafe<A>> ma) =>
            default(Trans<MTry<OptionUnsafe<A>>, Try<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Try&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<OptionUnsafe<B>> bindT< A, B>(Try<OptionUnsafe<A>> ma, Func<A, OptionUnsafe<B>> f) =>
            default(Trans<MTry<OptionUnsafe<A>>, Try<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MTry<OptionUnsafe<B>>, Try<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Try&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Try&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Try&lt;B&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Try<B>> traverse< A, B>(Try<OptionUnsafe<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Try&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Try&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Try<A>> sequence< A>(Try<OptionUnsafe<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<OptionUnsafe<B>> mapT< A, B>(Try<OptionUnsafe<A>> ma, Func<A, B> f) =>
            default(Trans<MTry<OptionUnsafe<A>>, Try<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Map<MTry<OptionUnsafe<B>>, Try<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Try<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<OptionUnsafe<A>>, Try<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Try<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<OptionUnsafe<A>>, Try<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Try<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<OptionUnsafe<A>>, Try<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Try<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<OptionUnsafe<A>>, Try<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Try&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Try<OptionUnsafe<A>> ma, Action<A> f) =>
            default(Trans<MTry<OptionUnsafe<A>>, Try<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Try&lt;OptionUnsafe&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Try<OptionUnsafe<A>> filterT< A>(Try<OptionUnsafe<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTry<OptionUnsafe<A>>, Try<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MTry<OptionUnsafe<A>>, Try<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOptionUnsafe<A>).Pure(a)
                        : default(MOptionUnsafe<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Try<OptionUnsafe<A>> plusT<NUM,  A>(Try<OptionUnsafe<A>> x, Try<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Try<OptionUnsafe<A>> subtractT<NUM,  A>(Try<OptionUnsafe<A>> x, Try<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Try<OptionUnsafe<A>> productT<NUM,  A>(Try<OptionUnsafe<A>> x, Try<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Try<OptionUnsafe<A>> divideT<NUM,  A>(Try<OptionUnsafe<A>> x, Try<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Try<OptionUnsafe<A>> appendT<SEMI,  A>(Try<OptionUnsafe<A>> x, Try<OptionUnsafe<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Try<OptionUnsafe<A>> x, Try<OptionUnsafe<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Try<OptionUnsafe<A>> x, Try<OptionUnsafe<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<OptionUnsafe<B>> applyT< A, B>(Func<A, B> fab, Try<OptionUnsafe<A>> fa) =>
            default(ApplTry< OptionUnsafe<A>, OptionUnsafe<B>>).Apply(
                 default(MTry< Func<OptionUnsafe<A>, OptionUnsafe<B>>>).Pure((OptionUnsafe<A> a) => default(ApplOptionUnsafe< A, B>).Apply(
                     default(MOptionUnsafe< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<OptionUnsafe<B>> applyT< A, B>(Try<OptionUnsafe<Func<A, B>>> fab, Try<OptionUnsafe<A>> fa) =>
            default(MTry<OptionUnsafe<Func<A, B>>>).Bind<MTry<OptionUnsafe<B>>, Try<OptionUnsafe<B>>, OptionUnsafe<B>>(fab, f =>
                default(MTry<OptionUnsafe<A>>).Bind<MTry<OptionUnsafe<B>>, Try<OptionUnsafe<B>>, OptionUnsafe<B>>(fa, a => 
                    default(MTry<OptionUnsafe<B>>).Pure(default(ApplOptionUnsafe< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Try&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Try&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Try<OptionUnsafe<C>> applyT< A, B, C>(Func<A, B, C> fabc, Try<OptionUnsafe<A>> fa, Try<OptionUnsafe<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Try&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Either&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Try&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Try<Either<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTry<Either<L, A>>, Try<Either<L, A>>, MEither<L, A>, Either<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Try&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Either&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Try&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Try<Either<L, A>> ma) =>
            default(Trans<MTry<Either<L, A>>, Try<Either<L, A>>, MEither<L, A>, Either<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Try&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Either<L, B>> bindT<L, A, B>(Try<Either<L, A>> ma, Func<A, Either<L, B>> f) =>
            default(Trans<MTry<Either<L, A>>, Try<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MTry<Either<L, B>>, Try<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Try&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Try&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Try&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Try<B>> traverse<L, A, B>(Try<Either<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Try&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Try&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Try<A>> sequence<L, A>(Try<Either<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Either<L, B>> mapT<L, A, B>(Try<Either<L, A>> ma, Func<A, B> f) =>
            default(Trans<MTry<Either<L, A>>, Try<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Map<MTry<Either<L, B>>, Try<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Try<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Either<L, A>>, Try<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Try<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Either<L, A>>, Try<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Try<Either<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Either<L, A>>, Try<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Try<Either<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Either<L, A>>, Try<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Try&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Try<Either<L, A>> ma, Action<A> f) =>
            default(Trans<MTry<Either<L, A>>, Try<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Try&lt;Either&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Try<Either<L, A>> filterT<L, A>(Try<Either<L, A>> ma, Func<A, bool> pred) =>
            default(Trans<MTry<Either<L, A>>, Try<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MTry<Either<L, A>>, Try<Either<L, A>>, MEither<L, A>, Either<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEither<L, A>).Pure(a)
                        : default(MEither<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Try<Either<L, A>> plusT<NUM, L, A>(Try<Either<L, A>> x, Try<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Try<Either<L, A>> subtractT<NUM, L, A>(Try<Either<L, A>> x, Try<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Try<Either<L, A>> productT<NUM, L, A>(Try<Either<L, A>> x, Try<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Try<Either<L, A>> divideT<NUM, L, A>(Try<Either<L, A>> x, Try<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Try<Either<L, A>> appendT<SEMI, L, A>(Try<Either<L, A>> x, Try<Either<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Try<Either<L, A>> x, Try<Either<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Try<Either<L, A>> x, Try<Either<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Try&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Either<L, B>> applyT<L, A, B>(Func<A, B> fab, Try<Either<L, A>> fa) =>
            default(ApplTry< Either<L, A>, Either<L, B>>).Apply(
                 default(MTry< Func<Either<L, A>, Either<L, B>>>).Pure((Either<L, A> a) => default(ApplEither<L, A, B>).Apply(
                     default(MEither<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Try&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Either<L, B>> applyT<L, A, B>(Try<Either<L, Func<A, B>>> fab, Try<Either<L, A>> fa) =>
            default(MTry<Either<L, Func<A, B>>>).Bind<MTry<Either<L, B>>, Try<Either<L, B>>, Either<L, B>>(fab, f =>
                default(MTry<Either<L, A>>).Bind<MTry<Either<L, B>>, Try<Either<L, B>>, Either<L, B>>(fa, a => 
                    default(MTry<Either<L, B>>).Pure(default(ApplEither<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Try&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Try&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Try<Either<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Try<Either<L, A>> fa, Try<Either<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Try<EitherUnsafe<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTry<EitherUnsafe<L, A>>, Try<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Try<EitherUnsafe<L, A>> ma) =>
            default(Trans<MTry<EitherUnsafe<L, A>>, Try<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Try&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<EitherUnsafe<L, B>> bindT<L, A, B>(Try<EitherUnsafe<L, A>> ma, Func<A, EitherUnsafe<L, B>> f) =>
            default(Trans<MTry<EitherUnsafe<L, A>>, Try<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MTry<EitherUnsafe<L, B>>, Try<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Try&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Try&lt;B&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Try<B>> traverse<L, A, B>(Try<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Try&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Try<A>> sequence<L, A>(Try<EitherUnsafe<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<EitherUnsafe<L, B>> mapT<L, A, B>(Try<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            default(Trans<MTry<EitherUnsafe<L, A>>, Try<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Map<MTry<EitherUnsafe<L, B>>, Try<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Try<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<EitherUnsafe<L, A>>, Try<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Try<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<EitherUnsafe<L, A>>, Try<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Try<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<EitherUnsafe<L, A>>, Try<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Try<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<EitherUnsafe<L, A>>, Try<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Try<EitherUnsafe<L, A>> ma, Action<A> f) =>
            default(Trans<MTry<EitherUnsafe<L, A>>, Try<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Try<EitherUnsafe<L, A>> filterT<L, A>(Try<EitherUnsafe<L, A>> ma, Func<A, bool> pred) =>
            default(Trans<MTry<EitherUnsafe<L, A>>, Try<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MTry<EitherUnsafe<L, A>>, Try<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEitherUnsafe<L, A>).Pure(a)
                        : default(MEitherUnsafe<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Try<EitherUnsafe<L, A>> plusT<NUM, L, A>(Try<EitherUnsafe<L, A>> x, Try<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Try<EitherUnsafe<L, A>> subtractT<NUM, L, A>(Try<EitherUnsafe<L, A>> x, Try<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Try<EitherUnsafe<L, A>> productT<NUM, L, A>(Try<EitherUnsafe<L, A>> x, Try<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Try<EitherUnsafe<L, A>> divideT<NUM, L, A>(Try<EitherUnsafe<L, A>> x, Try<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Try<EitherUnsafe<L, A>> appendT<SEMI, L, A>(Try<EitherUnsafe<L, A>> x, Try<EitherUnsafe<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Try<EitherUnsafe<L, A>> x, Try<EitherUnsafe<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Try<EitherUnsafe<L, A>> x, Try<EitherUnsafe<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Try&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<EitherUnsafe<L, B>> applyT<L, A, B>(Func<A, B> fab, Try<EitherUnsafe<L, A>> fa) =>
            default(ApplTry< EitherUnsafe<L, A>, EitherUnsafe<L, B>>).Apply(
                 default(MTry< Func<EitherUnsafe<L, A>, EitherUnsafe<L, B>>>).Pure((EitherUnsafe<L, A> a) => default(ApplEitherUnsafe<L, A, B>).Apply(
                     default(MEitherUnsafe<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Try&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<EitherUnsafe<L, B>> applyT<L, A, B>(Try<EitherUnsafe<L, Func<A, B>>> fab, Try<EitherUnsafe<L, A>> fa) =>
            default(MTry<EitherUnsafe<L, Func<A, B>>>).Bind<MTry<EitherUnsafe<L, B>>, Try<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fab, f =>
                default(MTry<EitherUnsafe<L, A>>).Bind<MTry<EitherUnsafe<L, B>>, Try<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fa, a => 
                    default(MTry<EitherUnsafe<L, B>>).Pure(default(ApplEitherUnsafe<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Try&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Try&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Try<EitherUnsafe<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Try<EitherUnsafe<L, A>> fa, Try<EitherUnsafe<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Try&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Try&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Try&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Try<Try<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTry<Try<A>>, Try<Try<A>>, MTry<A>, Try<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Try&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Try&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Try&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Try<Try<A>> ma) =>
            default(Trans<MTry<Try<A>>, Try<Try<A>>, MTry<A>, Try<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Try&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Try<B>> bindT< A, B>(Try<Try<A>> ma, Func<A, Try<B>> f) =>
            default(Trans<MTry<Try<A>>, Try<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MTry<Try<B>>, Try<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Try&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Try&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Try&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Try<Try<B>> traverse< A, B>(Try<Try<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Try&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Try&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Try<Try<A>> sequence< A>(Try<Try<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Try<B>> mapT< A, B>(Try<Try<A>> ma, Func<A, B> f) =>
            default(Trans<MTry<Try<A>>, Try<Try<A>>, MTry<A>, Try<A>, A>)
                .Map<MTry<Try<B>>, Try<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Try<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Try<A>>, Try<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Try<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Try<A>>, Try<Try<A>>, MTry<A>, Try<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Try<Try<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Try<A>>, Try<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Try<Try<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Try<A>>, Try<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Try&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Try<Try<A>> ma, Action<A> f) =>
            default(Trans<MTry<Try<A>>, Try<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Try&lt;Try&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Try<Try<A>> filterT< A>(Try<Try<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTry<Try<A>>, Try<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MTry<Try<A>>, Try<Try<A>>, MTry<A>, Try<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTry<A>).Pure(a)
                        : default(MTry<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Try&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Try<Try<A>> plusT<NUM,  A>(Try<Try<A>> x, Try<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Try&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Try<Try<A>> subtractT<NUM,  A>(Try<Try<A>> x, Try<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Try&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Try<Try<A>> productT<NUM,  A>(Try<Try<A>> x, Try<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Try&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Try<Try<A>> divideT<NUM,  A>(Try<Try<A>> x, Try<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Try&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Try<Try<A>> appendT<SEMI,  A>(Try<Try<A>> x, Try<Try<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Try<Try<A>> x, Try<Try<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Try&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Try<Try<A>> x, Try<Try<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Try<B>> applyT< A, B>(Func<A, B> fab, Try<Try<A>> fa) =>
            default(ApplTry< Try<A>, Try<B>>).Apply(
                 default(MTry< Func<Try<A>, Try<B>>>).Pure((Try<A> a) => default(ApplTry< A, B>).Apply(
                     default(MTry< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Try<B>> applyT< A, B>(Try<Try<Func<A, B>>> fab, Try<Try<A>> fa) =>
            default(MTry<Try<Func<A, B>>>).Bind<MTry<Try<B>>, Try<Try<B>>, Try<B>>(fab, f =>
                default(MTry<Try<A>>).Bind<MTry<Try<B>>, Try<Try<B>>, Try<B>>(fa, a => 
                    default(MTry<Try<B>>).Pure(default(ApplTry< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Try&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Try&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Try&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Try<Try<C>> applyT< A, B, C>(Func<A, B, C> fabc, Try<Try<A>> fa, Try<Try<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryOptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Try&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;TryOption&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Try&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Try<TryOption<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTry<TryOption<A>>, Try<TryOption<A>>, MTryOption<A>, TryOption<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Try&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;TryOption&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Try&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Try<TryOption<A>> ma) =>
            default(Trans<MTry<TryOption<A>>, Try<TryOption<A>>, MTryOption<A>, TryOption<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Try&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<TryOption<B>> bindT< A, B>(Try<TryOption<A>> ma, Func<A, TryOption<B>> f) =>
            default(Trans<MTry<TryOption<A>>, Try<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MTry<TryOption<B>>, Try<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Try&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Try&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Try&lt;B&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Try<B>> traverse< A, B>(Try<TryOption<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Try&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Try&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Try<A>> sequence< A>(Try<TryOption<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<TryOption<B>> mapT< A, B>(Try<TryOption<A>> ma, Func<A, B> f) =>
            default(Trans<MTry<TryOption<A>>, Try<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Map<MTry<TryOption<B>>, Try<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Try<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<TryOption<A>>, Try<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Try<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<TryOption<A>>, Try<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Try<TryOption<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<TryOption<A>>, Try<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Try<TryOption<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<TryOption<A>>, Try<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Try&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Try<TryOption<A>> ma, Action<A> f) =>
            default(Trans<MTry<TryOption<A>>, Try<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Try&lt;TryOption&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Try<TryOption<A>> filterT< A>(Try<TryOption<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTry<TryOption<A>>, Try<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MTry<TryOption<A>>, Try<TryOption<A>>, MTryOption<A>, TryOption<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTryOption<A>).Pure(a)
                        : default(MTryOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Try<TryOption<A>> plusT<NUM,  A>(Try<TryOption<A>> x, Try<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Try<TryOption<A>> subtractT<NUM,  A>(Try<TryOption<A>> x, Try<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Try<TryOption<A>> productT<NUM,  A>(Try<TryOption<A>> x, Try<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Try<TryOption<A>> divideT<NUM,  A>(Try<TryOption<A>> x, Try<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Try<TryOption<A>> appendT<SEMI,  A>(Try<TryOption<A>> x, Try<TryOption<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Try<TryOption<A>> x, Try<TryOption<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Try<TryOption<A>> x, Try<TryOption<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<TryOption<B>> applyT< A, B>(Func<A, B> fab, Try<TryOption<A>> fa) =>
            default(ApplTry< TryOption<A>, TryOption<B>>).Apply(
                 default(MTry< Func<TryOption<A>, TryOption<B>>>).Pure((TryOption<A> a) => default(ApplTryOption< A, B>).Apply(
                     default(MTryOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<TryOption<B>> applyT< A, B>(Try<TryOption<Func<A, B>>> fab, Try<TryOption<A>> fa) =>
            default(MTry<TryOption<Func<A, B>>>).Bind<MTry<TryOption<B>>, Try<TryOption<B>>, TryOption<B>>(fab, f =>
                default(MTry<TryOption<A>>).Bind<MTry<TryOption<B>>, Try<TryOption<B>>, TryOption<B>>(fa, a => 
                    default(MTry<TryOption<B>>).Pure(default(ApplTryOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Try&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Try&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Try<TryOption<C>> applyT< A, B, C>(Func<A, B, C> fabc, Try<TryOption<A>> fa, Try<TryOption<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class IEnumerableT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Try&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;IEnumerable&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Try&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Try<IEnumerable<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTry<IEnumerable<A>>, Try<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Try&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;IEnumerable&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Try&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Try<IEnumerable<A>> ma) =>
            default(Trans<MTry<IEnumerable<A>>, Try<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Try&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<IEnumerable<B>> bindT< A, B>(Try<IEnumerable<A>> ma, Func<A, IEnumerable<B>> f) =>
            default(Trans<MTry<IEnumerable<A>>, Try<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MTry<IEnumerable<B>>, Try<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Try&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Try&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Try&lt;B&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Try<B>> traverse< A, B>(Try<IEnumerable<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Try&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Try&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Try<A>> sequence< A>(Try<IEnumerable<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<IEnumerable<B>> mapT< A, B>(Try<IEnumerable<A>> ma, Func<A, B> f) =>
            default(Trans<MTry<IEnumerable<A>>, Try<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Map<MTry<IEnumerable<B>>, Try<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Try<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<IEnumerable<A>>, Try<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Try<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<IEnumerable<A>>, Try<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Try<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<IEnumerable<A>>, Try<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Try<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<IEnumerable<A>>, Try<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Try&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Try<IEnumerable<A>> ma, Action<A> f) =>
            default(Trans<MTry<IEnumerable<A>>, Try<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Try&lt;IEnumerable&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Try<IEnumerable<A>> filterT< A>(Try<IEnumerable<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTry<IEnumerable<A>>, Try<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MTry<IEnumerable<A>>, Try<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>(ma, 
                    a => pred(a)
                        ? default(MEnumerable<A>).Pure(a)
                        : default(MEnumerable<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Try<IEnumerable<A>> plusT<NUM,  A>(Try<IEnumerable<A>> x, Try<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Try<IEnumerable<A>> subtractT<NUM,  A>(Try<IEnumerable<A>> x, Try<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Try<IEnumerable<A>> productT<NUM,  A>(Try<IEnumerable<A>> x, Try<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Try<IEnumerable<A>> divideT<NUM,  A>(Try<IEnumerable<A>> x, Try<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Try<IEnumerable<A>> appendT<SEMI,  A>(Try<IEnumerable<A>> x, Try<IEnumerable<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Try<IEnumerable<A>> x, Try<IEnumerable<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Try<IEnumerable<A>> x, Try<IEnumerable<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<IEnumerable<B>> applyT< A, B>(Func<A, B> fab, Try<IEnumerable<A>> fa) =>
            default(ApplTry< IEnumerable<A>, IEnumerable<B>>).Apply(
                 default(MTry< Func<IEnumerable<A>, IEnumerable<B>>>).Pure((IEnumerable<A> a) => default(ApplEnumerable< A, B>).Apply(
                     default(MEnumerable< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<IEnumerable<B>> applyT< A, B>(Try<IEnumerable<Func<A, B>>> fab, Try<IEnumerable<A>> fa) =>
            default(MTry<IEnumerable<Func<A, B>>>).Bind<MTry<IEnumerable<B>>, Try<IEnumerable<B>>, IEnumerable<B>>(fab, f =>
                default(MTry<IEnumerable<A>>).Bind<MTry<IEnumerable<B>>, Try<IEnumerable<B>>, IEnumerable<B>>(fa, a => 
                    default(MTry<IEnumerable<B>>).Pure(default(ApplEnumerable< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Try&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Try&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Try<IEnumerable<C>> applyT< A, B, C>(Func<A, B, C> fabc, Try<IEnumerable<A>> fa, Try<IEnumerable<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SeqT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Try&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Seq&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Try&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Try<Seq<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTry<Seq<A>>, Try<Seq<A>>, MSeq<A>, Seq<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Try&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Seq&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Try&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Try<Seq<A>> ma) =>
            default(Trans<MTry<Seq<A>>, Try<Seq<A>>, MSeq<A>, Seq<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Try&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Seq<B>> bindT< A, B>(Try<Seq<A>> ma, Func<A, Seq<B>> f) =>
            default(Trans<MTry<Seq<A>>, Try<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MTry<Seq<B>>, Try<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Try&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Try&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Try&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Seq<Try<B>> traverse< A, B>(Try<Seq<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Try&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Try&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Seq<Try<A>> sequence< A>(Try<Seq<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Seq<B>> mapT< A, B>(Try<Seq<A>> ma, Func<A, B> f) =>
            default(Trans<MTry<Seq<A>>, Try<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Map<MTry<Seq<B>>, Try<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Try<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Seq<A>>, Try<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Try<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Seq<A>>, Try<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Try<Seq<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Seq<A>>, Try<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Try<Seq<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Seq<A>>, Try<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Try&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Try<Seq<A>> ma, Action<A> f) =>
            default(Trans<MTry<Seq<A>>, Try<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Try&lt;Seq&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Try<Seq<A>> filterT< A>(Try<Seq<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTry<Seq<A>>, Try<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MTry<Seq<A>>, Try<Seq<A>>, MSeq<A>, Seq<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSeq<A>).Pure(a)
                        : default(MSeq<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Seq&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Try<Seq<A>> plusT<NUM,  A>(Try<Seq<A>> x, Try<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Seq&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Try<Seq<A>> subtractT<NUM,  A>(Try<Seq<A>> x, Try<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Try<Seq<A>> productT<NUM,  A>(Try<Seq<A>> x, Try<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Try<Seq<A>> divideT<NUM,  A>(Try<Seq<A>> x, Try<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Try<Seq<A>> appendT<SEMI,  A>(Try<Seq<A>> x, Try<Seq<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Try<Seq<A>> x, Try<Seq<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Try<Seq<A>> x, Try<Seq<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Seq<B>> applyT< A, B>(Func<A, B> fab, Try<Seq<A>> fa) =>
            default(ApplTry< Seq<A>, Seq<B>>).Apply(
                 default(MTry< Func<Seq<A>, Seq<B>>>).Pure((Seq<A> a) => default(ApplSeq< A, B>).Apply(
                     default(MSeq< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Seq<B>> applyT< A, B>(Try<Seq<Func<A, B>>> fab, Try<Seq<A>> fa) =>
            default(MTry<Seq<Func<A, B>>>).Bind<MTry<Seq<B>>, Try<Seq<B>>, Seq<B>>(fab, f =>
                default(MTry<Seq<A>>).Bind<MTry<Seq<B>>, Try<Seq<B>>, Seq<B>>(fa, a => 
                    default(MTry<Seq<B>>).Pure(default(ApplSeq< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Seq&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Try&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Try<Seq<C>> applyT< A, B, C>(Func<A, B, C> fabc, Try<Seq<A>> fa, Try<Seq<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Try&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Set&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Try&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Try<Set<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTry<Set<A>>, Try<Set<A>>, MSet<A>, Set<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Try&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Set&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Try&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Try<Set<A>> ma) =>
            default(Trans<MTry<Set<A>>, Try<Set<A>>, MSet<A>, Set<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Try&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Set<B>> bindT< A, B>(Try<Set<A>> ma, Func<A, Set<B>> f) =>
            default(Trans<MTry<Set<A>>, Try<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MTry<Set<B>>, Try<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Try&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Try&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Try&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Set<Try<B>> traverse< A, B>(Try<Set<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Try&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Try&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Set<Try<A>> sequence< A>(Try<Set<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Set<B>> mapT< A, B>(Try<Set<A>> ma, Func<A, B> f) =>
            default(Trans<MTry<Set<A>>, Try<Set<A>>, MSet<A>, Set<A>, A>)
                .Map<MTry<Set<B>>, Try<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Try<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Set<A>>, Try<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Try<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Set<A>>, Try<Set<A>>, MSet<A>, Set<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Try<Set<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Set<A>>, Try<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Try<Set<A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Set<A>>, Try<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Try&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Try<Set<A>> ma, Action<A> f) =>
            default(Trans<MTry<Set<A>>, Try<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Try&lt;Set&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Try<Set<A>> filterT< A>(Try<Set<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTry<Set<A>>, Try<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MTry<Set<A>>, Try<Set<A>>, MSet<A>, Set<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSet<A>).Pure(a)
                        : default(MSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Set&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Try<Set<A>> plusT<NUM,  A>(Try<Set<A>> x, Try<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Set&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Try<Set<A>> subtractT<NUM,  A>(Try<Set<A>> x, Try<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Set&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Try<Set<A>> productT<NUM,  A>(Try<Set<A>> x, Try<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Set&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Try<Set<A>> divideT<NUM,  A>(Try<Set<A>> x, Try<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Set&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Try<Set<A>> appendT<SEMI,  A>(Try<Set<A>> x, Try<Set<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Try<Set<A>> x, Try<Set<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Set&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Try<Set<A>> x, Try<Set<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Set<B>> applyT< A, B>(Func<A, B> fab, Try<Set<A>> fa) =>
            default(ApplTry< Set<A>, Set<B>>).Apply(
                 default(MTry< Func<Set<A>, Set<B>>>).Pure((Set<A> a) => default(ApplSet< A, B>).Apply(
                     default(MSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Set<B>> applyT< A, B>(Try<Set<Func<A, B>>> fab, Try<Set<A>> fa) =>
            default(MTry<Set<Func<A, B>>>).Bind<MTry<Set<B>>, Try<Set<B>>, Set<B>>(fab, f =>
                default(MTry<Set<A>>).Bind<MTry<Set<B>>, Try<Set<B>>, Set<B>>(fa, a => 
                    default(MTry<Set<B>>).Pure(default(ApplSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Set&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Try&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Try&lt;Set&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Try<Set<C>> applyT< A, B, C>(Func<A, B, C> fabc, Try<Set<A>> fa, Try<Set<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ValidationT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Try&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Try&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Try<Validation<FAIL, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTry<Validation<FAIL, A>>, Try<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Try&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Try&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Try<Validation<FAIL, A>> ma) =>
            default(Trans<MTry<Validation<FAIL, A>>, Try<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Try&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Validation<FAIL, B>> bindT<FAIL, A, B>(Try<Validation<FAIL, A>> ma, Func<A, Validation<FAIL, B>> f) =>
            default(Trans<MTry<Validation<FAIL, A>>, Try<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MTry<Validation<FAIL, B>>, Try<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Try&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Try&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Try&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Try<B>> traverse<FAIL, A, B>(Try<Validation<FAIL, A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Try&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Try&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Try<A>> sequence<FAIL, A>(Try<Validation<FAIL, A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Try<Validation<FAIL, B>> mapT<FAIL, A, B>(Try<Validation<FAIL, A>> ma, Func<A, B> f) =>
            default(Trans<MTry<Validation<FAIL, A>>, Try<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Map<MTry<Validation<FAIL, B>>, Try<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Try<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Validation<FAIL, A>>, Try<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Try&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Try<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTry<Validation<FAIL, A>>, Try<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Try<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Validation<FAIL, A>>, Try<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Try<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(Trans<MTry<Validation<FAIL, A>>, Try<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Try&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Try<Validation<FAIL, A>> ma, Action<A> f) =>
            default(Trans<MTry<Validation<FAIL, A>>, Try<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Try&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Try&lt;Validation&lt;FAIL, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Try<Validation<FAIL, A>> filterT<FAIL, A>(Try<Validation<FAIL, A>> ma, Func<A, bool> pred) =>
            default(Trans<MTry<Validation<FAIL, A>>, Try<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MTry<Validation<FAIL, A>>, Try<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>(ma, 
                    a => pred(a)
                        ? default(MValidation<FAIL, A>).Pure(a)
                        : default(MValidation<FAIL, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Try<Validation<FAIL, A>> plusT<NUM, FAIL, A>(Try<Validation<FAIL, A>> x, Try<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Try<Validation<FAIL, A>> subtractT<NUM, FAIL, A>(Try<Validation<FAIL, A>> x, Try<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Try<Validation<FAIL, A>> productT<NUM, FAIL, A>(Try<Validation<FAIL, A>> x, Try<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Try<Validation<FAIL, A>> divideT<NUM, FAIL, A>(Try<Validation<FAIL, A>> x, Try<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Try<Validation<FAIL, A>> appendT<SEMI, FAIL, A>(Try<Validation<FAIL, A>> x, Try<Validation<FAIL, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Try<Validation<FAIL, A>> x, Try<Validation<FAIL, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Try&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Try<Validation<FAIL, A>> x, Try<Validation<FAIL, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Try&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Validation<FAIL, B>> applyT<FAIL, A, B>(Func<A, B> fab, Try<Validation<FAIL, A>> fa) =>
            default(ApplTry< Validation<FAIL, A>, Validation<FAIL, B>>).Apply(
                 default(MTry< Func<Validation<FAIL, A>, Validation<FAIL, B>>>).Pure((Validation<FAIL, A> a) => default(ApplValidation<FAIL, A, B>).Apply(
                     default(MValidation<FAIL, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Try&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Try<Validation<FAIL, B>> applyT<FAIL, A, B>(Try<Validation<FAIL, Func<A, B>>> fab, Try<Validation<FAIL, A>> fa) =>
            default(MTry<Validation<FAIL, Func<A, B>>>).Bind<MTry<Validation<FAIL, B>>, Try<Validation<FAIL, B>>, Validation<FAIL, B>>(fab, f =>
                default(MTry<Validation<FAIL, A>>).Bind<MTry<Validation<FAIL, B>>, Try<Validation<FAIL, B>>, Validation<FAIL, B>>(fa, a => 
                    default(MTry<Validation<FAIL, B>>).Pure(default(ApplValidation<FAIL, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Try&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Try&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Try&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Try<Validation<FAIL, C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Try<Validation<FAIL, A>> fa, Try<Validation<FAIL, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ArrT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `TryOption&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Arr&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `TryOption&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(TryOption<Arr<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTryOption<Arr<A>>, TryOption<Arr<A>>, MArr<A>, Arr<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `TryOption&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Arr&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `TryOption&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(TryOption<Arr<A>> ma) =>
            default(Trans<MTryOption<Arr<A>>, TryOption<Arr<A>>, MArr<A>, Arr<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`TryOption&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Arr<B>> bindT< A, B>(TryOption<Arr<A>> ma, Func<A, Arr<B>> f) =>
            default(Trans<MTryOption<Arr<A>>, TryOption<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MTryOption<Arr<B>>, TryOption<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `TryOption&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;TryOption&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;TryOption&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Arr<TryOption<B>> traverse< A, B>(TryOption<Arr<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `TryOption&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;TryOption&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Arr<TryOption<A>> sequence< A>(TryOption<Arr<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Arr<B>> mapT< A, B>(TryOption<Arr<A>> ma, Func<A, B> f) =>
            default(Trans<MTryOption<Arr<A>>, TryOption<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Map<MTryOption<Arr<B>>, TryOption<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(TryOption<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Arr<A>>, TryOption<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(TryOption<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Arr<A>>, TryOption<Arr<A>>, MArr<A>, Arr<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(TryOption<Arr<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Arr<A>>, TryOption<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(TryOption<Arr<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Arr<A>>, TryOption<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `TryOption&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(TryOption<Arr<A>> ma, Action<A> f) =>
            default(Trans<MTryOption<Arr<A>>, TryOption<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`TryOption&lt;Arr&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static TryOption<Arr<A>> filterT< A>(TryOption<Arr<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTryOption<Arr<A>>, TryOption<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MTryOption<Arr<A>>, TryOption<Arr<A>>, MArr<A>, Arr<A>, A>(ma, 
                    a => pred(a)
                        ? default(MArr<A>).Pure(a)
                        : default(MArr<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Arr&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static TryOption<Arr<A>> plusT<NUM,  A>(TryOption<Arr<A>> x, TryOption<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Arr&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static TryOption<Arr<A>> subtractT<NUM,  A>(TryOption<Arr<A>> x, TryOption<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static TryOption<Arr<A>> productT<NUM,  A>(TryOption<Arr<A>> x, TryOption<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static TryOption<Arr<A>> divideT<NUM,  A>(TryOption<Arr<A>> x, TryOption<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static TryOption<Arr<A>> appendT<SEMI,  A>(TryOption<Arr<A>> x, TryOption<Arr<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(TryOption<Arr<A>> x, TryOption<Arr<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(TryOption<Arr<A>> x, TryOption<Arr<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Arr<B>> applyT< A, B>(Func<A, B> fab, TryOption<Arr<A>> fa) =>
            default(ApplTryOption< Arr<A>, Arr<B>>).Apply(
                 default(MTryOption< Func<Arr<A>, Arr<B>>>).Pure((Arr<A> a) => default(ApplArr< A, B>).Apply(
                     default(MArr< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Arr<B>> applyT< A, B>(TryOption<Arr<Func<A, B>>> fab, TryOption<Arr<A>> fa) =>
            default(MTryOption<Arr<Func<A, B>>>).Bind<MTryOption<Arr<B>>, TryOption<Arr<B>>, Arr<B>>(fab, f =>
                default(MTryOption<Arr<A>>).Bind<MTryOption<Arr<B>>, TryOption<Arr<B>>, Arr<B>>(fa, a => 
                    default(MTryOption<Arr<B>>).Pure(default(ApplArr< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Arr&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `TryOption&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static TryOption<Arr<C>> applyT< A, B, C>(Func<A, B, C> fabc, TryOption<Arr<A>> fa, TryOption<Arr<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class HashSetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `TryOption&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;HashSet&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `TryOption&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(TryOption<HashSet<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTryOption<HashSet<A>>, TryOption<HashSet<A>>, MHashSet<A>, HashSet<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `TryOption&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;HashSet&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `TryOption&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(TryOption<HashSet<A>> ma) =>
            default(Trans<MTryOption<HashSet<A>>, TryOption<HashSet<A>>, MHashSet<A>, HashSet<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`TryOption&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<HashSet<B>> bindT< A, B>(TryOption<HashSet<A>> ma, Func<A, HashSet<B>> f) =>
            default(Trans<MTryOption<HashSet<A>>, TryOption<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MTryOption<HashSet<B>>, TryOption<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `TryOption&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;TryOption&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;TryOption&lt;B&gt;&gt;`</returns>
        [Pure]
        public static HashSet<TryOption<B>> traverse< A, B>(TryOption<HashSet<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `TryOption&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;TryOption&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static HashSet<TryOption<A>> sequence< A>(TryOption<HashSet<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<HashSet<B>> mapT< A, B>(TryOption<HashSet<A>> ma, Func<A, B> f) =>
            default(Trans<MTryOption<HashSet<A>>, TryOption<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Map<MTryOption<HashSet<B>>, TryOption<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(TryOption<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<HashSet<A>>, TryOption<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(TryOption<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<HashSet<A>>, TryOption<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(TryOption<HashSet<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<HashSet<A>>, TryOption<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(TryOption<HashSet<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<HashSet<A>>, TryOption<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `TryOption&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(TryOption<HashSet<A>> ma, Action<A> f) =>
            default(Trans<MTryOption<HashSet<A>>, TryOption<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`TryOption&lt;HashSet&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static TryOption<HashSet<A>> filterT< A>(TryOption<HashSet<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTryOption<HashSet<A>>, TryOption<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MTryOption<HashSet<A>>, TryOption<HashSet<A>>, MHashSet<A>, HashSet<A>, A>(ma, 
                    a => pred(a)
                        ? default(MHashSet<A>).Pure(a)
                        : default(MHashSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static TryOption<HashSet<A>> plusT<NUM,  A>(TryOption<HashSet<A>> x, TryOption<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static TryOption<HashSet<A>> subtractT<NUM,  A>(TryOption<HashSet<A>> x, TryOption<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static TryOption<HashSet<A>> productT<NUM,  A>(TryOption<HashSet<A>> x, TryOption<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static TryOption<HashSet<A>> divideT<NUM,  A>(TryOption<HashSet<A>> x, TryOption<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static TryOption<HashSet<A>> appendT<SEMI,  A>(TryOption<HashSet<A>> x, TryOption<HashSet<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(TryOption<HashSet<A>> x, TryOption<HashSet<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(TryOption<HashSet<A>> x, TryOption<HashSet<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<HashSet<B>> applyT< A, B>(Func<A, B> fab, TryOption<HashSet<A>> fa) =>
            default(ApplTryOption< HashSet<A>, HashSet<B>>).Apply(
                 default(MTryOption< Func<HashSet<A>, HashSet<B>>>).Pure((HashSet<A> a) => default(ApplHashSet< A, B>).Apply(
                     default(MHashSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<HashSet<B>> applyT< A, B>(TryOption<HashSet<Func<A, B>>> fab, TryOption<HashSet<A>> fa) =>
            default(MTryOption<HashSet<Func<A, B>>>).Bind<MTryOption<HashSet<B>>, TryOption<HashSet<B>>, HashSet<B>>(fab, f =>
                default(MTryOption<HashSet<A>>).Bind<MTryOption<HashSet<B>>, TryOption<HashSet<B>>, HashSet<B>>(fa, a => 
                    default(MTryOption<HashSet<B>>).Pure(default(ApplHashSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `TryOption&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static TryOption<HashSet<C>> applyT< A, B, C>(Func<A, B, C> fabc, TryOption<HashSet<A>> fa, TryOption<HashSet<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class LstT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `TryOption&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Lst&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `TryOption&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(TryOption<Lst<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTryOption<Lst<A>>, TryOption<Lst<A>>, MLst<A>, Lst<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `TryOption&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Lst&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `TryOption&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(TryOption<Lst<A>> ma) =>
            default(Trans<MTryOption<Lst<A>>, TryOption<Lst<A>>, MLst<A>, Lst<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`TryOption&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Lst<B>> bindT< A, B>(TryOption<Lst<A>> ma, Func<A, Lst<B>> f) =>
            default(Trans<MTryOption<Lst<A>>, TryOption<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MTryOption<Lst<B>>, TryOption<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `TryOption&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;TryOption&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;TryOption&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Lst<TryOption<B>> traverse< A, B>(TryOption<Lst<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `TryOption&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;TryOption&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Lst<TryOption<A>> sequence< A>(TryOption<Lst<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Lst<B>> mapT< A, B>(TryOption<Lst<A>> ma, Func<A, B> f) =>
            default(Trans<MTryOption<Lst<A>>, TryOption<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Map<MTryOption<Lst<B>>, TryOption<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(TryOption<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Lst<A>>, TryOption<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(TryOption<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Lst<A>>, TryOption<Lst<A>>, MLst<A>, Lst<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(TryOption<Lst<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Lst<A>>, TryOption<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(TryOption<Lst<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Lst<A>>, TryOption<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `TryOption&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(TryOption<Lst<A>> ma, Action<A> f) =>
            default(Trans<MTryOption<Lst<A>>, TryOption<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`TryOption&lt;Lst&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static TryOption<Lst<A>> filterT< A>(TryOption<Lst<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTryOption<Lst<A>>, TryOption<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MTryOption<Lst<A>>, TryOption<Lst<A>>, MLst<A>, Lst<A>, A>(ma, 
                    a => pred(a)
                        ? default(MLst<A>).Pure(a)
                        : default(MLst<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Lst&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static TryOption<Lst<A>> plusT<NUM,  A>(TryOption<Lst<A>> x, TryOption<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Lst&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static TryOption<Lst<A>> subtractT<NUM,  A>(TryOption<Lst<A>> x, TryOption<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static TryOption<Lst<A>> productT<NUM,  A>(TryOption<Lst<A>> x, TryOption<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static TryOption<Lst<A>> divideT<NUM,  A>(TryOption<Lst<A>> x, TryOption<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static TryOption<Lst<A>> appendT<SEMI,  A>(TryOption<Lst<A>> x, TryOption<Lst<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(TryOption<Lst<A>> x, TryOption<Lst<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(TryOption<Lst<A>> x, TryOption<Lst<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Lst<B>> applyT< A, B>(Func<A, B> fab, TryOption<Lst<A>> fa) =>
            default(ApplTryOption< Lst<A>, Lst<B>>).Apply(
                 default(MTryOption< Func<Lst<A>, Lst<B>>>).Pure((Lst<A> a) => default(ApplLst< A, B>).Apply(
                     default(MLst< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Lst<B>> applyT< A, B>(TryOption<Lst<Func<A, B>>> fab, TryOption<Lst<A>> fa) =>
            default(MTryOption<Lst<Func<A, B>>>).Bind<MTryOption<Lst<B>>, TryOption<Lst<B>>, Lst<B>>(fab, f =>
                default(MTryOption<Lst<A>>).Bind<MTryOption<Lst<B>>, TryOption<Lst<B>>, Lst<B>>(fa, a => 
                    default(MTryOption<Lst<B>>).Pure(default(ApplLst< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Lst&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `TryOption&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static TryOption<Lst<C>> applyT< A, B, C>(Func<A, B, C> fabc, TryOption<Lst<A>> fa, TryOption<Lst<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class FinT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `TryOption&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Fin&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `TryOption&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(TryOption<Fin<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTryOption<Fin<A>>, TryOption<Fin<A>>, MFin<A>, Fin<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `TryOption&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Fin&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `TryOption&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(TryOption<Fin<A>> ma) =>
            default(Trans<MTryOption<Fin<A>>, TryOption<Fin<A>>, MFin<A>, Fin<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`TryOption&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Fin<B>> bindT< A, B>(TryOption<Fin<A>> ma, Func<A, Fin<B>> f) =>
            default(Trans<MTryOption<Fin<A>>, TryOption<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MTryOption<Fin<B>>, TryOption<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `TryOption&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;TryOption&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;TryOption&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Fin<TryOption<B>> traverse< A, B>(TryOption<Fin<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `TryOption&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;TryOption&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Fin<TryOption<A>> sequence< A>(TryOption<Fin<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Fin<B>> mapT< A, B>(TryOption<Fin<A>> ma, Func<A, B> f) =>
            default(Trans<MTryOption<Fin<A>>, TryOption<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Map<MTryOption<Fin<B>>, TryOption<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(TryOption<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Fin<A>>, TryOption<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(TryOption<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Fin<A>>, TryOption<Fin<A>>, MFin<A>, Fin<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(TryOption<Fin<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Fin<A>>, TryOption<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(TryOption<Fin<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Fin<A>>, TryOption<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `TryOption&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(TryOption<Fin<A>> ma, Action<A> f) =>
            default(Trans<MTryOption<Fin<A>>, TryOption<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`TryOption&lt;Fin&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static TryOption<Fin<A>> filterT< A>(TryOption<Fin<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTryOption<Fin<A>>, TryOption<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MTryOption<Fin<A>>, TryOption<Fin<A>>, MFin<A>, Fin<A>, A>(ma, 
                    a => pred(a)
                        ? default(MFin<A>).Pure(a)
                        : default(MFin<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Fin&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static TryOption<Fin<A>> plusT<NUM,  A>(TryOption<Fin<A>> x, TryOption<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Fin&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static TryOption<Fin<A>> subtractT<NUM,  A>(TryOption<Fin<A>> x, TryOption<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static TryOption<Fin<A>> productT<NUM,  A>(TryOption<Fin<A>> x, TryOption<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static TryOption<Fin<A>> divideT<NUM,  A>(TryOption<Fin<A>> x, TryOption<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static TryOption<Fin<A>> appendT<SEMI,  A>(TryOption<Fin<A>> x, TryOption<Fin<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(TryOption<Fin<A>> x, TryOption<Fin<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(TryOption<Fin<A>> x, TryOption<Fin<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Fin<B>> applyT< A, B>(Func<A, B> fab, TryOption<Fin<A>> fa) =>
            default(ApplTryOption< Fin<A>, Fin<B>>).Apply(
                 default(MTryOption< Func<Fin<A>, Fin<B>>>).Pure((Fin<A> a) => default(ApplFin< A, B>).Apply(
                     default(MFin< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Fin<B>> applyT< A, B>(TryOption<Fin<Func<A, B>>> fab, TryOption<Fin<A>> fa) =>
            default(MTryOption<Fin<Func<A, B>>>).Bind<MTryOption<Fin<B>>, TryOption<Fin<B>>, Fin<B>>(fab, f =>
                default(MTryOption<Fin<A>>).Bind<MTryOption<Fin<B>>, TryOption<Fin<B>>, Fin<B>>(fa, a => 
                    default(MTryOption<Fin<B>>).Pure(default(ApplFin< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Fin&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `TryOption&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static TryOption<Fin<C>> applyT< A, B, C>(Func<A, B, C> fabc, TryOption<Fin<A>> fa, TryOption<Fin<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `TryOption&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Option&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `TryOption&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(TryOption<Option<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTryOption<Option<A>>, TryOption<Option<A>>, MOption<A>, Option<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `TryOption&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Option&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `TryOption&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(TryOption<Option<A>> ma) =>
            default(Trans<MTryOption<Option<A>>, TryOption<Option<A>>, MOption<A>, Option<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`TryOption&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Option<B>> bindT< A, B>(TryOption<Option<A>> ma, Func<A, Option<B>> f) =>
            default(Trans<MTryOption<Option<A>>, TryOption<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MTryOption<Option<B>>, TryOption<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `TryOption&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;TryOption&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;TryOption&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Option<TryOption<B>> traverse< A, B>(TryOption<Option<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `TryOption&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;TryOption&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Option<TryOption<A>> sequence< A>(TryOption<Option<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Option<B>> mapT< A, B>(TryOption<Option<A>> ma, Func<A, B> f) =>
            default(Trans<MTryOption<Option<A>>, TryOption<Option<A>>, MOption<A>, Option<A>, A>)
                .Map<MTryOption<Option<B>>, TryOption<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(TryOption<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Option<A>>, TryOption<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(TryOption<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Option<A>>, TryOption<Option<A>>, MOption<A>, Option<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(TryOption<Option<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Option<A>>, TryOption<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(TryOption<Option<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Option<A>>, TryOption<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `TryOption&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(TryOption<Option<A>> ma, Action<A> f) =>
            default(Trans<MTryOption<Option<A>>, TryOption<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`TryOption&lt;Option&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static TryOption<Option<A>> filterT< A>(TryOption<Option<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTryOption<Option<A>>, TryOption<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MTryOption<Option<A>>, TryOption<Option<A>>, MOption<A>, Option<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOption<A>).Pure(a)
                        : default(MOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Option&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static TryOption<Option<A>> plusT<NUM,  A>(TryOption<Option<A>> x, TryOption<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Option&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static TryOption<Option<A>> subtractT<NUM,  A>(TryOption<Option<A>> x, TryOption<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Option&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static TryOption<Option<A>> productT<NUM,  A>(TryOption<Option<A>> x, TryOption<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Option&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static TryOption<Option<A>> divideT<NUM,  A>(TryOption<Option<A>> x, TryOption<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Option&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static TryOption<Option<A>> appendT<SEMI,  A>(TryOption<Option<A>> x, TryOption<Option<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(TryOption<Option<A>> x, TryOption<Option<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Option&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(TryOption<Option<A>> x, TryOption<Option<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Option<B>> applyT< A, B>(Func<A, B> fab, TryOption<Option<A>> fa) =>
            default(ApplTryOption< Option<A>, Option<B>>).Apply(
                 default(MTryOption< Func<Option<A>, Option<B>>>).Pure((Option<A> a) => default(ApplOption< A, B>).Apply(
                     default(MOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Option<B>> applyT< A, B>(TryOption<Option<Func<A, B>>> fab, TryOption<Option<A>> fa) =>
            default(MTryOption<Option<Func<A, B>>>).Bind<MTryOption<Option<B>>, TryOption<Option<B>>, Option<B>>(fab, f =>
                default(MTryOption<Option<A>>).Bind<MTryOption<Option<B>>, TryOption<Option<B>>, Option<B>>(fa, a => 
                    default(MTryOption<Option<B>>).Pure(default(ApplOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Option&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `TryOption&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Option&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static TryOption<Option<C>> applyT< A, B, C>(Func<A, B, C> fabc, TryOption<Option<A>> fa, TryOption<Option<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(TryOption<OptionUnsafe<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTryOption<OptionUnsafe<A>>, TryOption<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(TryOption<OptionUnsafe<A>> ma) =>
            default(Trans<MTryOption<OptionUnsafe<A>>, TryOption<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`TryOption&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<OptionUnsafe<B>> bindT< A, B>(TryOption<OptionUnsafe<A>> ma, Func<A, OptionUnsafe<B>> f) =>
            default(Trans<MTryOption<OptionUnsafe<A>>, TryOption<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MTryOption<OptionUnsafe<B>>, TryOption<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;TryOption&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;TryOption&lt;B&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<TryOption<B>> traverse< A, B>(TryOption<OptionUnsafe<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<TryOption<A>> sequence< A>(TryOption<OptionUnsafe<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<OptionUnsafe<B>> mapT< A, B>(TryOption<OptionUnsafe<A>> ma, Func<A, B> f) =>
            default(Trans<MTryOption<OptionUnsafe<A>>, TryOption<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Map<MTryOption<OptionUnsafe<B>>, TryOption<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(TryOption<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<OptionUnsafe<A>>, TryOption<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(TryOption<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<OptionUnsafe<A>>, TryOption<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(TryOption<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<OptionUnsafe<A>>, TryOption<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(TryOption<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<OptionUnsafe<A>>, TryOption<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(TryOption<OptionUnsafe<A>> ma, Action<A> f) =>
            default(Trans<MTryOption<OptionUnsafe<A>>, TryOption<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static TryOption<OptionUnsafe<A>> filterT< A>(TryOption<OptionUnsafe<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTryOption<OptionUnsafe<A>>, TryOption<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MTryOption<OptionUnsafe<A>>, TryOption<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOptionUnsafe<A>).Pure(a)
                        : default(MOptionUnsafe<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static TryOption<OptionUnsafe<A>> plusT<NUM,  A>(TryOption<OptionUnsafe<A>> x, TryOption<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static TryOption<OptionUnsafe<A>> subtractT<NUM,  A>(TryOption<OptionUnsafe<A>> x, TryOption<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static TryOption<OptionUnsafe<A>> productT<NUM,  A>(TryOption<OptionUnsafe<A>> x, TryOption<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static TryOption<OptionUnsafe<A>> divideT<NUM,  A>(TryOption<OptionUnsafe<A>> x, TryOption<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static TryOption<OptionUnsafe<A>> appendT<SEMI,  A>(TryOption<OptionUnsafe<A>> x, TryOption<OptionUnsafe<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(TryOption<OptionUnsafe<A>> x, TryOption<OptionUnsafe<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(TryOption<OptionUnsafe<A>> x, TryOption<OptionUnsafe<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<OptionUnsafe<B>> applyT< A, B>(Func<A, B> fab, TryOption<OptionUnsafe<A>> fa) =>
            default(ApplTryOption< OptionUnsafe<A>, OptionUnsafe<B>>).Apply(
                 default(MTryOption< Func<OptionUnsafe<A>, OptionUnsafe<B>>>).Pure((OptionUnsafe<A> a) => default(ApplOptionUnsafe< A, B>).Apply(
                     default(MOptionUnsafe< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<OptionUnsafe<B>> applyT< A, B>(TryOption<OptionUnsafe<Func<A, B>>> fab, TryOption<OptionUnsafe<A>> fa) =>
            default(MTryOption<OptionUnsafe<Func<A, B>>>).Bind<MTryOption<OptionUnsafe<B>>, TryOption<OptionUnsafe<B>>, OptionUnsafe<B>>(fab, f =>
                default(MTryOption<OptionUnsafe<A>>).Bind<MTryOption<OptionUnsafe<B>>, TryOption<OptionUnsafe<B>>, OptionUnsafe<B>>(fa, a => 
                    default(MTryOption<OptionUnsafe<B>>).Pure(default(ApplOptionUnsafe< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `TryOption&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static TryOption<OptionUnsafe<C>> applyT< A, B, C>(Func<A, B, C> fabc, TryOption<OptionUnsafe<A>> fa, TryOption<OptionUnsafe<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `TryOption&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Either&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `TryOption&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(TryOption<Either<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTryOption<Either<L, A>>, TryOption<Either<L, A>>, MEither<L, A>, Either<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `TryOption&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Either&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `TryOption&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(TryOption<Either<L, A>> ma) =>
            default(Trans<MTryOption<Either<L, A>>, TryOption<Either<L, A>>, MEither<L, A>, Either<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`TryOption&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Either<L, B>> bindT<L, A, B>(TryOption<Either<L, A>> ma, Func<A, Either<L, B>> f) =>
            default(Trans<MTryOption<Either<L, A>>, TryOption<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MTryOption<Either<L, B>>, TryOption<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `TryOption&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, TryOption&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, TryOption&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Either<L, TryOption<B>> traverse<L, A, B>(TryOption<Either<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `TryOption&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, TryOption&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Either<L, TryOption<A>> sequence<L, A>(TryOption<Either<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Either<L, B>> mapT<L, A, B>(TryOption<Either<L, A>> ma, Func<A, B> f) =>
            default(Trans<MTryOption<Either<L, A>>, TryOption<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Map<MTryOption<Either<L, B>>, TryOption<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(TryOption<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Either<L, A>>, TryOption<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(TryOption<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Either<L, A>>, TryOption<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(TryOption<Either<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Either<L, A>>, TryOption<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(TryOption<Either<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Either<L, A>>, TryOption<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `TryOption&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(TryOption<Either<L, A>> ma, Action<A> f) =>
            default(Trans<MTryOption<Either<L, A>>, TryOption<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`TryOption&lt;Either&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static TryOption<Either<L, A>> filterT<L, A>(TryOption<Either<L, A>> ma, Func<A, bool> pred) =>
            default(Trans<MTryOption<Either<L, A>>, TryOption<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MTryOption<Either<L, A>>, TryOption<Either<L, A>>, MEither<L, A>, Either<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEither<L, A>).Pure(a)
                        : default(MEither<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static TryOption<Either<L, A>> plusT<NUM, L, A>(TryOption<Either<L, A>> x, TryOption<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static TryOption<Either<L, A>> subtractT<NUM, L, A>(TryOption<Either<L, A>> x, TryOption<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static TryOption<Either<L, A>> productT<NUM, L, A>(TryOption<Either<L, A>> x, TryOption<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static TryOption<Either<L, A>> divideT<NUM, L, A>(TryOption<Either<L, A>> x, TryOption<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static TryOption<Either<L, A>> appendT<SEMI, L, A>(TryOption<Either<L, A>> x, TryOption<Either<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(TryOption<Either<L, A>> x, TryOption<Either<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(TryOption<Either<L, A>> x, TryOption<Either<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Either<L, B>> applyT<L, A, B>(Func<A, B> fab, TryOption<Either<L, A>> fa) =>
            default(ApplTryOption< Either<L, A>, Either<L, B>>).Apply(
                 default(MTryOption< Func<Either<L, A>, Either<L, B>>>).Pure((Either<L, A> a) => default(ApplEither<L, A, B>).Apply(
                     default(MEither<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Either<L, B>> applyT<L, A, B>(TryOption<Either<L, Func<A, B>>> fab, TryOption<Either<L, A>> fa) =>
            default(MTryOption<Either<L, Func<A, B>>>).Bind<MTryOption<Either<L, B>>, TryOption<Either<L, B>>, Either<L, B>>(fab, f =>
                default(MTryOption<Either<L, A>>).Bind<MTryOption<Either<L, B>>, TryOption<Either<L, B>>, Either<L, B>>(fa, a => 
                    default(MTryOption<Either<L, B>>).Pure(default(ApplEither<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `TryOption&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static TryOption<Either<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, TryOption<Either<L, A>> fa, TryOption<Either<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(TryOption<EitherUnsafe<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTryOption<EitherUnsafe<L, A>>, TryOption<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(TryOption<EitherUnsafe<L, A>> ma) =>
            default(Trans<MTryOption<EitherUnsafe<L, A>>, TryOption<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<EitherUnsafe<L, B>> bindT<L, A, B>(TryOption<EitherUnsafe<L, A>> ma, Func<A, EitherUnsafe<L, B>> f) =>
            default(Trans<MTryOption<EitherUnsafe<L, A>>, TryOption<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MTryOption<EitherUnsafe<L, B>>, TryOption<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, TryOption&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, TryOption&lt;B&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, TryOption<B>> traverse<L, A, B>(TryOption<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, TryOption<A>> sequence<L, A>(TryOption<EitherUnsafe<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<EitherUnsafe<L, B>> mapT<L, A, B>(TryOption<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            default(Trans<MTryOption<EitherUnsafe<L, A>>, TryOption<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Map<MTryOption<EitherUnsafe<L, B>>, TryOption<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(TryOption<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<EitherUnsafe<L, A>>, TryOption<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(TryOption<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<EitherUnsafe<L, A>>, TryOption<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(TryOption<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<EitherUnsafe<L, A>>, TryOption<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(TryOption<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<EitherUnsafe<L, A>>, TryOption<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(TryOption<EitherUnsafe<L, A>> ma, Action<A> f) =>
            default(Trans<MTryOption<EitherUnsafe<L, A>>, TryOption<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static TryOption<EitherUnsafe<L, A>> filterT<L, A>(TryOption<EitherUnsafe<L, A>> ma, Func<A, bool> pred) =>
            default(Trans<MTryOption<EitherUnsafe<L, A>>, TryOption<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MTryOption<EitherUnsafe<L, A>>, TryOption<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEitherUnsafe<L, A>).Pure(a)
                        : default(MEitherUnsafe<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static TryOption<EitherUnsafe<L, A>> plusT<NUM, L, A>(TryOption<EitherUnsafe<L, A>> x, TryOption<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static TryOption<EitherUnsafe<L, A>> subtractT<NUM, L, A>(TryOption<EitherUnsafe<L, A>> x, TryOption<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static TryOption<EitherUnsafe<L, A>> productT<NUM, L, A>(TryOption<EitherUnsafe<L, A>> x, TryOption<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static TryOption<EitherUnsafe<L, A>> divideT<NUM, L, A>(TryOption<EitherUnsafe<L, A>> x, TryOption<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static TryOption<EitherUnsafe<L, A>> appendT<SEMI, L, A>(TryOption<EitherUnsafe<L, A>> x, TryOption<EitherUnsafe<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(TryOption<EitherUnsafe<L, A>> x, TryOption<EitherUnsafe<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(TryOption<EitherUnsafe<L, A>> x, TryOption<EitherUnsafe<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<EitherUnsafe<L, B>> applyT<L, A, B>(Func<A, B> fab, TryOption<EitherUnsafe<L, A>> fa) =>
            default(ApplTryOption< EitherUnsafe<L, A>, EitherUnsafe<L, B>>).Apply(
                 default(MTryOption< Func<EitherUnsafe<L, A>, EitherUnsafe<L, B>>>).Pure((EitherUnsafe<L, A> a) => default(ApplEitherUnsafe<L, A, B>).Apply(
                     default(MEitherUnsafe<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<EitherUnsafe<L, B>> applyT<L, A, B>(TryOption<EitherUnsafe<L, Func<A, B>>> fab, TryOption<EitherUnsafe<L, A>> fa) =>
            default(MTryOption<EitherUnsafe<L, Func<A, B>>>).Bind<MTryOption<EitherUnsafe<L, B>>, TryOption<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fab, f =>
                default(MTryOption<EitherUnsafe<L, A>>).Bind<MTryOption<EitherUnsafe<L, B>>, TryOption<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fa, a => 
                    default(MTryOption<EitherUnsafe<L, B>>).Pure(default(ApplEitherUnsafe<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `TryOption&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static TryOption<EitherUnsafe<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, TryOption<EitherUnsafe<L, A>> fa, TryOption<EitherUnsafe<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `TryOption&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Try&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `TryOption&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(TryOption<Try<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTryOption<Try<A>>, TryOption<Try<A>>, MTry<A>, Try<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `TryOption&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Try&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `TryOption&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(TryOption<Try<A>> ma) =>
            default(Trans<MTryOption<Try<A>>, TryOption<Try<A>>, MTry<A>, Try<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`TryOption&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Try<B>> bindT< A, B>(TryOption<Try<A>> ma, Func<A, Try<B>> f) =>
            default(Trans<MTryOption<Try<A>>, TryOption<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MTryOption<Try<B>>, TryOption<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `TryOption&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;TryOption&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;TryOption&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Try<TryOption<B>> traverse< A, B>(TryOption<Try<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `TryOption&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;TryOption&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Try<TryOption<A>> sequence< A>(TryOption<Try<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Try<B>> mapT< A, B>(TryOption<Try<A>> ma, Func<A, B> f) =>
            default(Trans<MTryOption<Try<A>>, TryOption<Try<A>>, MTry<A>, Try<A>, A>)
                .Map<MTryOption<Try<B>>, TryOption<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(TryOption<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Try<A>>, TryOption<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(TryOption<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Try<A>>, TryOption<Try<A>>, MTry<A>, Try<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(TryOption<Try<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Try<A>>, TryOption<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(TryOption<Try<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Try<A>>, TryOption<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `TryOption&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(TryOption<Try<A>> ma, Action<A> f) =>
            default(Trans<MTryOption<Try<A>>, TryOption<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`TryOption&lt;Try&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static TryOption<Try<A>> filterT< A>(TryOption<Try<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTryOption<Try<A>>, TryOption<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MTryOption<Try<A>>, TryOption<Try<A>>, MTry<A>, Try<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTry<A>).Pure(a)
                        : default(MTry<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Try&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static TryOption<Try<A>> plusT<NUM,  A>(TryOption<Try<A>> x, TryOption<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Try&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static TryOption<Try<A>> subtractT<NUM,  A>(TryOption<Try<A>> x, TryOption<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Try&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static TryOption<Try<A>> productT<NUM,  A>(TryOption<Try<A>> x, TryOption<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Try&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static TryOption<Try<A>> divideT<NUM,  A>(TryOption<Try<A>> x, TryOption<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Try&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static TryOption<Try<A>> appendT<SEMI,  A>(TryOption<Try<A>> x, TryOption<Try<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(TryOption<Try<A>> x, TryOption<Try<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Try&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(TryOption<Try<A>> x, TryOption<Try<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Try<B>> applyT< A, B>(Func<A, B> fab, TryOption<Try<A>> fa) =>
            default(ApplTryOption< Try<A>, Try<B>>).Apply(
                 default(MTryOption< Func<Try<A>, Try<B>>>).Pure((Try<A> a) => default(ApplTry< A, B>).Apply(
                     default(MTry< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Try<B>> applyT< A, B>(TryOption<Try<Func<A, B>>> fab, TryOption<Try<A>> fa) =>
            default(MTryOption<Try<Func<A, B>>>).Bind<MTryOption<Try<B>>, TryOption<Try<B>>, Try<B>>(fab, f =>
                default(MTryOption<Try<A>>).Bind<MTryOption<Try<B>>, TryOption<Try<B>>, Try<B>>(fa, a => 
                    default(MTryOption<Try<B>>).Pure(default(ApplTry< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Try&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `TryOption&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Try&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static TryOption<Try<C>> applyT< A, B, C>(Func<A, B, C> fabc, TryOption<Try<A>> fa, TryOption<Try<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryOptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `TryOption&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;TryOption&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `TryOption&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(TryOption<TryOption<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTryOption<TryOption<A>>, TryOption<TryOption<A>>, MTryOption<A>, TryOption<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `TryOption&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;TryOption&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `TryOption&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(TryOption<TryOption<A>> ma) =>
            default(Trans<MTryOption<TryOption<A>>, TryOption<TryOption<A>>, MTryOption<A>, TryOption<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`TryOption&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<TryOption<B>> bindT< A, B>(TryOption<TryOption<A>> ma, Func<A, TryOption<B>> f) =>
            default(Trans<MTryOption<TryOption<A>>, TryOption<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MTryOption<TryOption<B>>, TryOption<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `TryOption&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;TryOption&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;TryOption&lt;B&gt;&gt;`</returns>
        [Pure]
        public static TryOption<TryOption<B>> traverse< A, B>(TryOption<TryOption<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `TryOption&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;TryOption&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static TryOption<TryOption<A>> sequence< A>(TryOption<TryOption<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<TryOption<B>> mapT< A, B>(TryOption<TryOption<A>> ma, Func<A, B> f) =>
            default(Trans<MTryOption<TryOption<A>>, TryOption<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Map<MTryOption<TryOption<B>>, TryOption<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(TryOption<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<TryOption<A>>, TryOption<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(TryOption<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<TryOption<A>>, TryOption<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(TryOption<TryOption<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<TryOption<A>>, TryOption<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(TryOption<TryOption<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<TryOption<A>>, TryOption<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `TryOption&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(TryOption<TryOption<A>> ma, Action<A> f) =>
            default(Trans<MTryOption<TryOption<A>>, TryOption<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`TryOption&lt;TryOption&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static TryOption<TryOption<A>> filterT< A>(TryOption<TryOption<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTryOption<TryOption<A>>, TryOption<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MTryOption<TryOption<A>>, TryOption<TryOption<A>>, MTryOption<A>, TryOption<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTryOption<A>).Pure(a)
                        : default(MTryOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static TryOption<TryOption<A>> plusT<NUM,  A>(TryOption<TryOption<A>> x, TryOption<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static TryOption<TryOption<A>> subtractT<NUM,  A>(TryOption<TryOption<A>> x, TryOption<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static TryOption<TryOption<A>> productT<NUM,  A>(TryOption<TryOption<A>> x, TryOption<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static TryOption<TryOption<A>> divideT<NUM,  A>(TryOption<TryOption<A>> x, TryOption<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static TryOption<TryOption<A>> appendT<SEMI,  A>(TryOption<TryOption<A>> x, TryOption<TryOption<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(TryOption<TryOption<A>> x, TryOption<TryOption<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(TryOption<TryOption<A>> x, TryOption<TryOption<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<TryOption<B>> applyT< A, B>(Func<A, B> fab, TryOption<TryOption<A>> fa) =>
            default(ApplTryOption< TryOption<A>, TryOption<B>>).Apply(
                 default(MTryOption< Func<TryOption<A>, TryOption<B>>>).Pure((TryOption<A> a) => default(ApplTryOption< A, B>).Apply(
                     default(MTryOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<TryOption<B>> applyT< A, B>(TryOption<TryOption<Func<A, B>>> fab, TryOption<TryOption<A>> fa) =>
            default(MTryOption<TryOption<Func<A, B>>>).Bind<MTryOption<TryOption<B>>, TryOption<TryOption<B>>, TryOption<B>>(fab, f =>
                default(MTryOption<TryOption<A>>).Bind<MTryOption<TryOption<B>>, TryOption<TryOption<B>>, TryOption<B>>(fa, a => 
                    default(MTryOption<TryOption<B>>).Pure(default(ApplTryOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `TryOption&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static TryOption<TryOption<C>> applyT< A, B, C>(Func<A, B, C> fabc, TryOption<TryOption<A>> fa, TryOption<TryOption<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class IEnumerableT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `TryOption&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;IEnumerable&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `TryOption&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(TryOption<IEnumerable<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTryOption<IEnumerable<A>>, TryOption<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `TryOption&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;IEnumerable&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `TryOption&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(TryOption<IEnumerable<A>> ma) =>
            default(Trans<MTryOption<IEnumerable<A>>, TryOption<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`TryOption&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<IEnumerable<B>> bindT< A, B>(TryOption<IEnumerable<A>> ma, Func<A, IEnumerable<B>> f) =>
            default(Trans<MTryOption<IEnumerable<A>>, TryOption<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MTryOption<IEnumerable<B>>, TryOption<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `TryOption&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;TryOption&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;TryOption&lt;B&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<TryOption<B>> traverse< A, B>(TryOption<IEnumerable<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `TryOption&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;TryOption&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<TryOption<A>> sequence< A>(TryOption<IEnumerable<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<IEnumerable<B>> mapT< A, B>(TryOption<IEnumerable<A>> ma, Func<A, B> f) =>
            default(Trans<MTryOption<IEnumerable<A>>, TryOption<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Map<MTryOption<IEnumerable<B>>, TryOption<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(TryOption<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<IEnumerable<A>>, TryOption<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(TryOption<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<IEnumerable<A>>, TryOption<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(TryOption<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<IEnumerable<A>>, TryOption<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(TryOption<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<IEnumerable<A>>, TryOption<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `TryOption&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(TryOption<IEnumerable<A>> ma, Action<A> f) =>
            default(Trans<MTryOption<IEnumerable<A>>, TryOption<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`TryOption&lt;IEnumerable&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static TryOption<IEnumerable<A>> filterT< A>(TryOption<IEnumerable<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTryOption<IEnumerable<A>>, TryOption<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MTryOption<IEnumerable<A>>, TryOption<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>(ma, 
                    a => pred(a)
                        ? default(MEnumerable<A>).Pure(a)
                        : default(MEnumerable<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static TryOption<IEnumerable<A>> plusT<NUM,  A>(TryOption<IEnumerable<A>> x, TryOption<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static TryOption<IEnumerable<A>> subtractT<NUM,  A>(TryOption<IEnumerable<A>> x, TryOption<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static TryOption<IEnumerable<A>> productT<NUM,  A>(TryOption<IEnumerable<A>> x, TryOption<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static TryOption<IEnumerable<A>> divideT<NUM,  A>(TryOption<IEnumerable<A>> x, TryOption<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static TryOption<IEnumerable<A>> appendT<SEMI,  A>(TryOption<IEnumerable<A>> x, TryOption<IEnumerable<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(TryOption<IEnumerable<A>> x, TryOption<IEnumerable<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(TryOption<IEnumerable<A>> x, TryOption<IEnumerable<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<IEnumerable<B>> applyT< A, B>(Func<A, B> fab, TryOption<IEnumerable<A>> fa) =>
            default(ApplTryOption< IEnumerable<A>, IEnumerable<B>>).Apply(
                 default(MTryOption< Func<IEnumerable<A>, IEnumerable<B>>>).Pure((IEnumerable<A> a) => default(ApplEnumerable< A, B>).Apply(
                     default(MEnumerable< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<IEnumerable<B>> applyT< A, B>(TryOption<IEnumerable<Func<A, B>>> fab, TryOption<IEnumerable<A>> fa) =>
            default(MTryOption<IEnumerable<Func<A, B>>>).Bind<MTryOption<IEnumerable<B>>, TryOption<IEnumerable<B>>, IEnumerable<B>>(fab, f =>
                default(MTryOption<IEnumerable<A>>).Bind<MTryOption<IEnumerable<B>>, TryOption<IEnumerable<B>>, IEnumerable<B>>(fa, a => 
                    default(MTryOption<IEnumerable<B>>).Pure(default(ApplEnumerable< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `TryOption&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static TryOption<IEnumerable<C>> applyT< A, B, C>(Func<A, B, C> fabc, TryOption<IEnumerable<A>> fa, TryOption<IEnumerable<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SeqT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `TryOption&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Seq&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `TryOption&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(TryOption<Seq<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTryOption<Seq<A>>, TryOption<Seq<A>>, MSeq<A>, Seq<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `TryOption&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Seq&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `TryOption&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(TryOption<Seq<A>> ma) =>
            default(Trans<MTryOption<Seq<A>>, TryOption<Seq<A>>, MSeq<A>, Seq<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`TryOption&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Seq<B>> bindT< A, B>(TryOption<Seq<A>> ma, Func<A, Seq<B>> f) =>
            default(Trans<MTryOption<Seq<A>>, TryOption<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MTryOption<Seq<B>>, TryOption<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `TryOption&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;TryOption&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;TryOption&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Seq<TryOption<B>> traverse< A, B>(TryOption<Seq<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `TryOption&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;TryOption&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Seq<TryOption<A>> sequence< A>(TryOption<Seq<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Seq<B>> mapT< A, B>(TryOption<Seq<A>> ma, Func<A, B> f) =>
            default(Trans<MTryOption<Seq<A>>, TryOption<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Map<MTryOption<Seq<B>>, TryOption<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(TryOption<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Seq<A>>, TryOption<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(TryOption<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Seq<A>>, TryOption<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(TryOption<Seq<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Seq<A>>, TryOption<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(TryOption<Seq<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Seq<A>>, TryOption<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `TryOption&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(TryOption<Seq<A>> ma, Action<A> f) =>
            default(Trans<MTryOption<Seq<A>>, TryOption<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`TryOption&lt;Seq&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static TryOption<Seq<A>> filterT< A>(TryOption<Seq<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTryOption<Seq<A>>, TryOption<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MTryOption<Seq<A>>, TryOption<Seq<A>>, MSeq<A>, Seq<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSeq<A>).Pure(a)
                        : default(MSeq<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Seq&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static TryOption<Seq<A>> plusT<NUM,  A>(TryOption<Seq<A>> x, TryOption<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Seq&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static TryOption<Seq<A>> subtractT<NUM,  A>(TryOption<Seq<A>> x, TryOption<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static TryOption<Seq<A>> productT<NUM,  A>(TryOption<Seq<A>> x, TryOption<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static TryOption<Seq<A>> divideT<NUM,  A>(TryOption<Seq<A>> x, TryOption<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static TryOption<Seq<A>> appendT<SEMI,  A>(TryOption<Seq<A>> x, TryOption<Seq<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(TryOption<Seq<A>> x, TryOption<Seq<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(TryOption<Seq<A>> x, TryOption<Seq<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Seq<B>> applyT< A, B>(Func<A, B> fab, TryOption<Seq<A>> fa) =>
            default(ApplTryOption< Seq<A>, Seq<B>>).Apply(
                 default(MTryOption< Func<Seq<A>, Seq<B>>>).Pure((Seq<A> a) => default(ApplSeq< A, B>).Apply(
                     default(MSeq< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Seq<B>> applyT< A, B>(TryOption<Seq<Func<A, B>>> fab, TryOption<Seq<A>> fa) =>
            default(MTryOption<Seq<Func<A, B>>>).Bind<MTryOption<Seq<B>>, TryOption<Seq<B>>, Seq<B>>(fab, f =>
                default(MTryOption<Seq<A>>).Bind<MTryOption<Seq<B>>, TryOption<Seq<B>>, Seq<B>>(fa, a => 
                    default(MTryOption<Seq<B>>).Pure(default(ApplSeq< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Seq&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `TryOption&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static TryOption<Seq<C>> applyT< A, B, C>(Func<A, B, C> fabc, TryOption<Seq<A>> fa, TryOption<Seq<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `TryOption&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Set&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `TryOption&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(TryOption<Set<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTryOption<Set<A>>, TryOption<Set<A>>, MSet<A>, Set<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `TryOption&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Set&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `TryOption&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(TryOption<Set<A>> ma) =>
            default(Trans<MTryOption<Set<A>>, TryOption<Set<A>>, MSet<A>, Set<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`TryOption&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Set<B>> bindT< A, B>(TryOption<Set<A>> ma, Func<A, Set<B>> f) =>
            default(Trans<MTryOption<Set<A>>, TryOption<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MTryOption<Set<B>>, TryOption<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `TryOption&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;TryOption&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;TryOption&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Set<TryOption<B>> traverse< A, B>(TryOption<Set<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `TryOption&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;TryOption&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Set<TryOption<A>> sequence< A>(TryOption<Set<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Set<B>> mapT< A, B>(TryOption<Set<A>> ma, Func<A, B> f) =>
            default(Trans<MTryOption<Set<A>>, TryOption<Set<A>>, MSet<A>, Set<A>, A>)
                .Map<MTryOption<Set<B>>, TryOption<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(TryOption<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Set<A>>, TryOption<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(TryOption<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Set<A>>, TryOption<Set<A>>, MSet<A>, Set<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(TryOption<Set<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Set<A>>, TryOption<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(TryOption<Set<A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Set<A>>, TryOption<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `TryOption&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(TryOption<Set<A>> ma, Action<A> f) =>
            default(Trans<MTryOption<Set<A>>, TryOption<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`TryOption&lt;Set&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static TryOption<Set<A>> filterT< A>(TryOption<Set<A>> ma, Func<A, bool> pred) =>
            default(Trans<MTryOption<Set<A>>, TryOption<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MTryOption<Set<A>>, TryOption<Set<A>>, MSet<A>, Set<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSet<A>).Pure(a)
                        : default(MSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Set&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static TryOption<Set<A>> plusT<NUM,  A>(TryOption<Set<A>> x, TryOption<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Set&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static TryOption<Set<A>> subtractT<NUM,  A>(TryOption<Set<A>> x, TryOption<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Set&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static TryOption<Set<A>> productT<NUM,  A>(TryOption<Set<A>> x, TryOption<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Set&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static TryOption<Set<A>> divideT<NUM,  A>(TryOption<Set<A>> x, TryOption<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Set&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static TryOption<Set<A>> appendT<SEMI,  A>(TryOption<Set<A>> x, TryOption<Set<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(TryOption<Set<A>> x, TryOption<Set<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Set&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(TryOption<Set<A>> x, TryOption<Set<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Set<B>> applyT< A, B>(Func<A, B> fab, TryOption<Set<A>> fa) =>
            default(ApplTryOption< Set<A>, Set<B>>).Apply(
                 default(MTryOption< Func<Set<A>, Set<B>>>).Pure((Set<A> a) => default(ApplSet< A, B>).Apply(
                     default(MSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Set<B>> applyT< A, B>(TryOption<Set<Func<A, B>>> fab, TryOption<Set<A>> fa) =>
            default(MTryOption<Set<Func<A, B>>>).Bind<MTryOption<Set<B>>, TryOption<Set<B>>, Set<B>>(fab, f =>
                default(MTryOption<Set<A>>).Bind<MTryOption<Set<B>>, TryOption<Set<B>>, Set<B>>(fa, a => 
                    default(MTryOption<Set<B>>).Pure(default(ApplSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Set&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `TryOption&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Set&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static TryOption<Set<C>> applyT< A, B, C>(Func<A, B, C> fabc, TryOption<Set<A>> fa, TryOption<Set<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ValidationT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(TryOption<Validation<FAIL, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MTryOption<Validation<FAIL, A>>, TryOption<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(TryOption<Validation<FAIL, A>> ma) =>
            default(Trans<MTryOption<Validation<FAIL, A>>, TryOption<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`TryOption&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Validation<FAIL, B>> bindT<FAIL, A, B>(TryOption<Validation<FAIL, A>> ma, Func<A, Validation<FAIL, B>> f) =>
            default(Trans<MTryOption<Validation<FAIL, A>>, TryOption<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MTryOption<Validation<FAIL, B>>, TryOption<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, TryOption&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, TryOption&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, TryOption<B>> traverse<FAIL, A, B>(TryOption<Validation<FAIL, A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, TryOption<A>> sequence<FAIL, A>(TryOption<Validation<FAIL, A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static TryOption<Validation<FAIL, B>> mapT<FAIL, A, B>(TryOption<Validation<FAIL, A>> ma, Func<A, B> f) =>
            default(Trans<MTryOption<Validation<FAIL, A>>, TryOption<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Map<MTryOption<Validation<FAIL, B>>, TryOption<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(TryOption<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Validation<FAIL, A>>, TryOption<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(TryOption<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MTryOption<Validation<FAIL, A>>, TryOption<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(TryOption<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Validation<FAIL, A>>, TryOption<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(TryOption<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(Trans<MTryOption<Validation<FAIL, A>>, TryOption<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(TryOption<Validation<FAIL, A>> ma, Action<A> f) =>
            default(Trans<MTryOption<Validation<FAIL, A>>, TryOption<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static TryOption<Validation<FAIL, A>> filterT<FAIL, A>(TryOption<Validation<FAIL, A>> ma, Func<A, bool> pred) =>
            default(Trans<MTryOption<Validation<FAIL, A>>, TryOption<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MTryOption<Validation<FAIL, A>>, TryOption<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>(ma, 
                    a => pred(a)
                        ? default(MValidation<FAIL, A>).Pure(a)
                        : default(MValidation<FAIL, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static TryOption<Validation<FAIL, A>> plusT<NUM, FAIL, A>(TryOption<Validation<FAIL, A>> x, TryOption<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static TryOption<Validation<FAIL, A>> subtractT<NUM, FAIL, A>(TryOption<Validation<FAIL, A>> x, TryOption<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static TryOption<Validation<FAIL, A>> productT<NUM, FAIL, A>(TryOption<Validation<FAIL, A>> x, TryOption<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static TryOption<Validation<FAIL, A>> divideT<NUM, FAIL, A>(TryOption<Validation<FAIL, A>> x, TryOption<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static TryOption<Validation<FAIL, A>> appendT<SEMI, FAIL, A>(TryOption<Validation<FAIL, A>> x, TryOption<Validation<FAIL, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(TryOption<Validation<FAIL, A>> x, TryOption<Validation<FAIL, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`TryOption&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(TryOption<Validation<FAIL, A>> x, TryOption<Validation<FAIL, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Validation<FAIL, B>> applyT<FAIL, A, B>(Func<A, B> fab, TryOption<Validation<FAIL, A>> fa) =>
            default(ApplTryOption< Validation<FAIL, A>, Validation<FAIL, B>>).Apply(
                 default(MTryOption< Func<Validation<FAIL, A>, Validation<FAIL, B>>>).Pure((Validation<FAIL, A> a) => default(ApplValidation<FAIL, A, B>).Apply(
                     default(MValidation<FAIL, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static TryOption<Validation<FAIL, B>> applyT<FAIL, A, B>(TryOption<Validation<FAIL, Func<A, B>>> fab, TryOption<Validation<FAIL, A>> fa) =>
            default(MTryOption<Validation<FAIL, Func<A, B>>>).Bind<MTryOption<Validation<FAIL, B>>, TryOption<Validation<FAIL, B>>, Validation<FAIL, B>>(fab, f =>
                default(MTryOption<Validation<FAIL, A>>).Bind<MTryOption<Validation<FAIL, B>>, TryOption<Validation<FAIL, B>>, Validation<FAIL, B>>(fa, a => 
                    default(MTryOption<Validation<FAIL, B>>).Pure(default(ApplValidation<FAIL, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`TryOption&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static TryOption<Validation<FAIL, C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, TryOption<Validation<FAIL, A>> fa, TryOption<Validation<FAIL, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ArrT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `IEnumerable&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Arr&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `IEnumerable&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(IEnumerable<Arr<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MEnumerable<Arr<A>>, IEnumerable<Arr<A>>, MArr<A>, Arr<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `IEnumerable&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Arr&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `IEnumerable&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(IEnumerable<Arr<A>> ma) =>
            default(SeqTrans<MEnumerable<Arr<A>>, IEnumerable<Arr<A>>, MArr<A>, Arr<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`IEnumerable&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Arr<B>> bindT< A, B>(IEnumerable<Arr<A>> ma, Func<A, Arr<B>> f) =>
            default(SeqTrans<MEnumerable<Arr<A>>, IEnumerable<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MEnumerable<Arr<B>>, IEnumerable<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `IEnumerable&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;IEnumerable&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;IEnumerable&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Arr<IEnumerable<B>> traverse< A, B>(IEnumerable<Arr<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `IEnumerable&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;IEnumerable&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Arr<IEnumerable<A>> sequence< A>(IEnumerable<Arr<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Arr<B>> mapT< A, B>(IEnumerable<Arr<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MEnumerable<Arr<A>>, IEnumerable<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Map<MEnumerable<Arr<B>>, IEnumerable<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(IEnumerable<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Arr<A>>, IEnumerable<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(IEnumerable<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Arr<A>>, IEnumerable<Arr<A>>, MArr<A>, Arr<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(IEnumerable<Arr<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Arr<A>>, IEnumerable<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(IEnumerable<Arr<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Arr<A>>, IEnumerable<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `IEnumerable&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(IEnumerable<Arr<A>> ma, Action<A> f) =>
            default(SeqTrans<MEnumerable<Arr<A>>, IEnumerable<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`IEnumerable&lt;Arr&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static IEnumerable<Arr<A>> filterT< A>(IEnumerable<Arr<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MEnumerable<Arr<A>>, IEnumerable<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MEnumerable<Arr<A>>, IEnumerable<Arr<A>>, MArr<A>, Arr<A>, A>(ma, 
                    a => pred(a)
                        ? default(MArr<A>).Pure(a)
                        : default(MArr<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Arr&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static IEnumerable<Arr<A>> plusT<NUM,  A>(IEnumerable<Arr<A>> x, IEnumerable<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Arr&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static IEnumerable<Arr<A>> subtractT<NUM,  A>(IEnumerable<Arr<A>> x, IEnumerable<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static IEnumerable<Arr<A>> productT<NUM,  A>(IEnumerable<Arr<A>> x, IEnumerable<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static IEnumerable<Arr<A>> divideT<NUM,  A>(IEnumerable<Arr<A>> x, IEnumerable<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static IEnumerable<Arr<A>> appendT<SEMI,  A>(IEnumerable<Arr<A>> x, IEnumerable<Arr<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(IEnumerable<Arr<A>> x, IEnumerable<Arr<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(IEnumerable<Arr<A>> x, IEnumerable<Arr<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Arr<B>> applyT< A, B>(Func<A, B> fab, IEnumerable<Arr<A>> fa) =>
            default(ApplEnumerable< Arr<A>, Arr<B>>).Apply(
                 default(MEnumerable< Func<Arr<A>, Arr<B>>>).Pure((Arr<A> a) => default(ApplArr< A, B>).Apply(
                     default(MArr< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Arr<B>> applyT< A, B>(IEnumerable<Arr<Func<A, B>>> fab, IEnumerable<Arr<A>> fa) =>
            default(MEnumerable<Arr<Func<A, B>>>).Bind<MEnumerable<Arr<B>>, IEnumerable<Arr<B>>, Arr<B>>(fab, f =>
                default(MEnumerable<Arr<A>>).Bind<MEnumerable<Arr<B>>, IEnumerable<Arr<B>>, Arr<B>>(fa, a => 
                    default(MEnumerable<Arr<B>>).Pure(default(ApplArr< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Arr&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `IEnumerable&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static IEnumerable<Arr<C>> applyT< A, B, C>(Func<A, B, C> fabc, IEnumerable<Arr<A>> fa, IEnumerable<Arr<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class HashSetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `IEnumerable&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;HashSet&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `IEnumerable&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(IEnumerable<HashSet<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MEnumerable<HashSet<A>>, IEnumerable<HashSet<A>>, MHashSet<A>, HashSet<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `IEnumerable&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;HashSet&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `IEnumerable&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(IEnumerable<HashSet<A>> ma) =>
            default(SeqTrans<MEnumerable<HashSet<A>>, IEnumerable<HashSet<A>>, MHashSet<A>, HashSet<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`IEnumerable&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<HashSet<B>> bindT< A, B>(IEnumerable<HashSet<A>> ma, Func<A, HashSet<B>> f) =>
            default(SeqTrans<MEnumerable<HashSet<A>>, IEnumerable<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MEnumerable<HashSet<B>>, IEnumerable<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `IEnumerable&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;IEnumerable&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;IEnumerable&lt;B&gt;&gt;`</returns>
        [Pure]
        public static HashSet<IEnumerable<B>> traverse< A, B>(IEnumerable<HashSet<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `IEnumerable&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;IEnumerable&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static HashSet<IEnumerable<A>> sequence< A>(IEnumerable<HashSet<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<HashSet<B>> mapT< A, B>(IEnumerable<HashSet<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MEnumerable<HashSet<A>>, IEnumerable<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Map<MEnumerable<HashSet<B>>, IEnumerable<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(IEnumerable<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<HashSet<A>>, IEnumerable<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(IEnumerable<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<HashSet<A>>, IEnumerable<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(IEnumerable<HashSet<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<HashSet<A>>, IEnumerable<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(IEnumerable<HashSet<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<HashSet<A>>, IEnumerable<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `IEnumerable&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(IEnumerable<HashSet<A>> ma, Action<A> f) =>
            default(SeqTrans<MEnumerable<HashSet<A>>, IEnumerable<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`IEnumerable&lt;HashSet&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static IEnumerable<HashSet<A>> filterT< A>(IEnumerable<HashSet<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MEnumerable<HashSet<A>>, IEnumerable<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MEnumerable<HashSet<A>>, IEnumerable<HashSet<A>>, MHashSet<A>, HashSet<A>, A>(ma, 
                    a => pred(a)
                        ? default(MHashSet<A>).Pure(a)
                        : default(MHashSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static IEnumerable<HashSet<A>> plusT<NUM,  A>(IEnumerable<HashSet<A>> x, IEnumerable<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static IEnumerable<HashSet<A>> subtractT<NUM,  A>(IEnumerable<HashSet<A>> x, IEnumerable<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static IEnumerable<HashSet<A>> productT<NUM,  A>(IEnumerable<HashSet<A>> x, IEnumerable<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static IEnumerable<HashSet<A>> divideT<NUM,  A>(IEnumerable<HashSet<A>> x, IEnumerable<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static IEnumerable<HashSet<A>> appendT<SEMI,  A>(IEnumerable<HashSet<A>> x, IEnumerable<HashSet<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(IEnumerable<HashSet<A>> x, IEnumerable<HashSet<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(IEnumerable<HashSet<A>> x, IEnumerable<HashSet<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<HashSet<B>> applyT< A, B>(Func<A, B> fab, IEnumerable<HashSet<A>> fa) =>
            default(ApplEnumerable< HashSet<A>, HashSet<B>>).Apply(
                 default(MEnumerable< Func<HashSet<A>, HashSet<B>>>).Pure((HashSet<A> a) => default(ApplHashSet< A, B>).Apply(
                     default(MHashSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<HashSet<B>> applyT< A, B>(IEnumerable<HashSet<Func<A, B>>> fab, IEnumerable<HashSet<A>> fa) =>
            default(MEnumerable<HashSet<Func<A, B>>>).Bind<MEnumerable<HashSet<B>>, IEnumerable<HashSet<B>>, HashSet<B>>(fab, f =>
                default(MEnumerable<HashSet<A>>).Bind<MEnumerable<HashSet<B>>, IEnumerable<HashSet<B>>, HashSet<B>>(fa, a => 
                    default(MEnumerable<HashSet<B>>).Pure(default(ApplHashSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `IEnumerable&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static IEnumerable<HashSet<C>> applyT< A, B, C>(Func<A, B, C> fabc, IEnumerable<HashSet<A>> fa, IEnumerable<HashSet<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class LstT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `IEnumerable&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Lst&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `IEnumerable&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(IEnumerable<Lst<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MEnumerable<Lst<A>>, IEnumerable<Lst<A>>, MLst<A>, Lst<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `IEnumerable&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Lst&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `IEnumerable&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(IEnumerable<Lst<A>> ma) =>
            default(SeqTrans<MEnumerable<Lst<A>>, IEnumerable<Lst<A>>, MLst<A>, Lst<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`IEnumerable&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Lst<B>> bindT< A, B>(IEnumerable<Lst<A>> ma, Func<A, Lst<B>> f) =>
            default(SeqTrans<MEnumerable<Lst<A>>, IEnumerable<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MEnumerable<Lst<B>>, IEnumerable<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `IEnumerable&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;IEnumerable&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;IEnumerable&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Lst<IEnumerable<B>> traverse< A, B>(IEnumerable<Lst<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `IEnumerable&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;IEnumerable&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Lst<IEnumerable<A>> sequence< A>(IEnumerable<Lst<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Lst<B>> mapT< A, B>(IEnumerable<Lst<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MEnumerable<Lst<A>>, IEnumerable<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Map<MEnumerable<Lst<B>>, IEnumerable<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(IEnumerable<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Lst<A>>, IEnumerable<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(IEnumerable<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Lst<A>>, IEnumerable<Lst<A>>, MLst<A>, Lst<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(IEnumerable<Lst<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Lst<A>>, IEnumerable<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(IEnumerable<Lst<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Lst<A>>, IEnumerable<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `IEnumerable&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(IEnumerable<Lst<A>> ma, Action<A> f) =>
            default(SeqTrans<MEnumerable<Lst<A>>, IEnumerable<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`IEnumerable&lt;Lst&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static IEnumerable<Lst<A>> filterT< A>(IEnumerable<Lst<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MEnumerable<Lst<A>>, IEnumerable<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MEnumerable<Lst<A>>, IEnumerable<Lst<A>>, MLst<A>, Lst<A>, A>(ma, 
                    a => pred(a)
                        ? default(MLst<A>).Pure(a)
                        : default(MLst<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Lst&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static IEnumerable<Lst<A>> plusT<NUM,  A>(IEnumerable<Lst<A>> x, IEnumerable<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Lst&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static IEnumerable<Lst<A>> subtractT<NUM,  A>(IEnumerable<Lst<A>> x, IEnumerable<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static IEnumerable<Lst<A>> productT<NUM,  A>(IEnumerable<Lst<A>> x, IEnumerable<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static IEnumerable<Lst<A>> divideT<NUM,  A>(IEnumerable<Lst<A>> x, IEnumerable<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static IEnumerable<Lst<A>> appendT<SEMI,  A>(IEnumerable<Lst<A>> x, IEnumerable<Lst<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(IEnumerable<Lst<A>> x, IEnumerable<Lst<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(IEnumerable<Lst<A>> x, IEnumerable<Lst<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Lst<B>> applyT< A, B>(Func<A, B> fab, IEnumerable<Lst<A>> fa) =>
            default(ApplEnumerable< Lst<A>, Lst<B>>).Apply(
                 default(MEnumerable< Func<Lst<A>, Lst<B>>>).Pure((Lst<A> a) => default(ApplLst< A, B>).Apply(
                     default(MLst< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Lst<B>> applyT< A, B>(IEnumerable<Lst<Func<A, B>>> fab, IEnumerable<Lst<A>> fa) =>
            default(MEnumerable<Lst<Func<A, B>>>).Bind<MEnumerable<Lst<B>>, IEnumerable<Lst<B>>, Lst<B>>(fab, f =>
                default(MEnumerable<Lst<A>>).Bind<MEnumerable<Lst<B>>, IEnumerable<Lst<B>>, Lst<B>>(fa, a => 
                    default(MEnumerable<Lst<B>>).Pure(default(ApplLst< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Lst&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `IEnumerable&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static IEnumerable<Lst<C>> applyT< A, B, C>(Func<A, B, C> fabc, IEnumerable<Lst<A>> fa, IEnumerable<Lst<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class FinT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `IEnumerable&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Fin&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `IEnumerable&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(IEnumerable<Fin<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MEnumerable<Fin<A>>, IEnumerable<Fin<A>>, MFin<A>, Fin<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `IEnumerable&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Fin&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `IEnumerable&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(IEnumerable<Fin<A>> ma) =>
            default(SeqTrans<MEnumerable<Fin<A>>, IEnumerable<Fin<A>>, MFin<A>, Fin<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`IEnumerable&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Fin<B>> bindT< A, B>(IEnumerable<Fin<A>> ma, Func<A, Fin<B>> f) =>
            default(SeqTrans<MEnumerable<Fin<A>>, IEnumerable<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MEnumerable<Fin<B>>, IEnumerable<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `IEnumerable&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;IEnumerable&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;IEnumerable&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Fin<IEnumerable<B>> traverse< A, B>(IEnumerable<Fin<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `IEnumerable&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;IEnumerable&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Fin<IEnumerable<A>> sequence< A>(IEnumerable<Fin<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Fin<B>> mapT< A, B>(IEnumerable<Fin<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MEnumerable<Fin<A>>, IEnumerable<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Map<MEnumerable<Fin<B>>, IEnumerable<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(IEnumerable<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Fin<A>>, IEnumerable<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(IEnumerable<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Fin<A>>, IEnumerable<Fin<A>>, MFin<A>, Fin<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(IEnumerable<Fin<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Fin<A>>, IEnumerable<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(IEnumerable<Fin<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Fin<A>>, IEnumerable<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `IEnumerable&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(IEnumerable<Fin<A>> ma, Action<A> f) =>
            default(SeqTrans<MEnumerable<Fin<A>>, IEnumerable<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`IEnumerable&lt;Fin&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static IEnumerable<Fin<A>> filterT< A>(IEnumerable<Fin<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MEnumerable<Fin<A>>, IEnumerable<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MEnumerable<Fin<A>>, IEnumerable<Fin<A>>, MFin<A>, Fin<A>, A>(ma, 
                    a => pred(a)
                        ? default(MFin<A>).Pure(a)
                        : default(MFin<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Fin&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static IEnumerable<Fin<A>> plusT<NUM,  A>(IEnumerable<Fin<A>> x, IEnumerable<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Fin&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static IEnumerable<Fin<A>> subtractT<NUM,  A>(IEnumerable<Fin<A>> x, IEnumerable<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static IEnumerable<Fin<A>> productT<NUM,  A>(IEnumerable<Fin<A>> x, IEnumerable<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static IEnumerable<Fin<A>> divideT<NUM,  A>(IEnumerable<Fin<A>> x, IEnumerable<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static IEnumerable<Fin<A>> appendT<SEMI,  A>(IEnumerable<Fin<A>> x, IEnumerable<Fin<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(IEnumerable<Fin<A>> x, IEnumerable<Fin<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(IEnumerable<Fin<A>> x, IEnumerable<Fin<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Fin<B>> applyT< A, B>(Func<A, B> fab, IEnumerable<Fin<A>> fa) =>
            default(ApplEnumerable< Fin<A>, Fin<B>>).Apply(
                 default(MEnumerable< Func<Fin<A>, Fin<B>>>).Pure((Fin<A> a) => default(ApplFin< A, B>).Apply(
                     default(MFin< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Fin<B>> applyT< A, B>(IEnumerable<Fin<Func<A, B>>> fab, IEnumerable<Fin<A>> fa) =>
            default(MEnumerable<Fin<Func<A, B>>>).Bind<MEnumerable<Fin<B>>, IEnumerable<Fin<B>>, Fin<B>>(fab, f =>
                default(MEnumerable<Fin<A>>).Bind<MEnumerable<Fin<B>>, IEnumerable<Fin<B>>, Fin<B>>(fa, a => 
                    default(MEnumerable<Fin<B>>).Pure(default(ApplFin< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Fin&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `IEnumerable&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static IEnumerable<Fin<C>> applyT< A, B, C>(Func<A, B, C> fabc, IEnumerable<Fin<A>> fa, IEnumerable<Fin<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `IEnumerable&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Option&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `IEnumerable&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(IEnumerable<Option<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MEnumerable<Option<A>>, IEnumerable<Option<A>>, MOption<A>, Option<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `IEnumerable&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Option&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `IEnumerable&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(IEnumerable<Option<A>> ma) =>
            default(SeqTrans<MEnumerable<Option<A>>, IEnumerable<Option<A>>, MOption<A>, Option<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`IEnumerable&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Option<B>> bindT< A, B>(IEnumerable<Option<A>> ma, Func<A, Option<B>> f) =>
            default(SeqTrans<MEnumerable<Option<A>>, IEnumerable<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MEnumerable<Option<B>>, IEnumerable<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `IEnumerable&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;IEnumerable&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;IEnumerable&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Option<IEnumerable<B>> traverse< A, B>(IEnumerable<Option<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `IEnumerable&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;IEnumerable&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Option<IEnumerable<A>> sequence< A>(IEnumerable<Option<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Option<B>> mapT< A, B>(IEnumerable<Option<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MEnumerable<Option<A>>, IEnumerable<Option<A>>, MOption<A>, Option<A>, A>)
                .Map<MEnumerable<Option<B>>, IEnumerable<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(IEnumerable<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Option<A>>, IEnumerable<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(IEnumerable<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Option<A>>, IEnumerable<Option<A>>, MOption<A>, Option<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(IEnumerable<Option<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Option<A>>, IEnumerable<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(IEnumerable<Option<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Option<A>>, IEnumerable<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `IEnumerable&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(IEnumerable<Option<A>> ma, Action<A> f) =>
            default(SeqTrans<MEnumerable<Option<A>>, IEnumerable<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`IEnumerable&lt;Option&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static IEnumerable<Option<A>> filterT< A>(IEnumerable<Option<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MEnumerable<Option<A>>, IEnumerable<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MEnumerable<Option<A>>, IEnumerable<Option<A>>, MOption<A>, Option<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOption<A>).Pure(a)
                        : default(MOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Option&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static IEnumerable<Option<A>> plusT<NUM,  A>(IEnumerable<Option<A>> x, IEnumerable<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Option&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static IEnumerable<Option<A>> subtractT<NUM,  A>(IEnumerable<Option<A>> x, IEnumerable<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Option&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static IEnumerable<Option<A>> productT<NUM,  A>(IEnumerable<Option<A>> x, IEnumerable<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Option&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static IEnumerable<Option<A>> divideT<NUM,  A>(IEnumerable<Option<A>> x, IEnumerable<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Option&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static IEnumerable<Option<A>> appendT<SEMI,  A>(IEnumerable<Option<A>> x, IEnumerable<Option<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(IEnumerable<Option<A>> x, IEnumerable<Option<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Option&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(IEnumerable<Option<A>> x, IEnumerable<Option<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Option<B>> applyT< A, B>(Func<A, B> fab, IEnumerable<Option<A>> fa) =>
            default(ApplEnumerable< Option<A>, Option<B>>).Apply(
                 default(MEnumerable< Func<Option<A>, Option<B>>>).Pure((Option<A> a) => default(ApplOption< A, B>).Apply(
                     default(MOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Option<B>> applyT< A, B>(IEnumerable<Option<Func<A, B>>> fab, IEnumerable<Option<A>> fa) =>
            default(MEnumerable<Option<Func<A, B>>>).Bind<MEnumerable<Option<B>>, IEnumerable<Option<B>>, Option<B>>(fab, f =>
                default(MEnumerable<Option<A>>).Bind<MEnumerable<Option<B>>, IEnumerable<Option<B>>, Option<B>>(fa, a => 
                    default(MEnumerable<Option<B>>).Pure(default(ApplOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Option&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `IEnumerable&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Option&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static IEnumerable<Option<C>> applyT< A, B, C>(Func<A, B, C> fabc, IEnumerable<Option<A>> fa, IEnumerable<Option<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(IEnumerable<OptionUnsafe<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MEnumerable<OptionUnsafe<A>>, IEnumerable<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(IEnumerable<OptionUnsafe<A>> ma) =>
            default(SeqTrans<MEnumerable<OptionUnsafe<A>>, IEnumerable<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`IEnumerable&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<OptionUnsafe<B>> bindT< A, B>(IEnumerable<OptionUnsafe<A>> ma, Func<A, OptionUnsafe<B>> f) =>
            default(SeqTrans<MEnumerable<OptionUnsafe<A>>, IEnumerable<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MEnumerable<OptionUnsafe<B>>, IEnumerable<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;IEnumerable&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;IEnumerable&lt;B&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<IEnumerable<B>> traverse< A, B>(IEnumerable<OptionUnsafe<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<IEnumerable<A>> sequence< A>(IEnumerable<OptionUnsafe<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<OptionUnsafe<B>> mapT< A, B>(IEnumerable<OptionUnsafe<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MEnumerable<OptionUnsafe<A>>, IEnumerable<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Map<MEnumerable<OptionUnsafe<B>>, IEnumerable<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(IEnumerable<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<OptionUnsafe<A>>, IEnumerable<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(IEnumerable<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<OptionUnsafe<A>>, IEnumerable<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(IEnumerable<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<OptionUnsafe<A>>, IEnumerable<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(IEnumerable<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<OptionUnsafe<A>>, IEnumerable<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(IEnumerable<OptionUnsafe<A>> ma, Action<A> f) =>
            default(SeqTrans<MEnumerable<OptionUnsafe<A>>, IEnumerable<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static IEnumerable<OptionUnsafe<A>> filterT< A>(IEnumerable<OptionUnsafe<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MEnumerable<OptionUnsafe<A>>, IEnumerable<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MEnumerable<OptionUnsafe<A>>, IEnumerable<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOptionUnsafe<A>).Pure(a)
                        : default(MOptionUnsafe<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static IEnumerable<OptionUnsafe<A>> plusT<NUM,  A>(IEnumerable<OptionUnsafe<A>> x, IEnumerable<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static IEnumerable<OptionUnsafe<A>> subtractT<NUM,  A>(IEnumerable<OptionUnsafe<A>> x, IEnumerable<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static IEnumerable<OptionUnsafe<A>> productT<NUM,  A>(IEnumerable<OptionUnsafe<A>> x, IEnumerable<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static IEnumerable<OptionUnsafe<A>> divideT<NUM,  A>(IEnumerable<OptionUnsafe<A>> x, IEnumerable<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static IEnumerable<OptionUnsafe<A>> appendT<SEMI,  A>(IEnumerable<OptionUnsafe<A>> x, IEnumerable<OptionUnsafe<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(IEnumerable<OptionUnsafe<A>> x, IEnumerable<OptionUnsafe<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(IEnumerable<OptionUnsafe<A>> x, IEnumerable<OptionUnsafe<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<OptionUnsafe<B>> applyT< A, B>(Func<A, B> fab, IEnumerable<OptionUnsafe<A>> fa) =>
            default(ApplEnumerable< OptionUnsafe<A>, OptionUnsafe<B>>).Apply(
                 default(MEnumerable< Func<OptionUnsafe<A>, OptionUnsafe<B>>>).Pure((OptionUnsafe<A> a) => default(ApplOptionUnsafe< A, B>).Apply(
                     default(MOptionUnsafe< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<OptionUnsafe<B>> applyT< A, B>(IEnumerable<OptionUnsafe<Func<A, B>>> fab, IEnumerable<OptionUnsafe<A>> fa) =>
            default(MEnumerable<OptionUnsafe<Func<A, B>>>).Bind<MEnumerable<OptionUnsafe<B>>, IEnumerable<OptionUnsafe<B>>, OptionUnsafe<B>>(fab, f =>
                default(MEnumerable<OptionUnsafe<A>>).Bind<MEnumerable<OptionUnsafe<B>>, IEnumerable<OptionUnsafe<B>>, OptionUnsafe<B>>(fa, a => 
                    default(MEnumerable<OptionUnsafe<B>>).Pure(default(ApplOptionUnsafe< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `IEnumerable&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static IEnumerable<OptionUnsafe<C>> applyT< A, B, C>(Func<A, B, C> fabc, IEnumerable<OptionUnsafe<A>> fa, IEnumerable<OptionUnsafe<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `IEnumerable&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Either&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `IEnumerable&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(IEnumerable<Either<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MEnumerable<Either<L, A>>, IEnumerable<Either<L, A>>, MEither<L, A>, Either<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `IEnumerable&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Either&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `IEnumerable&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(IEnumerable<Either<L, A>> ma) =>
            default(SeqTrans<MEnumerable<Either<L, A>>, IEnumerable<Either<L, A>>, MEither<L, A>, Either<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`IEnumerable&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Either<L, B>> bindT<L, A, B>(IEnumerable<Either<L, A>> ma, Func<A, Either<L, B>> f) =>
            default(SeqTrans<MEnumerable<Either<L, A>>, IEnumerable<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MEnumerable<Either<L, B>>, IEnumerable<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `IEnumerable&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, IEnumerable&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, IEnumerable&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Either<L, IEnumerable<B>> traverse<L, A, B>(IEnumerable<Either<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `IEnumerable&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, IEnumerable&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Either<L, IEnumerable<A>> sequence<L, A>(IEnumerable<Either<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Either<L, B>> mapT<L, A, B>(IEnumerable<Either<L, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MEnumerable<Either<L, A>>, IEnumerable<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Map<MEnumerable<Either<L, B>>, IEnumerable<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(IEnumerable<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Either<L, A>>, IEnumerable<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(IEnumerable<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Either<L, A>>, IEnumerable<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(IEnumerable<Either<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Either<L, A>>, IEnumerable<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(IEnumerable<Either<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Either<L, A>>, IEnumerable<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `IEnumerable&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(IEnumerable<Either<L, A>> ma, Action<A> f) =>
            default(SeqTrans<MEnumerable<Either<L, A>>, IEnumerable<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`IEnumerable&lt;Either&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static IEnumerable<Either<L, A>> filterT<L, A>(IEnumerable<Either<L, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MEnumerable<Either<L, A>>, IEnumerable<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MEnumerable<Either<L, A>>, IEnumerable<Either<L, A>>, MEither<L, A>, Either<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEither<L, A>).Pure(a)
                        : default(MEither<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static IEnumerable<Either<L, A>> plusT<NUM, L, A>(IEnumerable<Either<L, A>> x, IEnumerable<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static IEnumerable<Either<L, A>> subtractT<NUM, L, A>(IEnumerable<Either<L, A>> x, IEnumerable<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static IEnumerable<Either<L, A>> productT<NUM, L, A>(IEnumerable<Either<L, A>> x, IEnumerable<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static IEnumerable<Either<L, A>> divideT<NUM, L, A>(IEnumerable<Either<L, A>> x, IEnumerable<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static IEnumerable<Either<L, A>> appendT<SEMI, L, A>(IEnumerable<Either<L, A>> x, IEnumerable<Either<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(IEnumerable<Either<L, A>> x, IEnumerable<Either<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(IEnumerable<Either<L, A>> x, IEnumerable<Either<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Either<L, B>> applyT<L, A, B>(Func<A, B> fab, IEnumerable<Either<L, A>> fa) =>
            default(ApplEnumerable< Either<L, A>, Either<L, B>>).Apply(
                 default(MEnumerable< Func<Either<L, A>, Either<L, B>>>).Pure((Either<L, A> a) => default(ApplEither<L, A, B>).Apply(
                     default(MEither<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Either<L, B>> applyT<L, A, B>(IEnumerable<Either<L, Func<A, B>>> fab, IEnumerable<Either<L, A>> fa) =>
            default(MEnumerable<Either<L, Func<A, B>>>).Bind<MEnumerable<Either<L, B>>, IEnumerable<Either<L, B>>, Either<L, B>>(fab, f =>
                default(MEnumerable<Either<L, A>>).Bind<MEnumerable<Either<L, B>>, IEnumerable<Either<L, B>>, Either<L, B>>(fa, a => 
                    default(MEnumerable<Either<L, B>>).Pure(default(ApplEither<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `IEnumerable&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static IEnumerable<Either<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, IEnumerable<Either<L, A>> fa, IEnumerable<Either<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(IEnumerable<EitherUnsafe<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MEnumerable<EitherUnsafe<L, A>>, IEnumerable<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(IEnumerable<EitherUnsafe<L, A>> ma) =>
            default(SeqTrans<MEnumerable<EitherUnsafe<L, A>>, IEnumerable<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<EitherUnsafe<L, B>> bindT<L, A, B>(IEnumerable<EitherUnsafe<L, A>> ma, Func<A, EitherUnsafe<L, B>> f) =>
            default(SeqTrans<MEnumerable<EitherUnsafe<L, A>>, IEnumerable<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MEnumerable<EitherUnsafe<L, B>>, IEnumerable<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, IEnumerable&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, IEnumerable&lt;B&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, IEnumerable<B>> traverse<L, A, B>(IEnumerable<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, IEnumerable<A>> sequence<L, A>(IEnumerable<EitherUnsafe<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<EitherUnsafe<L, B>> mapT<L, A, B>(IEnumerable<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MEnumerable<EitherUnsafe<L, A>>, IEnumerable<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Map<MEnumerable<EitherUnsafe<L, B>>, IEnumerable<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(IEnumerable<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<EitherUnsafe<L, A>>, IEnumerable<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(IEnumerable<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<EitherUnsafe<L, A>>, IEnumerable<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(IEnumerable<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<EitherUnsafe<L, A>>, IEnumerable<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(IEnumerable<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<EitherUnsafe<L, A>>, IEnumerable<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(IEnumerable<EitherUnsafe<L, A>> ma, Action<A> f) =>
            default(SeqTrans<MEnumerable<EitherUnsafe<L, A>>, IEnumerable<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static IEnumerable<EitherUnsafe<L, A>> filterT<L, A>(IEnumerable<EitherUnsafe<L, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MEnumerable<EitherUnsafe<L, A>>, IEnumerable<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MEnumerable<EitherUnsafe<L, A>>, IEnumerable<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEitherUnsafe<L, A>).Pure(a)
                        : default(MEitherUnsafe<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static IEnumerable<EitherUnsafe<L, A>> plusT<NUM, L, A>(IEnumerable<EitherUnsafe<L, A>> x, IEnumerable<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static IEnumerable<EitherUnsafe<L, A>> subtractT<NUM, L, A>(IEnumerable<EitherUnsafe<L, A>> x, IEnumerable<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static IEnumerable<EitherUnsafe<L, A>> productT<NUM, L, A>(IEnumerable<EitherUnsafe<L, A>> x, IEnumerable<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static IEnumerable<EitherUnsafe<L, A>> divideT<NUM, L, A>(IEnumerable<EitherUnsafe<L, A>> x, IEnumerable<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static IEnumerable<EitherUnsafe<L, A>> appendT<SEMI, L, A>(IEnumerable<EitherUnsafe<L, A>> x, IEnumerable<EitherUnsafe<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(IEnumerable<EitherUnsafe<L, A>> x, IEnumerable<EitherUnsafe<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(IEnumerable<EitherUnsafe<L, A>> x, IEnumerable<EitherUnsafe<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<EitherUnsafe<L, B>> applyT<L, A, B>(Func<A, B> fab, IEnumerable<EitherUnsafe<L, A>> fa) =>
            default(ApplEnumerable< EitherUnsafe<L, A>, EitherUnsafe<L, B>>).Apply(
                 default(MEnumerable< Func<EitherUnsafe<L, A>, EitherUnsafe<L, B>>>).Pure((EitherUnsafe<L, A> a) => default(ApplEitherUnsafe<L, A, B>).Apply(
                     default(MEitherUnsafe<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<EitherUnsafe<L, B>> applyT<L, A, B>(IEnumerable<EitherUnsafe<L, Func<A, B>>> fab, IEnumerable<EitherUnsafe<L, A>> fa) =>
            default(MEnumerable<EitherUnsafe<L, Func<A, B>>>).Bind<MEnumerable<EitherUnsafe<L, B>>, IEnumerable<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fab, f =>
                default(MEnumerable<EitherUnsafe<L, A>>).Bind<MEnumerable<EitherUnsafe<L, B>>, IEnumerable<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fa, a => 
                    default(MEnumerable<EitherUnsafe<L, B>>).Pure(default(ApplEitherUnsafe<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `IEnumerable&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static IEnumerable<EitherUnsafe<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, IEnumerable<EitherUnsafe<L, A>> fa, IEnumerable<EitherUnsafe<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `IEnumerable&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Try&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `IEnumerable&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(IEnumerable<Try<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MEnumerable<Try<A>>, IEnumerable<Try<A>>, MTry<A>, Try<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `IEnumerable&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Try&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `IEnumerable&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(IEnumerable<Try<A>> ma) =>
            default(SeqTrans<MEnumerable<Try<A>>, IEnumerable<Try<A>>, MTry<A>, Try<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`IEnumerable&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Try<B>> bindT< A, B>(IEnumerable<Try<A>> ma, Func<A, Try<B>> f) =>
            default(SeqTrans<MEnumerable<Try<A>>, IEnumerable<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MEnumerable<Try<B>>, IEnumerable<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `IEnumerable&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;IEnumerable&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;IEnumerable&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Try<IEnumerable<B>> traverse< A, B>(IEnumerable<Try<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `IEnumerable&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;IEnumerable&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Try<IEnumerable<A>> sequence< A>(IEnumerable<Try<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Try<B>> mapT< A, B>(IEnumerable<Try<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MEnumerable<Try<A>>, IEnumerable<Try<A>>, MTry<A>, Try<A>, A>)
                .Map<MEnumerable<Try<B>>, IEnumerable<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(IEnumerable<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Try<A>>, IEnumerable<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(IEnumerable<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Try<A>>, IEnumerable<Try<A>>, MTry<A>, Try<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(IEnumerable<Try<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Try<A>>, IEnumerable<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(IEnumerable<Try<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Try<A>>, IEnumerable<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `IEnumerable&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(IEnumerable<Try<A>> ma, Action<A> f) =>
            default(SeqTrans<MEnumerable<Try<A>>, IEnumerable<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`IEnumerable&lt;Try&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static IEnumerable<Try<A>> filterT< A>(IEnumerable<Try<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MEnumerable<Try<A>>, IEnumerable<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MEnumerable<Try<A>>, IEnumerable<Try<A>>, MTry<A>, Try<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTry<A>).Pure(a)
                        : default(MTry<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Try&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static IEnumerable<Try<A>> plusT<NUM,  A>(IEnumerable<Try<A>> x, IEnumerable<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Try&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static IEnumerable<Try<A>> subtractT<NUM,  A>(IEnumerable<Try<A>> x, IEnumerable<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Try&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static IEnumerable<Try<A>> productT<NUM,  A>(IEnumerable<Try<A>> x, IEnumerable<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Try&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static IEnumerable<Try<A>> divideT<NUM,  A>(IEnumerable<Try<A>> x, IEnumerable<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Try&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static IEnumerable<Try<A>> appendT<SEMI,  A>(IEnumerable<Try<A>> x, IEnumerable<Try<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(IEnumerable<Try<A>> x, IEnumerable<Try<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Try&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(IEnumerable<Try<A>> x, IEnumerable<Try<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Try<B>> applyT< A, B>(Func<A, B> fab, IEnumerable<Try<A>> fa) =>
            default(ApplEnumerable< Try<A>, Try<B>>).Apply(
                 default(MEnumerable< Func<Try<A>, Try<B>>>).Pure((Try<A> a) => default(ApplTry< A, B>).Apply(
                     default(MTry< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Try<B>> applyT< A, B>(IEnumerable<Try<Func<A, B>>> fab, IEnumerable<Try<A>> fa) =>
            default(MEnumerable<Try<Func<A, B>>>).Bind<MEnumerable<Try<B>>, IEnumerable<Try<B>>, Try<B>>(fab, f =>
                default(MEnumerable<Try<A>>).Bind<MEnumerable<Try<B>>, IEnumerable<Try<B>>, Try<B>>(fa, a => 
                    default(MEnumerable<Try<B>>).Pure(default(ApplTry< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Try&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `IEnumerable&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Try&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static IEnumerable<Try<C>> applyT< A, B, C>(Func<A, B, C> fabc, IEnumerable<Try<A>> fa, IEnumerable<Try<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryOptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `IEnumerable&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;TryOption&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `IEnumerable&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(IEnumerable<TryOption<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MEnumerable<TryOption<A>>, IEnumerable<TryOption<A>>, MTryOption<A>, TryOption<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `IEnumerable&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;TryOption&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `IEnumerable&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(IEnumerable<TryOption<A>> ma) =>
            default(SeqTrans<MEnumerable<TryOption<A>>, IEnumerable<TryOption<A>>, MTryOption<A>, TryOption<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`IEnumerable&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<TryOption<B>> bindT< A, B>(IEnumerable<TryOption<A>> ma, Func<A, TryOption<B>> f) =>
            default(SeqTrans<MEnumerable<TryOption<A>>, IEnumerable<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MEnumerable<TryOption<B>>, IEnumerable<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `IEnumerable&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;IEnumerable&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;IEnumerable&lt;B&gt;&gt;`</returns>
        [Pure]
        public static TryOption<IEnumerable<B>> traverse< A, B>(IEnumerable<TryOption<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `IEnumerable&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;IEnumerable&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static TryOption<IEnumerable<A>> sequence< A>(IEnumerable<TryOption<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<TryOption<B>> mapT< A, B>(IEnumerable<TryOption<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MEnumerable<TryOption<A>>, IEnumerable<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Map<MEnumerable<TryOption<B>>, IEnumerable<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(IEnumerable<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<TryOption<A>>, IEnumerable<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(IEnumerable<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<TryOption<A>>, IEnumerable<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(IEnumerable<TryOption<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<TryOption<A>>, IEnumerable<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(IEnumerable<TryOption<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<TryOption<A>>, IEnumerable<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `IEnumerable&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(IEnumerable<TryOption<A>> ma, Action<A> f) =>
            default(SeqTrans<MEnumerable<TryOption<A>>, IEnumerable<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`IEnumerable&lt;TryOption&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static IEnumerable<TryOption<A>> filterT< A>(IEnumerable<TryOption<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MEnumerable<TryOption<A>>, IEnumerable<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MEnumerable<TryOption<A>>, IEnumerable<TryOption<A>>, MTryOption<A>, TryOption<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTryOption<A>).Pure(a)
                        : default(MTryOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static IEnumerable<TryOption<A>> plusT<NUM,  A>(IEnumerable<TryOption<A>> x, IEnumerable<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static IEnumerable<TryOption<A>> subtractT<NUM,  A>(IEnumerable<TryOption<A>> x, IEnumerable<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static IEnumerable<TryOption<A>> productT<NUM,  A>(IEnumerable<TryOption<A>> x, IEnumerable<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static IEnumerable<TryOption<A>> divideT<NUM,  A>(IEnumerable<TryOption<A>> x, IEnumerable<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static IEnumerable<TryOption<A>> appendT<SEMI,  A>(IEnumerable<TryOption<A>> x, IEnumerable<TryOption<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(IEnumerable<TryOption<A>> x, IEnumerable<TryOption<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(IEnumerable<TryOption<A>> x, IEnumerable<TryOption<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<TryOption<B>> applyT< A, B>(Func<A, B> fab, IEnumerable<TryOption<A>> fa) =>
            default(ApplEnumerable< TryOption<A>, TryOption<B>>).Apply(
                 default(MEnumerable< Func<TryOption<A>, TryOption<B>>>).Pure((TryOption<A> a) => default(ApplTryOption< A, B>).Apply(
                     default(MTryOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<TryOption<B>> applyT< A, B>(IEnumerable<TryOption<Func<A, B>>> fab, IEnumerable<TryOption<A>> fa) =>
            default(MEnumerable<TryOption<Func<A, B>>>).Bind<MEnumerable<TryOption<B>>, IEnumerable<TryOption<B>>, TryOption<B>>(fab, f =>
                default(MEnumerable<TryOption<A>>).Bind<MEnumerable<TryOption<B>>, IEnumerable<TryOption<B>>, TryOption<B>>(fa, a => 
                    default(MEnumerable<TryOption<B>>).Pure(default(ApplTryOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `IEnumerable&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static IEnumerable<TryOption<C>> applyT< A, B, C>(Func<A, B, C> fabc, IEnumerable<TryOption<A>> fa, IEnumerable<TryOption<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class IEnumerableT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(IEnumerable<IEnumerable<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MEnumerable<IEnumerable<A>>, IEnumerable<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(IEnumerable<IEnumerable<A>> ma) =>
            default(SeqTrans<MEnumerable<IEnumerable<A>>, IEnumerable<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`IEnumerable&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<IEnumerable<B>> bindT< A, B>(IEnumerable<IEnumerable<A>> ma, Func<A, IEnumerable<B>> f) =>
            default(SeqTrans<MEnumerable<IEnumerable<A>>, IEnumerable<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MEnumerable<IEnumerable<B>>, IEnumerable<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;IEnumerable&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;IEnumerable&lt;B&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<IEnumerable<B>> traverse< A, B>(IEnumerable<IEnumerable<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<IEnumerable<A>> sequence< A>(IEnumerable<IEnumerable<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<IEnumerable<B>> mapT< A, B>(IEnumerable<IEnumerable<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MEnumerable<IEnumerable<A>>, IEnumerable<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Map<MEnumerable<IEnumerable<B>>, IEnumerable<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(IEnumerable<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<IEnumerable<A>>, IEnumerable<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(IEnumerable<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<IEnumerable<A>>, IEnumerable<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(IEnumerable<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<IEnumerable<A>>, IEnumerable<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(IEnumerable<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<IEnumerable<A>>, IEnumerable<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(IEnumerable<IEnumerable<A>> ma, Action<A> f) =>
            default(SeqTrans<MEnumerable<IEnumerable<A>>, IEnumerable<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static IEnumerable<IEnumerable<A>> filterT< A>(IEnumerable<IEnumerable<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MEnumerable<IEnumerable<A>>, IEnumerable<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MEnumerable<IEnumerable<A>>, IEnumerable<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>(ma, 
                    a => pred(a)
                        ? default(MEnumerable<A>).Pure(a)
                        : default(MEnumerable<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static IEnumerable<IEnumerable<A>> plusT<NUM,  A>(IEnumerable<IEnumerable<A>> x, IEnumerable<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static IEnumerable<IEnumerable<A>> subtractT<NUM,  A>(IEnumerable<IEnumerable<A>> x, IEnumerable<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static IEnumerable<IEnumerable<A>> productT<NUM,  A>(IEnumerable<IEnumerable<A>> x, IEnumerable<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static IEnumerable<IEnumerable<A>> divideT<NUM,  A>(IEnumerable<IEnumerable<A>> x, IEnumerable<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static IEnumerable<IEnumerable<A>> appendT<SEMI,  A>(IEnumerable<IEnumerable<A>> x, IEnumerable<IEnumerable<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(IEnumerable<IEnumerable<A>> x, IEnumerable<IEnumerable<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(IEnumerable<IEnumerable<A>> x, IEnumerable<IEnumerable<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<IEnumerable<B>> applyT< A, B>(Func<A, B> fab, IEnumerable<IEnumerable<A>> fa) =>
            default(ApplEnumerable< IEnumerable<A>, IEnumerable<B>>).Apply(
                 default(MEnumerable< Func<IEnumerable<A>, IEnumerable<B>>>).Pure((IEnumerable<A> a) => default(ApplEnumerable< A, B>).Apply(
                     default(MEnumerable< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<IEnumerable<B>> applyT< A, B>(IEnumerable<IEnumerable<Func<A, B>>> fab, IEnumerable<IEnumerable<A>> fa) =>
            default(MEnumerable<IEnumerable<Func<A, B>>>).Bind<MEnumerable<IEnumerable<B>>, IEnumerable<IEnumerable<B>>, IEnumerable<B>>(fab, f =>
                default(MEnumerable<IEnumerable<A>>).Bind<MEnumerable<IEnumerable<B>>, IEnumerable<IEnumerable<B>>, IEnumerable<B>>(fa, a => 
                    default(MEnumerable<IEnumerable<B>>).Pure(default(ApplEnumerable< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `IEnumerable&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static IEnumerable<IEnumerable<C>> applyT< A, B, C>(Func<A, B, C> fabc, IEnumerable<IEnumerable<A>> fa, IEnumerable<IEnumerable<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SeqT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `IEnumerable&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Seq&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `IEnumerable&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(IEnumerable<Seq<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MEnumerable<Seq<A>>, IEnumerable<Seq<A>>, MSeq<A>, Seq<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `IEnumerable&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Seq&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `IEnumerable&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(IEnumerable<Seq<A>> ma) =>
            default(SeqTrans<MEnumerable<Seq<A>>, IEnumerable<Seq<A>>, MSeq<A>, Seq<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`IEnumerable&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Seq<B>> bindT< A, B>(IEnumerable<Seq<A>> ma, Func<A, Seq<B>> f) =>
            default(SeqTrans<MEnumerable<Seq<A>>, IEnumerable<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MEnumerable<Seq<B>>, IEnumerable<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `IEnumerable&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;IEnumerable&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;IEnumerable&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Seq<IEnumerable<B>> traverse< A, B>(IEnumerable<Seq<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `IEnumerable&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;IEnumerable&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Seq<IEnumerable<A>> sequence< A>(IEnumerable<Seq<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Seq<B>> mapT< A, B>(IEnumerable<Seq<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MEnumerable<Seq<A>>, IEnumerable<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Map<MEnumerable<Seq<B>>, IEnumerable<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(IEnumerable<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Seq<A>>, IEnumerable<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(IEnumerable<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Seq<A>>, IEnumerable<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(IEnumerable<Seq<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Seq<A>>, IEnumerable<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(IEnumerable<Seq<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Seq<A>>, IEnumerable<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `IEnumerable&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(IEnumerable<Seq<A>> ma, Action<A> f) =>
            default(SeqTrans<MEnumerable<Seq<A>>, IEnumerable<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`IEnumerable&lt;Seq&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static IEnumerable<Seq<A>> filterT< A>(IEnumerable<Seq<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MEnumerable<Seq<A>>, IEnumerable<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MEnumerable<Seq<A>>, IEnumerable<Seq<A>>, MSeq<A>, Seq<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSeq<A>).Pure(a)
                        : default(MSeq<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Seq&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static IEnumerable<Seq<A>> plusT<NUM,  A>(IEnumerable<Seq<A>> x, IEnumerable<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Seq&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static IEnumerable<Seq<A>> subtractT<NUM,  A>(IEnumerable<Seq<A>> x, IEnumerable<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static IEnumerable<Seq<A>> productT<NUM,  A>(IEnumerable<Seq<A>> x, IEnumerable<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static IEnumerable<Seq<A>> divideT<NUM,  A>(IEnumerable<Seq<A>> x, IEnumerable<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static IEnumerable<Seq<A>> appendT<SEMI,  A>(IEnumerable<Seq<A>> x, IEnumerable<Seq<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(IEnumerable<Seq<A>> x, IEnumerable<Seq<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(IEnumerable<Seq<A>> x, IEnumerable<Seq<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Seq<B>> applyT< A, B>(Func<A, B> fab, IEnumerable<Seq<A>> fa) =>
            default(ApplEnumerable< Seq<A>, Seq<B>>).Apply(
                 default(MEnumerable< Func<Seq<A>, Seq<B>>>).Pure((Seq<A> a) => default(ApplSeq< A, B>).Apply(
                     default(MSeq< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Seq<B>> applyT< A, B>(IEnumerable<Seq<Func<A, B>>> fab, IEnumerable<Seq<A>> fa) =>
            default(MEnumerable<Seq<Func<A, B>>>).Bind<MEnumerable<Seq<B>>, IEnumerable<Seq<B>>, Seq<B>>(fab, f =>
                default(MEnumerable<Seq<A>>).Bind<MEnumerable<Seq<B>>, IEnumerable<Seq<B>>, Seq<B>>(fa, a => 
                    default(MEnumerable<Seq<B>>).Pure(default(ApplSeq< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Seq&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `IEnumerable&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static IEnumerable<Seq<C>> applyT< A, B, C>(Func<A, B, C> fabc, IEnumerable<Seq<A>> fa, IEnumerable<Seq<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `IEnumerable&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Set&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `IEnumerable&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(IEnumerable<Set<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MEnumerable<Set<A>>, IEnumerable<Set<A>>, MSet<A>, Set<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `IEnumerable&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Set&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `IEnumerable&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(IEnumerable<Set<A>> ma) =>
            default(SeqTrans<MEnumerable<Set<A>>, IEnumerable<Set<A>>, MSet<A>, Set<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`IEnumerable&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Set<B>> bindT< A, B>(IEnumerable<Set<A>> ma, Func<A, Set<B>> f) =>
            default(SeqTrans<MEnumerable<Set<A>>, IEnumerable<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MEnumerable<Set<B>>, IEnumerable<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `IEnumerable&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;IEnumerable&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;IEnumerable&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Set<IEnumerable<B>> traverse< A, B>(IEnumerable<Set<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `IEnumerable&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;IEnumerable&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Set<IEnumerable<A>> sequence< A>(IEnumerable<Set<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Set<B>> mapT< A, B>(IEnumerable<Set<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MEnumerable<Set<A>>, IEnumerable<Set<A>>, MSet<A>, Set<A>, A>)
                .Map<MEnumerable<Set<B>>, IEnumerable<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(IEnumerable<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Set<A>>, IEnumerable<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(IEnumerable<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Set<A>>, IEnumerable<Set<A>>, MSet<A>, Set<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(IEnumerable<Set<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Set<A>>, IEnumerable<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(IEnumerable<Set<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Set<A>>, IEnumerable<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `IEnumerable&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(IEnumerable<Set<A>> ma, Action<A> f) =>
            default(SeqTrans<MEnumerable<Set<A>>, IEnumerable<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`IEnumerable&lt;Set&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static IEnumerable<Set<A>> filterT< A>(IEnumerable<Set<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MEnumerable<Set<A>>, IEnumerable<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MEnumerable<Set<A>>, IEnumerable<Set<A>>, MSet<A>, Set<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSet<A>).Pure(a)
                        : default(MSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Set&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static IEnumerable<Set<A>> plusT<NUM,  A>(IEnumerable<Set<A>> x, IEnumerable<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Set&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static IEnumerable<Set<A>> subtractT<NUM,  A>(IEnumerable<Set<A>> x, IEnumerable<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Set&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static IEnumerable<Set<A>> productT<NUM,  A>(IEnumerable<Set<A>> x, IEnumerable<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Set&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static IEnumerable<Set<A>> divideT<NUM,  A>(IEnumerable<Set<A>> x, IEnumerable<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Set&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static IEnumerable<Set<A>> appendT<SEMI,  A>(IEnumerable<Set<A>> x, IEnumerable<Set<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(IEnumerable<Set<A>> x, IEnumerable<Set<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Set&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(IEnumerable<Set<A>> x, IEnumerable<Set<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Set<B>> applyT< A, B>(Func<A, B> fab, IEnumerable<Set<A>> fa) =>
            default(ApplEnumerable< Set<A>, Set<B>>).Apply(
                 default(MEnumerable< Func<Set<A>, Set<B>>>).Pure((Set<A> a) => default(ApplSet< A, B>).Apply(
                     default(MSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Set<B>> applyT< A, B>(IEnumerable<Set<Func<A, B>>> fab, IEnumerable<Set<A>> fa) =>
            default(MEnumerable<Set<Func<A, B>>>).Bind<MEnumerable<Set<B>>, IEnumerable<Set<B>>, Set<B>>(fab, f =>
                default(MEnumerable<Set<A>>).Bind<MEnumerable<Set<B>>, IEnumerable<Set<B>>, Set<B>>(fa, a => 
                    default(MEnumerable<Set<B>>).Pure(default(ApplSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Set&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `IEnumerable&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Set&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static IEnumerable<Set<C>> applyT< A, B, C>(Func<A, B, C> fabc, IEnumerable<Set<A>> fa, IEnumerable<Set<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ValidationT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(IEnumerable<Validation<FAIL, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MEnumerable<Validation<FAIL, A>>, IEnumerable<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(IEnumerable<Validation<FAIL, A>> ma) =>
            default(SeqTrans<MEnumerable<Validation<FAIL, A>>, IEnumerable<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`IEnumerable&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Validation<FAIL, B>> bindT<FAIL, A, B>(IEnumerable<Validation<FAIL, A>> ma, Func<A, Validation<FAIL, B>> f) =>
            default(SeqTrans<MEnumerable<Validation<FAIL, A>>, IEnumerable<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MEnumerable<Validation<FAIL, B>>, IEnumerable<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, IEnumerable&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, IEnumerable&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, IEnumerable<B>> traverse<FAIL, A, B>(IEnumerable<Validation<FAIL, A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, IEnumerable<A>> sequence<FAIL, A>(IEnumerable<Validation<FAIL, A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static IEnumerable<Validation<FAIL, B>> mapT<FAIL, A, B>(IEnumerable<Validation<FAIL, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MEnumerable<Validation<FAIL, A>>, IEnumerable<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Map<MEnumerable<Validation<FAIL, B>>, IEnumerable<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(IEnumerable<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Validation<FAIL, A>>, IEnumerable<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(IEnumerable<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MEnumerable<Validation<FAIL, A>>, IEnumerable<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(IEnumerable<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Validation<FAIL, A>>, IEnumerable<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(IEnumerable<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MEnumerable<Validation<FAIL, A>>, IEnumerable<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(IEnumerable<Validation<FAIL, A>> ma, Action<A> f) =>
            default(SeqTrans<MEnumerable<Validation<FAIL, A>>, IEnumerable<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static IEnumerable<Validation<FAIL, A>> filterT<FAIL, A>(IEnumerable<Validation<FAIL, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MEnumerable<Validation<FAIL, A>>, IEnumerable<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MEnumerable<Validation<FAIL, A>>, IEnumerable<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>(ma, 
                    a => pred(a)
                        ? default(MValidation<FAIL, A>).Pure(a)
                        : default(MValidation<FAIL, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static IEnumerable<Validation<FAIL, A>> plusT<NUM, FAIL, A>(IEnumerable<Validation<FAIL, A>> x, IEnumerable<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static IEnumerable<Validation<FAIL, A>> subtractT<NUM, FAIL, A>(IEnumerable<Validation<FAIL, A>> x, IEnumerable<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static IEnumerable<Validation<FAIL, A>> productT<NUM, FAIL, A>(IEnumerable<Validation<FAIL, A>> x, IEnumerable<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static IEnumerable<Validation<FAIL, A>> divideT<NUM, FAIL, A>(IEnumerable<Validation<FAIL, A>> x, IEnumerable<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static IEnumerable<Validation<FAIL, A>> appendT<SEMI, FAIL, A>(IEnumerable<Validation<FAIL, A>> x, IEnumerable<Validation<FAIL, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(IEnumerable<Validation<FAIL, A>> x, IEnumerable<Validation<FAIL, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(IEnumerable<Validation<FAIL, A>> x, IEnumerable<Validation<FAIL, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Validation<FAIL, B>> applyT<FAIL, A, B>(Func<A, B> fab, IEnumerable<Validation<FAIL, A>> fa) =>
            default(ApplEnumerable< Validation<FAIL, A>, Validation<FAIL, B>>).Apply(
                 default(MEnumerable< Func<Validation<FAIL, A>, Validation<FAIL, B>>>).Pure((Validation<FAIL, A> a) => default(ApplValidation<FAIL, A, B>).Apply(
                     default(MValidation<FAIL, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static IEnumerable<Validation<FAIL, B>> applyT<FAIL, A, B>(IEnumerable<Validation<FAIL, Func<A, B>>> fab, IEnumerable<Validation<FAIL, A>> fa) =>
            default(MEnumerable<Validation<FAIL, Func<A, B>>>).Bind<MEnumerable<Validation<FAIL, B>>, IEnumerable<Validation<FAIL, B>>, Validation<FAIL, B>>(fab, f =>
                default(MEnumerable<Validation<FAIL, A>>).Bind<MEnumerable<Validation<FAIL, B>>, IEnumerable<Validation<FAIL, B>>, Validation<FAIL, B>>(fa, a => 
                    default(MEnumerable<Validation<FAIL, B>>).Pure(default(ApplValidation<FAIL, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`IEnumerable&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static IEnumerable<Validation<FAIL, C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, IEnumerable<Validation<FAIL, A>> fa, IEnumerable<Validation<FAIL, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ArrT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Seq&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Arr&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Seq&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Seq<Arr<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSeq<Arr<A>>, Seq<Arr<A>>, MArr<A>, Arr<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Seq&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Arr&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Seq&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Seq<Arr<A>> ma) =>
            default(SeqTrans<MSeq<Arr<A>>, Seq<Arr<A>>, MArr<A>, Arr<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Seq&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Arr<B>> bindT< A, B>(Seq<Arr<A>> ma, Func<A, Arr<B>> f) =>
            default(SeqTrans<MSeq<Arr<A>>, Seq<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MSeq<Arr<B>>, Seq<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Seq&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Seq&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Seq&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Arr<Seq<B>> traverse< A, B>(Seq<Arr<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Seq&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Seq&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Arr<Seq<A>> sequence< A>(Seq<Arr<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Arr<B>> mapT< A, B>(Seq<Arr<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSeq<Arr<A>>, Seq<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Map<MSeq<Arr<B>>, Seq<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Seq<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Arr<A>>, Seq<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Seq<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Arr<A>>, Seq<Arr<A>>, MArr<A>, Arr<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Seq<Arr<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Arr<A>>, Seq<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Seq<Arr<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Arr<A>>, Seq<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Seq&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Seq<Arr<A>> ma, Action<A> f) =>
            default(SeqTrans<MSeq<Arr<A>>, Seq<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Seq&lt;Arr&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Seq<Arr<A>> filterT< A>(Seq<Arr<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSeq<Arr<A>>, Seq<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MSeq<Arr<A>>, Seq<Arr<A>>, MArr<A>, Arr<A>, A>(ma, 
                    a => pred(a)
                        ? default(MArr<A>).Pure(a)
                        : default(MArr<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Arr&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Seq<Arr<A>> plusT<NUM,  A>(Seq<Arr<A>> x, Seq<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Arr&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Seq<Arr<A>> subtractT<NUM,  A>(Seq<Arr<A>> x, Seq<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Seq<Arr<A>> productT<NUM,  A>(Seq<Arr<A>> x, Seq<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Seq<Arr<A>> divideT<NUM,  A>(Seq<Arr<A>> x, Seq<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Seq<Arr<A>> appendT<SEMI,  A>(Seq<Arr<A>> x, Seq<Arr<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Seq<Arr<A>> x, Seq<Arr<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Seq<Arr<A>> x, Seq<Arr<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Arr<B>> applyT< A, B>(Func<A, B> fab, Seq<Arr<A>> fa) =>
            default(ApplSeq< Arr<A>, Arr<B>>).Apply(
                 default(MSeq< Func<Arr<A>, Arr<B>>>).Pure((Arr<A> a) => default(ApplArr< A, B>).Apply(
                     default(MArr< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Arr<B>> applyT< A, B>(Seq<Arr<Func<A, B>>> fab, Seq<Arr<A>> fa) =>
            default(MSeq<Arr<Func<A, B>>>).Bind<MSeq<Arr<B>>, Seq<Arr<B>>, Arr<B>>(fab, f =>
                default(MSeq<Arr<A>>).Bind<MSeq<Arr<B>>, Seq<Arr<B>>, Arr<B>>(fa, a => 
                    default(MSeq<Arr<B>>).Pure(default(ApplArr< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Arr&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Seq&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Seq<Arr<C>> applyT< A, B, C>(Func<A, B, C> fabc, Seq<Arr<A>> fa, Seq<Arr<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class HashSetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Seq&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;HashSet&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Seq&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Seq<HashSet<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSeq<HashSet<A>>, Seq<HashSet<A>>, MHashSet<A>, HashSet<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Seq&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;HashSet&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Seq&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Seq<HashSet<A>> ma) =>
            default(SeqTrans<MSeq<HashSet<A>>, Seq<HashSet<A>>, MHashSet<A>, HashSet<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Seq&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<HashSet<B>> bindT< A, B>(Seq<HashSet<A>> ma, Func<A, HashSet<B>> f) =>
            default(SeqTrans<MSeq<HashSet<A>>, Seq<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MSeq<HashSet<B>>, Seq<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Seq&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Seq&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Seq&lt;B&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Seq<B>> traverse< A, B>(Seq<HashSet<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Seq&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Seq&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Seq<A>> sequence< A>(Seq<HashSet<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<HashSet<B>> mapT< A, B>(Seq<HashSet<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSeq<HashSet<A>>, Seq<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Map<MSeq<HashSet<B>>, Seq<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Seq<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<HashSet<A>>, Seq<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Seq<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<HashSet<A>>, Seq<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Seq<HashSet<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<HashSet<A>>, Seq<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Seq<HashSet<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<HashSet<A>>, Seq<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Seq&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Seq<HashSet<A>> ma, Action<A> f) =>
            default(SeqTrans<MSeq<HashSet<A>>, Seq<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Seq&lt;HashSet&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Seq<HashSet<A>> filterT< A>(Seq<HashSet<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSeq<HashSet<A>>, Seq<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MSeq<HashSet<A>>, Seq<HashSet<A>>, MHashSet<A>, HashSet<A>, A>(ma, 
                    a => pred(a)
                        ? default(MHashSet<A>).Pure(a)
                        : default(MHashSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Seq<HashSet<A>> plusT<NUM,  A>(Seq<HashSet<A>> x, Seq<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Seq<HashSet<A>> subtractT<NUM,  A>(Seq<HashSet<A>> x, Seq<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Seq<HashSet<A>> productT<NUM,  A>(Seq<HashSet<A>> x, Seq<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Seq<HashSet<A>> divideT<NUM,  A>(Seq<HashSet<A>> x, Seq<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Seq<HashSet<A>> appendT<SEMI,  A>(Seq<HashSet<A>> x, Seq<HashSet<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Seq<HashSet<A>> x, Seq<HashSet<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Seq<HashSet<A>> x, Seq<HashSet<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<HashSet<B>> applyT< A, B>(Func<A, B> fab, Seq<HashSet<A>> fa) =>
            default(ApplSeq< HashSet<A>, HashSet<B>>).Apply(
                 default(MSeq< Func<HashSet<A>, HashSet<B>>>).Pure((HashSet<A> a) => default(ApplHashSet< A, B>).Apply(
                     default(MHashSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<HashSet<B>> applyT< A, B>(Seq<HashSet<Func<A, B>>> fab, Seq<HashSet<A>> fa) =>
            default(MSeq<HashSet<Func<A, B>>>).Bind<MSeq<HashSet<B>>, Seq<HashSet<B>>, HashSet<B>>(fab, f =>
                default(MSeq<HashSet<A>>).Bind<MSeq<HashSet<B>>, Seq<HashSet<B>>, HashSet<B>>(fa, a => 
                    default(MSeq<HashSet<B>>).Pure(default(ApplHashSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Seq&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Seq<HashSet<C>> applyT< A, B, C>(Func<A, B, C> fabc, Seq<HashSet<A>> fa, Seq<HashSet<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class LstT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Seq&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Lst&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Seq&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Seq<Lst<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSeq<Lst<A>>, Seq<Lst<A>>, MLst<A>, Lst<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Seq&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Lst&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Seq&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Seq<Lst<A>> ma) =>
            default(SeqTrans<MSeq<Lst<A>>, Seq<Lst<A>>, MLst<A>, Lst<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Seq&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Lst<B>> bindT< A, B>(Seq<Lst<A>> ma, Func<A, Lst<B>> f) =>
            default(SeqTrans<MSeq<Lst<A>>, Seq<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MSeq<Lst<B>>, Seq<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Seq&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Seq&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Seq&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Lst<Seq<B>> traverse< A, B>(Seq<Lst<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Seq&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Seq&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Lst<Seq<A>> sequence< A>(Seq<Lst<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Lst<B>> mapT< A, B>(Seq<Lst<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSeq<Lst<A>>, Seq<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Map<MSeq<Lst<B>>, Seq<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Seq<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Lst<A>>, Seq<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Seq<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Lst<A>>, Seq<Lst<A>>, MLst<A>, Lst<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Seq<Lst<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Lst<A>>, Seq<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Seq<Lst<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Lst<A>>, Seq<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Seq&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Seq<Lst<A>> ma, Action<A> f) =>
            default(SeqTrans<MSeq<Lst<A>>, Seq<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Seq&lt;Lst&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Seq<Lst<A>> filterT< A>(Seq<Lst<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSeq<Lst<A>>, Seq<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MSeq<Lst<A>>, Seq<Lst<A>>, MLst<A>, Lst<A>, A>(ma, 
                    a => pred(a)
                        ? default(MLst<A>).Pure(a)
                        : default(MLst<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Lst&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Seq<Lst<A>> plusT<NUM,  A>(Seq<Lst<A>> x, Seq<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Lst&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Seq<Lst<A>> subtractT<NUM,  A>(Seq<Lst<A>> x, Seq<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Seq<Lst<A>> productT<NUM,  A>(Seq<Lst<A>> x, Seq<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Seq<Lst<A>> divideT<NUM,  A>(Seq<Lst<A>> x, Seq<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Seq<Lst<A>> appendT<SEMI,  A>(Seq<Lst<A>> x, Seq<Lst<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Seq<Lst<A>> x, Seq<Lst<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Seq<Lst<A>> x, Seq<Lst<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Lst<B>> applyT< A, B>(Func<A, B> fab, Seq<Lst<A>> fa) =>
            default(ApplSeq< Lst<A>, Lst<B>>).Apply(
                 default(MSeq< Func<Lst<A>, Lst<B>>>).Pure((Lst<A> a) => default(ApplLst< A, B>).Apply(
                     default(MLst< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Lst<B>> applyT< A, B>(Seq<Lst<Func<A, B>>> fab, Seq<Lst<A>> fa) =>
            default(MSeq<Lst<Func<A, B>>>).Bind<MSeq<Lst<B>>, Seq<Lst<B>>, Lst<B>>(fab, f =>
                default(MSeq<Lst<A>>).Bind<MSeq<Lst<B>>, Seq<Lst<B>>, Lst<B>>(fa, a => 
                    default(MSeq<Lst<B>>).Pure(default(ApplLst< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Lst&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Seq&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Seq<Lst<C>> applyT< A, B, C>(Func<A, B, C> fabc, Seq<Lst<A>> fa, Seq<Lst<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class FinT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Seq&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Fin&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Seq&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Seq<Fin<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSeq<Fin<A>>, Seq<Fin<A>>, MFin<A>, Fin<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Seq&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Fin&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Seq&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Seq<Fin<A>> ma) =>
            default(SeqTrans<MSeq<Fin<A>>, Seq<Fin<A>>, MFin<A>, Fin<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Seq&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Fin<B>> bindT< A, B>(Seq<Fin<A>> ma, Func<A, Fin<B>> f) =>
            default(SeqTrans<MSeq<Fin<A>>, Seq<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MSeq<Fin<B>>, Seq<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Seq&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Seq&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Seq&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Fin<Seq<B>> traverse< A, B>(Seq<Fin<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Seq&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Seq&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Fin<Seq<A>> sequence< A>(Seq<Fin<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Fin<B>> mapT< A, B>(Seq<Fin<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSeq<Fin<A>>, Seq<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Map<MSeq<Fin<B>>, Seq<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Seq<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Fin<A>>, Seq<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Seq<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Fin<A>>, Seq<Fin<A>>, MFin<A>, Fin<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Seq<Fin<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Fin<A>>, Seq<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Seq<Fin<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Fin<A>>, Seq<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Seq&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Seq<Fin<A>> ma, Action<A> f) =>
            default(SeqTrans<MSeq<Fin<A>>, Seq<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Seq&lt;Fin&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Seq<Fin<A>> filterT< A>(Seq<Fin<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSeq<Fin<A>>, Seq<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MSeq<Fin<A>>, Seq<Fin<A>>, MFin<A>, Fin<A>, A>(ma, 
                    a => pred(a)
                        ? default(MFin<A>).Pure(a)
                        : default(MFin<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Fin&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Seq<Fin<A>> plusT<NUM,  A>(Seq<Fin<A>> x, Seq<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Fin&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Seq<Fin<A>> subtractT<NUM,  A>(Seq<Fin<A>> x, Seq<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Seq<Fin<A>> productT<NUM,  A>(Seq<Fin<A>> x, Seq<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Seq<Fin<A>> divideT<NUM,  A>(Seq<Fin<A>> x, Seq<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Seq<Fin<A>> appendT<SEMI,  A>(Seq<Fin<A>> x, Seq<Fin<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Seq<Fin<A>> x, Seq<Fin<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Seq<Fin<A>> x, Seq<Fin<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Fin<B>> applyT< A, B>(Func<A, B> fab, Seq<Fin<A>> fa) =>
            default(ApplSeq< Fin<A>, Fin<B>>).Apply(
                 default(MSeq< Func<Fin<A>, Fin<B>>>).Pure((Fin<A> a) => default(ApplFin< A, B>).Apply(
                     default(MFin< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Fin<B>> applyT< A, B>(Seq<Fin<Func<A, B>>> fab, Seq<Fin<A>> fa) =>
            default(MSeq<Fin<Func<A, B>>>).Bind<MSeq<Fin<B>>, Seq<Fin<B>>, Fin<B>>(fab, f =>
                default(MSeq<Fin<A>>).Bind<MSeq<Fin<B>>, Seq<Fin<B>>, Fin<B>>(fa, a => 
                    default(MSeq<Fin<B>>).Pure(default(ApplFin< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Fin&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Seq&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Seq<Fin<C>> applyT< A, B, C>(Func<A, B, C> fabc, Seq<Fin<A>> fa, Seq<Fin<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Seq&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Option&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Seq&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Seq<Option<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSeq<Option<A>>, Seq<Option<A>>, MOption<A>, Option<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Seq&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Option&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Seq&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Seq<Option<A>> ma) =>
            default(SeqTrans<MSeq<Option<A>>, Seq<Option<A>>, MOption<A>, Option<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Seq&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Option<B>> bindT< A, B>(Seq<Option<A>> ma, Func<A, Option<B>> f) =>
            default(SeqTrans<MSeq<Option<A>>, Seq<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MSeq<Option<B>>, Seq<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Seq&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Seq&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Seq&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Option<Seq<B>> traverse< A, B>(Seq<Option<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Seq&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Seq&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Option<Seq<A>> sequence< A>(Seq<Option<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Option<B>> mapT< A, B>(Seq<Option<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSeq<Option<A>>, Seq<Option<A>>, MOption<A>, Option<A>, A>)
                .Map<MSeq<Option<B>>, Seq<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Seq<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Option<A>>, Seq<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Seq<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Option<A>>, Seq<Option<A>>, MOption<A>, Option<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Seq<Option<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Option<A>>, Seq<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Seq<Option<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Option<A>>, Seq<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Seq&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Seq<Option<A>> ma, Action<A> f) =>
            default(SeqTrans<MSeq<Option<A>>, Seq<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Seq&lt;Option&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Seq<Option<A>> filterT< A>(Seq<Option<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSeq<Option<A>>, Seq<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MSeq<Option<A>>, Seq<Option<A>>, MOption<A>, Option<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOption<A>).Pure(a)
                        : default(MOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Option&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Seq<Option<A>> plusT<NUM,  A>(Seq<Option<A>> x, Seq<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Option&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Seq<Option<A>> subtractT<NUM,  A>(Seq<Option<A>> x, Seq<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Option&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Seq<Option<A>> productT<NUM,  A>(Seq<Option<A>> x, Seq<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Option&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Seq<Option<A>> divideT<NUM,  A>(Seq<Option<A>> x, Seq<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Option&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Seq<Option<A>> appendT<SEMI,  A>(Seq<Option<A>> x, Seq<Option<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Seq<Option<A>> x, Seq<Option<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Option&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Seq<Option<A>> x, Seq<Option<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Option<B>> applyT< A, B>(Func<A, B> fab, Seq<Option<A>> fa) =>
            default(ApplSeq< Option<A>, Option<B>>).Apply(
                 default(MSeq< Func<Option<A>, Option<B>>>).Pure((Option<A> a) => default(ApplOption< A, B>).Apply(
                     default(MOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Option<B>> applyT< A, B>(Seq<Option<Func<A, B>>> fab, Seq<Option<A>> fa) =>
            default(MSeq<Option<Func<A, B>>>).Bind<MSeq<Option<B>>, Seq<Option<B>>, Option<B>>(fab, f =>
                default(MSeq<Option<A>>).Bind<MSeq<Option<B>>, Seq<Option<B>>, Option<B>>(fa, a => 
                    default(MSeq<Option<B>>).Pure(default(ApplOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Option&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Seq&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Option&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Seq<Option<C>> applyT< A, B, C>(Func<A, B, C> fabc, Seq<Option<A>> fa, Seq<Option<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Seq&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Seq&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Seq<OptionUnsafe<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSeq<OptionUnsafe<A>>, Seq<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Seq&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Seq&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Seq<OptionUnsafe<A>> ma) =>
            default(SeqTrans<MSeq<OptionUnsafe<A>>, Seq<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Seq&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<OptionUnsafe<B>> bindT< A, B>(Seq<OptionUnsafe<A>> ma, Func<A, OptionUnsafe<B>> f) =>
            default(SeqTrans<MSeq<OptionUnsafe<A>>, Seq<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MSeq<OptionUnsafe<B>>, Seq<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Seq&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Seq&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Seq&lt;B&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Seq<B>> traverse< A, B>(Seq<OptionUnsafe<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Seq&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Seq&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Seq<A>> sequence< A>(Seq<OptionUnsafe<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<OptionUnsafe<B>> mapT< A, B>(Seq<OptionUnsafe<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSeq<OptionUnsafe<A>>, Seq<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Map<MSeq<OptionUnsafe<B>>, Seq<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Seq<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<OptionUnsafe<A>>, Seq<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Seq<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<OptionUnsafe<A>>, Seq<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Seq<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<OptionUnsafe<A>>, Seq<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Seq<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<OptionUnsafe<A>>, Seq<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Seq&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Seq<OptionUnsafe<A>> ma, Action<A> f) =>
            default(SeqTrans<MSeq<OptionUnsafe<A>>, Seq<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Seq&lt;OptionUnsafe&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Seq<OptionUnsafe<A>> filterT< A>(Seq<OptionUnsafe<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSeq<OptionUnsafe<A>>, Seq<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MSeq<OptionUnsafe<A>>, Seq<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOptionUnsafe<A>).Pure(a)
                        : default(MOptionUnsafe<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Seq<OptionUnsafe<A>> plusT<NUM,  A>(Seq<OptionUnsafe<A>> x, Seq<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Seq<OptionUnsafe<A>> subtractT<NUM,  A>(Seq<OptionUnsafe<A>> x, Seq<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Seq<OptionUnsafe<A>> productT<NUM,  A>(Seq<OptionUnsafe<A>> x, Seq<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Seq<OptionUnsafe<A>> divideT<NUM,  A>(Seq<OptionUnsafe<A>> x, Seq<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Seq<OptionUnsafe<A>> appendT<SEMI,  A>(Seq<OptionUnsafe<A>> x, Seq<OptionUnsafe<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Seq<OptionUnsafe<A>> x, Seq<OptionUnsafe<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Seq<OptionUnsafe<A>> x, Seq<OptionUnsafe<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<OptionUnsafe<B>> applyT< A, B>(Func<A, B> fab, Seq<OptionUnsafe<A>> fa) =>
            default(ApplSeq< OptionUnsafe<A>, OptionUnsafe<B>>).Apply(
                 default(MSeq< Func<OptionUnsafe<A>, OptionUnsafe<B>>>).Pure((OptionUnsafe<A> a) => default(ApplOptionUnsafe< A, B>).Apply(
                     default(MOptionUnsafe< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<OptionUnsafe<B>> applyT< A, B>(Seq<OptionUnsafe<Func<A, B>>> fab, Seq<OptionUnsafe<A>> fa) =>
            default(MSeq<OptionUnsafe<Func<A, B>>>).Bind<MSeq<OptionUnsafe<B>>, Seq<OptionUnsafe<B>>, OptionUnsafe<B>>(fab, f =>
                default(MSeq<OptionUnsafe<A>>).Bind<MSeq<OptionUnsafe<B>>, Seq<OptionUnsafe<B>>, OptionUnsafe<B>>(fa, a => 
                    default(MSeq<OptionUnsafe<B>>).Pure(default(ApplOptionUnsafe< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Seq&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Seq<OptionUnsafe<C>> applyT< A, B, C>(Func<A, B, C> fabc, Seq<OptionUnsafe<A>> fa, Seq<OptionUnsafe<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Seq&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Either&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Seq&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Seq<Either<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSeq<Either<L, A>>, Seq<Either<L, A>>, MEither<L, A>, Either<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Seq&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Either&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Seq&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Seq<Either<L, A>> ma) =>
            default(SeqTrans<MSeq<Either<L, A>>, Seq<Either<L, A>>, MEither<L, A>, Either<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Seq&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Either<L, B>> bindT<L, A, B>(Seq<Either<L, A>> ma, Func<A, Either<L, B>> f) =>
            default(SeqTrans<MSeq<Either<L, A>>, Seq<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MSeq<Either<L, B>>, Seq<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Seq&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Seq&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Seq&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Seq<B>> traverse<L, A, B>(Seq<Either<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Seq&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Seq&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Seq<A>> sequence<L, A>(Seq<Either<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Either<L, B>> mapT<L, A, B>(Seq<Either<L, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSeq<Either<L, A>>, Seq<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Map<MSeq<Either<L, B>>, Seq<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Seq<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Either<L, A>>, Seq<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Seq<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Either<L, A>>, Seq<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Seq<Either<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Either<L, A>>, Seq<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Seq<Either<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Either<L, A>>, Seq<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Seq&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Seq<Either<L, A>> ma, Action<A> f) =>
            default(SeqTrans<MSeq<Either<L, A>>, Seq<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Seq&lt;Either&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Seq<Either<L, A>> filterT<L, A>(Seq<Either<L, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSeq<Either<L, A>>, Seq<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MSeq<Either<L, A>>, Seq<Either<L, A>>, MEither<L, A>, Either<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEither<L, A>).Pure(a)
                        : default(MEither<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Seq<Either<L, A>> plusT<NUM, L, A>(Seq<Either<L, A>> x, Seq<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Seq<Either<L, A>> subtractT<NUM, L, A>(Seq<Either<L, A>> x, Seq<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Seq<Either<L, A>> productT<NUM, L, A>(Seq<Either<L, A>> x, Seq<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Seq<Either<L, A>> divideT<NUM, L, A>(Seq<Either<L, A>> x, Seq<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Seq<Either<L, A>> appendT<SEMI, L, A>(Seq<Either<L, A>> x, Seq<Either<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Seq<Either<L, A>> x, Seq<Either<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Seq<Either<L, A>> x, Seq<Either<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Either<L, B>> applyT<L, A, B>(Func<A, B> fab, Seq<Either<L, A>> fa) =>
            default(ApplSeq< Either<L, A>, Either<L, B>>).Apply(
                 default(MSeq< Func<Either<L, A>, Either<L, B>>>).Pure((Either<L, A> a) => default(ApplEither<L, A, B>).Apply(
                     default(MEither<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Either<L, B>> applyT<L, A, B>(Seq<Either<L, Func<A, B>>> fab, Seq<Either<L, A>> fa) =>
            default(MSeq<Either<L, Func<A, B>>>).Bind<MSeq<Either<L, B>>, Seq<Either<L, B>>, Either<L, B>>(fab, f =>
                default(MSeq<Either<L, A>>).Bind<MSeq<Either<L, B>>, Seq<Either<L, B>>, Either<L, B>>(fa, a => 
                    default(MSeq<Either<L, B>>).Pure(default(ApplEither<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Seq&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Seq<Either<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Seq<Either<L, A>> fa, Seq<Either<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Seq<EitherUnsafe<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSeq<EitherUnsafe<L, A>>, Seq<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Seq<EitherUnsafe<L, A>> ma) =>
            default(SeqTrans<MSeq<EitherUnsafe<L, A>>, Seq<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Seq&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<EitherUnsafe<L, B>> bindT<L, A, B>(Seq<EitherUnsafe<L, A>> ma, Func<A, EitherUnsafe<L, B>> f) =>
            default(SeqTrans<MSeq<EitherUnsafe<L, A>>, Seq<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MSeq<EitherUnsafe<L, B>>, Seq<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Seq&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Seq&lt;B&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Seq<B>> traverse<L, A, B>(Seq<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Seq<A>> sequence<L, A>(Seq<EitherUnsafe<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<EitherUnsafe<L, B>> mapT<L, A, B>(Seq<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSeq<EitherUnsafe<L, A>>, Seq<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Map<MSeq<EitherUnsafe<L, B>>, Seq<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Seq<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<EitherUnsafe<L, A>>, Seq<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Seq<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<EitherUnsafe<L, A>>, Seq<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Seq<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<EitherUnsafe<L, A>>, Seq<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Seq<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<EitherUnsafe<L, A>>, Seq<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Seq<EitherUnsafe<L, A>> ma, Action<A> f) =>
            default(SeqTrans<MSeq<EitherUnsafe<L, A>>, Seq<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Seq<EitherUnsafe<L, A>> filterT<L, A>(Seq<EitherUnsafe<L, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSeq<EitherUnsafe<L, A>>, Seq<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MSeq<EitherUnsafe<L, A>>, Seq<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEitherUnsafe<L, A>).Pure(a)
                        : default(MEitherUnsafe<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Seq<EitherUnsafe<L, A>> plusT<NUM, L, A>(Seq<EitherUnsafe<L, A>> x, Seq<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Seq<EitherUnsafe<L, A>> subtractT<NUM, L, A>(Seq<EitherUnsafe<L, A>> x, Seq<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Seq<EitherUnsafe<L, A>> productT<NUM, L, A>(Seq<EitherUnsafe<L, A>> x, Seq<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Seq<EitherUnsafe<L, A>> divideT<NUM, L, A>(Seq<EitherUnsafe<L, A>> x, Seq<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Seq<EitherUnsafe<L, A>> appendT<SEMI, L, A>(Seq<EitherUnsafe<L, A>> x, Seq<EitherUnsafe<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Seq<EitherUnsafe<L, A>> x, Seq<EitherUnsafe<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Seq<EitherUnsafe<L, A>> x, Seq<EitherUnsafe<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Seq&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<EitherUnsafe<L, B>> applyT<L, A, B>(Func<A, B> fab, Seq<EitherUnsafe<L, A>> fa) =>
            default(ApplSeq< EitherUnsafe<L, A>, EitherUnsafe<L, B>>).Apply(
                 default(MSeq< Func<EitherUnsafe<L, A>, EitherUnsafe<L, B>>>).Pure((EitherUnsafe<L, A> a) => default(ApplEitherUnsafe<L, A, B>).Apply(
                     default(MEitherUnsafe<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Seq&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<EitherUnsafe<L, B>> applyT<L, A, B>(Seq<EitherUnsafe<L, Func<A, B>>> fab, Seq<EitherUnsafe<L, A>> fa) =>
            default(MSeq<EitherUnsafe<L, Func<A, B>>>).Bind<MSeq<EitherUnsafe<L, B>>, Seq<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fab, f =>
                default(MSeq<EitherUnsafe<L, A>>).Bind<MSeq<EitherUnsafe<L, B>>, Seq<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fa, a => 
                    default(MSeq<EitherUnsafe<L, B>>).Pure(default(ApplEitherUnsafe<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Seq&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Seq&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Seq<EitherUnsafe<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Seq<EitherUnsafe<L, A>> fa, Seq<EitherUnsafe<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Seq&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Try&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Seq&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Seq<Try<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSeq<Try<A>>, Seq<Try<A>>, MTry<A>, Try<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Seq&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Try&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Seq&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Seq<Try<A>> ma) =>
            default(SeqTrans<MSeq<Try<A>>, Seq<Try<A>>, MTry<A>, Try<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Seq&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Try<B>> bindT< A, B>(Seq<Try<A>> ma, Func<A, Try<B>> f) =>
            default(SeqTrans<MSeq<Try<A>>, Seq<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MSeq<Try<B>>, Seq<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Seq&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Seq&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Seq&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Try<Seq<B>> traverse< A, B>(Seq<Try<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Seq&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Seq&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Try<Seq<A>> sequence< A>(Seq<Try<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Try<B>> mapT< A, B>(Seq<Try<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSeq<Try<A>>, Seq<Try<A>>, MTry<A>, Try<A>, A>)
                .Map<MSeq<Try<B>>, Seq<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Seq<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Try<A>>, Seq<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Seq<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Try<A>>, Seq<Try<A>>, MTry<A>, Try<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Seq<Try<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Try<A>>, Seq<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Seq<Try<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Try<A>>, Seq<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Seq&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Seq<Try<A>> ma, Action<A> f) =>
            default(SeqTrans<MSeq<Try<A>>, Seq<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Seq&lt;Try&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Seq<Try<A>> filterT< A>(Seq<Try<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSeq<Try<A>>, Seq<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MSeq<Try<A>>, Seq<Try<A>>, MTry<A>, Try<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTry<A>).Pure(a)
                        : default(MTry<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Try&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Seq<Try<A>> plusT<NUM,  A>(Seq<Try<A>> x, Seq<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Try&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Seq<Try<A>> subtractT<NUM,  A>(Seq<Try<A>> x, Seq<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Try&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Seq<Try<A>> productT<NUM,  A>(Seq<Try<A>> x, Seq<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Try&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Seq<Try<A>> divideT<NUM,  A>(Seq<Try<A>> x, Seq<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Try&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Seq<Try<A>> appendT<SEMI,  A>(Seq<Try<A>> x, Seq<Try<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Seq<Try<A>> x, Seq<Try<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Try&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Seq<Try<A>> x, Seq<Try<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Try<B>> applyT< A, B>(Func<A, B> fab, Seq<Try<A>> fa) =>
            default(ApplSeq< Try<A>, Try<B>>).Apply(
                 default(MSeq< Func<Try<A>, Try<B>>>).Pure((Try<A> a) => default(ApplTry< A, B>).Apply(
                     default(MTry< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Try<B>> applyT< A, B>(Seq<Try<Func<A, B>>> fab, Seq<Try<A>> fa) =>
            default(MSeq<Try<Func<A, B>>>).Bind<MSeq<Try<B>>, Seq<Try<B>>, Try<B>>(fab, f =>
                default(MSeq<Try<A>>).Bind<MSeq<Try<B>>, Seq<Try<B>>, Try<B>>(fa, a => 
                    default(MSeq<Try<B>>).Pure(default(ApplTry< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Try&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Seq&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Try&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Seq<Try<C>> applyT< A, B, C>(Func<A, B, C> fabc, Seq<Try<A>> fa, Seq<Try<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryOptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Seq&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;TryOption&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Seq&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Seq<TryOption<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSeq<TryOption<A>>, Seq<TryOption<A>>, MTryOption<A>, TryOption<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Seq&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;TryOption&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Seq&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Seq<TryOption<A>> ma) =>
            default(SeqTrans<MSeq<TryOption<A>>, Seq<TryOption<A>>, MTryOption<A>, TryOption<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Seq&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<TryOption<B>> bindT< A, B>(Seq<TryOption<A>> ma, Func<A, TryOption<B>> f) =>
            default(SeqTrans<MSeq<TryOption<A>>, Seq<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MSeq<TryOption<B>>, Seq<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Seq&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Seq&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Seq&lt;B&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Seq<B>> traverse< A, B>(Seq<TryOption<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Seq&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Seq&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Seq<A>> sequence< A>(Seq<TryOption<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<TryOption<B>> mapT< A, B>(Seq<TryOption<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSeq<TryOption<A>>, Seq<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Map<MSeq<TryOption<B>>, Seq<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Seq<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<TryOption<A>>, Seq<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Seq<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<TryOption<A>>, Seq<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Seq<TryOption<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<TryOption<A>>, Seq<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Seq<TryOption<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<TryOption<A>>, Seq<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Seq&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Seq<TryOption<A>> ma, Action<A> f) =>
            default(SeqTrans<MSeq<TryOption<A>>, Seq<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Seq&lt;TryOption&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Seq<TryOption<A>> filterT< A>(Seq<TryOption<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSeq<TryOption<A>>, Seq<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MSeq<TryOption<A>>, Seq<TryOption<A>>, MTryOption<A>, TryOption<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTryOption<A>).Pure(a)
                        : default(MTryOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Seq<TryOption<A>> plusT<NUM,  A>(Seq<TryOption<A>> x, Seq<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Seq<TryOption<A>> subtractT<NUM,  A>(Seq<TryOption<A>> x, Seq<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Seq<TryOption<A>> productT<NUM,  A>(Seq<TryOption<A>> x, Seq<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Seq<TryOption<A>> divideT<NUM,  A>(Seq<TryOption<A>> x, Seq<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Seq<TryOption<A>> appendT<SEMI,  A>(Seq<TryOption<A>> x, Seq<TryOption<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Seq<TryOption<A>> x, Seq<TryOption<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Seq<TryOption<A>> x, Seq<TryOption<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<TryOption<B>> applyT< A, B>(Func<A, B> fab, Seq<TryOption<A>> fa) =>
            default(ApplSeq< TryOption<A>, TryOption<B>>).Apply(
                 default(MSeq< Func<TryOption<A>, TryOption<B>>>).Pure((TryOption<A> a) => default(ApplTryOption< A, B>).Apply(
                     default(MTryOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<TryOption<B>> applyT< A, B>(Seq<TryOption<Func<A, B>>> fab, Seq<TryOption<A>> fa) =>
            default(MSeq<TryOption<Func<A, B>>>).Bind<MSeq<TryOption<B>>, Seq<TryOption<B>>, TryOption<B>>(fab, f =>
                default(MSeq<TryOption<A>>).Bind<MSeq<TryOption<B>>, Seq<TryOption<B>>, TryOption<B>>(fa, a => 
                    default(MSeq<TryOption<B>>).Pure(default(ApplTryOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Seq&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Seq<TryOption<C>> applyT< A, B, C>(Func<A, B, C> fabc, Seq<TryOption<A>> fa, Seq<TryOption<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class IEnumerableT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Seq&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;IEnumerable&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Seq&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Seq<IEnumerable<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSeq<IEnumerable<A>>, Seq<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Seq&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;IEnumerable&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Seq&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Seq<IEnumerable<A>> ma) =>
            default(SeqTrans<MSeq<IEnumerable<A>>, Seq<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Seq&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<IEnumerable<B>> bindT< A, B>(Seq<IEnumerable<A>> ma, Func<A, IEnumerable<B>> f) =>
            default(SeqTrans<MSeq<IEnumerable<A>>, Seq<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MSeq<IEnumerable<B>>, Seq<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Seq&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Seq&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Seq&lt;B&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Seq<B>> traverse< A, B>(Seq<IEnumerable<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Seq&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Seq&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Seq<A>> sequence< A>(Seq<IEnumerable<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<IEnumerable<B>> mapT< A, B>(Seq<IEnumerable<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSeq<IEnumerable<A>>, Seq<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Map<MSeq<IEnumerable<B>>, Seq<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Seq<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<IEnumerable<A>>, Seq<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Seq<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<IEnumerable<A>>, Seq<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Seq<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<IEnumerable<A>>, Seq<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Seq<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<IEnumerable<A>>, Seq<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Seq&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Seq<IEnumerable<A>> ma, Action<A> f) =>
            default(SeqTrans<MSeq<IEnumerable<A>>, Seq<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Seq&lt;IEnumerable&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Seq<IEnumerable<A>> filterT< A>(Seq<IEnumerable<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSeq<IEnumerable<A>>, Seq<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MSeq<IEnumerable<A>>, Seq<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>(ma, 
                    a => pred(a)
                        ? default(MEnumerable<A>).Pure(a)
                        : default(MEnumerable<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Seq<IEnumerable<A>> plusT<NUM,  A>(Seq<IEnumerable<A>> x, Seq<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Seq<IEnumerable<A>> subtractT<NUM,  A>(Seq<IEnumerable<A>> x, Seq<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Seq<IEnumerable<A>> productT<NUM,  A>(Seq<IEnumerable<A>> x, Seq<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Seq<IEnumerable<A>> divideT<NUM,  A>(Seq<IEnumerable<A>> x, Seq<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Seq<IEnumerable<A>> appendT<SEMI,  A>(Seq<IEnumerable<A>> x, Seq<IEnumerable<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Seq<IEnumerable<A>> x, Seq<IEnumerable<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Seq<IEnumerable<A>> x, Seq<IEnumerable<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<IEnumerable<B>> applyT< A, B>(Func<A, B> fab, Seq<IEnumerable<A>> fa) =>
            default(ApplSeq< IEnumerable<A>, IEnumerable<B>>).Apply(
                 default(MSeq< Func<IEnumerable<A>, IEnumerable<B>>>).Pure((IEnumerable<A> a) => default(ApplEnumerable< A, B>).Apply(
                     default(MEnumerable< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<IEnumerable<B>> applyT< A, B>(Seq<IEnumerable<Func<A, B>>> fab, Seq<IEnumerable<A>> fa) =>
            default(MSeq<IEnumerable<Func<A, B>>>).Bind<MSeq<IEnumerable<B>>, Seq<IEnumerable<B>>, IEnumerable<B>>(fab, f =>
                default(MSeq<IEnumerable<A>>).Bind<MSeq<IEnumerable<B>>, Seq<IEnumerable<B>>, IEnumerable<B>>(fa, a => 
                    default(MSeq<IEnumerable<B>>).Pure(default(ApplEnumerable< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Seq&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Seq<IEnumerable<C>> applyT< A, B, C>(Func<A, B, C> fabc, Seq<IEnumerable<A>> fa, Seq<IEnumerable<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SeqT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Seq&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Seq&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Seq&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Seq<Seq<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSeq<Seq<A>>, Seq<Seq<A>>, MSeq<A>, Seq<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Seq&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Seq&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Seq&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Seq<Seq<A>> ma) =>
            default(SeqTrans<MSeq<Seq<A>>, Seq<Seq<A>>, MSeq<A>, Seq<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Seq&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Seq<B>> bindT< A, B>(Seq<Seq<A>> ma, Func<A, Seq<B>> f) =>
            default(SeqTrans<MSeq<Seq<A>>, Seq<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MSeq<Seq<B>>, Seq<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Seq&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Seq&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Seq&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Seq<Seq<B>> traverse< A, B>(Seq<Seq<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Seq&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Seq&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Seq<Seq<A>> sequence< A>(Seq<Seq<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Seq<B>> mapT< A, B>(Seq<Seq<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSeq<Seq<A>>, Seq<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Map<MSeq<Seq<B>>, Seq<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Seq<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Seq<A>>, Seq<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Seq<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Seq<A>>, Seq<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Seq<Seq<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Seq<A>>, Seq<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Seq<Seq<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Seq<A>>, Seq<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Seq&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Seq<Seq<A>> ma, Action<A> f) =>
            default(SeqTrans<MSeq<Seq<A>>, Seq<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Seq&lt;Seq&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Seq<Seq<A>> filterT< A>(Seq<Seq<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSeq<Seq<A>>, Seq<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MSeq<Seq<A>>, Seq<Seq<A>>, MSeq<A>, Seq<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSeq<A>).Pure(a)
                        : default(MSeq<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Seq&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Seq<Seq<A>> plusT<NUM,  A>(Seq<Seq<A>> x, Seq<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Seq&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Seq<Seq<A>> subtractT<NUM,  A>(Seq<Seq<A>> x, Seq<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Seq<Seq<A>> productT<NUM,  A>(Seq<Seq<A>> x, Seq<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Seq<Seq<A>> divideT<NUM,  A>(Seq<Seq<A>> x, Seq<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Seq<Seq<A>> appendT<SEMI,  A>(Seq<Seq<A>> x, Seq<Seq<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Seq<Seq<A>> x, Seq<Seq<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Seq<Seq<A>> x, Seq<Seq<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Seq<B>> applyT< A, B>(Func<A, B> fab, Seq<Seq<A>> fa) =>
            default(ApplSeq< Seq<A>, Seq<B>>).Apply(
                 default(MSeq< Func<Seq<A>, Seq<B>>>).Pure((Seq<A> a) => default(ApplSeq< A, B>).Apply(
                     default(MSeq< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Seq<B>> applyT< A, B>(Seq<Seq<Func<A, B>>> fab, Seq<Seq<A>> fa) =>
            default(MSeq<Seq<Func<A, B>>>).Bind<MSeq<Seq<B>>, Seq<Seq<B>>, Seq<B>>(fab, f =>
                default(MSeq<Seq<A>>).Bind<MSeq<Seq<B>>, Seq<Seq<B>>, Seq<B>>(fa, a => 
                    default(MSeq<Seq<B>>).Pure(default(ApplSeq< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Seq&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Seq&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Seq<Seq<C>> applyT< A, B, C>(Func<A, B, C> fabc, Seq<Seq<A>> fa, Seq<Seq<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Seq&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Set&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Seq&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Seq<Set<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSeq<Set<A>>, Seq<Set<A>>, MSet<A>, Set<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Seq&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Set&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Seq&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Seq<Set<A>> ma) =>
            default(SeqTrans<MSeq<Set<A>>, Seq<Set<A>>, MSet<A>, Set<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Seq&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Set<B>> bindT< A, B>(Seq<Set<A>> ma, Func<A, Set<B>> f) =>
            default(SeqTrans<MSeq<Set<A>>, Seq<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MSeq<Set<B>>, Seq<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Seq&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Seq&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Seq&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Set<Seq<B>> traverse< A, B>(Seq<Set<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Seq&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Seq&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Set<Seq<A>> sequence< A>(Seq<Set<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Set<B>> mapT< A, B>(Seq<Set<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSeq<Set<A>>, Seq<Set<A>>, MSet<A>, Set<A>, A>)
                .Map<MSeq<Set<B>>, Seq<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Seq<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Set<A>>, Seq<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Seq<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Set<A>>, Seq<Set<A>>, MSet<A>, Set<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Seq<Set<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Set<A>>, Seq<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Seq<Set<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Set<A>>, Seq<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Seq&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Seq<Set<A>> ma, Action<A> f) =>
            default(SeqTrans<MSeq<Set<A>>, Seq<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Seq&lt;Set&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Seq<Set<A>> filterT< A>(Seq<Set<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSeq<Set<A>>, Seq<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MSeq<Set<A>>, Seq<Set<A>>, MSet<A>, Set<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSet<A>).Pure(a)
                        : default(MSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Set&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Seq<Set<A>> plusT<NUM,  A>(Seq<Set<A>> x, Seq<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Set&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Seq<Set<A>> subtractT<NUM,  A>(Seq<Set<A>> x, Seq<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Set&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Seq<Set<A>> productT<NUM,  A>(Seq<Set<A>> x, Seq<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Set&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Seq<Set<A>> divideT<NUM,  A>(Seq<Set<A>> x, Seq<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Set&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Seq<Set<A>> appendT<SEMI,  A>(Seq<Set<A>> x, Seq<Set<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Seq<Set<A>> x, Seq<Set<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Set&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Seq<Set<A>> x, Seq<Set<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Set<B>> applyT< A, B>(Func<A, B> fab, Seq<Set<A>> fa) =>
            default(ApplSeq< Set<A>, Set<B>>).Apply(
                 default(MSeq< Func<Set<A>, Set<B>>>).Pure((Set<A> a) => default(ApplSet< A, B>).Apply(
                     default(MSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Set<B>> applyT< A, B>(Seq<Set<Func<A, B>>> fab, Seq<Set<A>> fa) =>
            default(MSeq<Set<Func<A, B>>>).Bind<MSeq<Set<B>>, Seq<Set<B>>, Set<B>>(fab, f =>
                default(MSeq<Set<A>>).Bind<MSeq<Set<B>>, Seq<Set<B>>, Set<B>>(fa, a => 
                    default(MSeq<Set<B>>).Pure(default(ApplSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Set&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Seq&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Set&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Seq<Set<C>> applyT< A, B, C>(Func<A, B, C> fabc, Seq<Set<A>> fa, Seq<Set<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ValidationT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Seq&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Seq&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Seq<Validation<FAIL, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSeq<Validation<FAIL, A>>, Seq<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Seq&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Seq&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Seq<Validation<FAIL, A>> ma) =>
            default(SeqTrans<MSeq<Validation<FAIL, A>>, Seq<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Seq&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Validation<FAIL, B>> bindT<FAIL, A, B>(Seq<Validation<FAIL, A>> ma, Func<A, Validation<FAIL, B>> f) =>
            default(SeqTrans<MSeq<Validation<FAIL, A>>, Seq<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MSeq<Validation<FAIL, B>>, Seq<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Seq&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Seq&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Seq&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Seq<B>> traverse<FAIL, A, B>(Seq<Validation<FAIL, A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Seq&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Seq&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Seq<A>> sequence<FAIL, A>(Seq<Validation<FAIL, A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Seq<Validation<FAIL, B>> mapT<FAIL, A, B>(Seq<Validation<FAIL, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSeq<Validation<FAIL, A>>, Seq<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Map<MSeq<Validation<FAIL, B>>, Seq<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Seq<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Validation<FAIL, A>>, Seq<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Seq&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Seq<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSeq<Validation<FAIL, A>>, Seq<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Seq<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Validation<FAIL, A>>, Seq<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Seq<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSeq<Validation<FAIL, A>>, Seq<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Seq&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Seq<Validation<FAIL, A>> ma, Action<A> f) =>
            default(SeqTrans<MSeq<Validation<FAIL, A>>, Seq<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Seq&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Seq&lt;Validation&lt;FAIL, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Seq<Validation<FAIL, A>> filterT<FAIL, A>(Seq<Validation<FAIL, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSeq<Validation<FAIL, A>>, Seq<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MSeq<Validation<FAIL, A>>, Seq<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>(ma, 
                    a => pred(a)
                        ? default(MValidation<FAIL, A>).Pure(a)
                        : default(MValidation<FAIL, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Seq<Validation<FAIL, A>> plusT<NUM, FAIL, A>(Seq<Validation<FAIL, A>> x, Seq<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Seq<Validation<FAIL, A>> subtractT<NUM, FAIL, A>(Seq<Validation<FAIL, A>> x, Seq<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Seq<Validation<FAIL, A>> productT<NUM, FAIL, A>(Seq<Validation<FAIL, A>> x, Seq<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Seq<Validation<FAIL, A>> divideT<NUM, FAIL, A>(Seq<Validation<FAIL, A>> x, Seq<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Seq<Validation<FAIL, A>> appendT<SEMI, FAIL, A>(Seq<Validation<FAIL, A>> x, Seq<Validation<FAIL, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Seq<Validation<FAIL, A>> x, Seq<Validation<FAIL, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Seq&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Seq<Validation<FAIL, A>> x, Seq<Validation<FAIL, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Validation<FAIL, B>> applyT<FAIL, A, B>(Func<A, B> fab, Seq<Validation<FAIL, A>> fa) =>
            default(ApplSeq< Validation<FAIL, A>, Validation<FAIL, B>>).Apply(
                 default(MSeq< Func<Validation<FAIL, A>, Validation<FAIL, B>>>).Pure((Validation<FAIL, A> a) => default(ApplValidation<FAIL, A, B>).Apply(
                     default(MValidation<FAIL, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Seq<Validation<FAIL, B>> applyT<FAIL, A, B>(Seq<Validation<FAIL, Func<A, B>>> fab, Seq<Validation<FAIL, A>> fa) =>
            default(MSeq<Validation<FAIL, Func<A, B>>>).Bind<MSeq<Validation<FAIL, B>>, Seq<Validation<FAIL, B>>, Validation<FAIL, B>>(fab, f =>
                default(MSeq<Validation<FAIL, A>>).Bind<MSeq<Validation<FAIL, B>>, Seq<Validation<FAIL, B>>, Validation<FAIL, B>>(fa, a => 
                    default(MSeq<Validation<FAIL, B>>).Pure(default(ApplValidation<FAIL, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Seq&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Seq&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Seq&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Seq<Validation<FAIL, C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Seq<Validation<FAIL, A>> fa, Seq<Validation<FAIL, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ArrT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Set&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Arr&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Set&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Set<Arr<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSet<Arr<A>>, Set<Arr<A>>, MArr<A>, Arr<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Set&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Arr&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Set&lt;Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Set<Arr<A>> ma) =>
            default(SeqTrans<MSet<Arr<A>>, Set<Arr<A>>, MArr<A>, Arr<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Set&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Arr<B>> bindT< A, B>(Set<Arr<A>> ma, Func<A, Arr<B>> f) =>
            default(SeqTrans<MSet<Arr<A>>, Set<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MSet<Arr<B>>, Set<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Set&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Set&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Set&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Arr<Set<B>> traverse< A, B>(Set<Arr<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Set&lt;Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Set&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Arr<Set<A>> sequence< A>(Set<Arr<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Arr<B>> mapT< A, B>(Set<Arr<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSet<Arr<A>>, Set<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Map<MSet<Arr<B>>, Set<Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Set<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Arr<A>>, Set<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Set<Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Arr<A>>, Set<Arr<A>>, MArr<A>, Arr<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Set<Arr<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Arr<A>>, Set<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Set<Arr<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Arr<A>>, Set<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Set&lt;Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Set<Arr<A>> ma, Action<A> f) =>
            default(SeqTrans<MSet<Arr<A>>, Set<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Set&lt;Arr&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Set<Arr<A>> filterT< A>(Set<Arr<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSet<Arr<A>>, Set<Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MSet<Arr<A>>, Set<Arr<A>>, MArr<A>, Arr<A>, A>(ma, 
                    a => pred(a)
                        ? default(MArr<A>).Pure(a)
                        : default(MArr<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Arr&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Set<Arr<A>> plusT<NUM,  A>(Set<Arr<A>> x, Set<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Arr&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Set<Arr<A>> subtractT<NUM,  A>(Set<Arr<A>> x, Set<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Set<Arr<A>> productT<NUM,  A>(Set<Arr<A>> x, Set<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Set<Arr<A>> divideT<NUM,  A>(Set<Arr<A>> x, Set<Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Set<Arr<A>> appendT<SEMI,  A>(Set<Arr<A>> x, Set<Arr<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Set<Arr<A>> x, Set<Arr<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Arr&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Set<Arr<A>> x, Set<Arr<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Arr<B>> applyT< A, B>(Func<A, B> fab, Set<Arr<A>> fa) =>
            default(ApplSet< Arr<A>, Arr<B>>).Apply(
                 default(MSet< Func<Arr<A>, Arr<B>>>).Pure((Arr<A> a) => default(ApplArr< A, B>).Apply(
                     default(MArr< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Arr<B>> applyT< A, B>(Set<Arr<Func<A, B>>> fab, Set<Arr<A>> fa) =>
            default(MSet<Arr<Func<A, B>>>).Bind<MSet<Arr<B>>, Set<Arr<B>>, Arr<B>>(fab, f =>
                default(MSet<Arr<A>>).Bind<MSet<Arr<B>>, Set<Arr<B>>, Arr<B>>(fa, a => 
                    default(MSet<Arr<B>>).Pure(default(ApplArr< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Arr&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Set&lt;Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Arr&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Set<Arr<C>> applyT< A, B, C>(Func<A, B, C> fabc, Set<Arr<A>> fa, Set<Arr<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class HashSetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Set&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;HashSet&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Set&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Set<HashSet<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSet<HashSet<A>>, Set<HashSet<A>>, MHashSet<A>, HashSet<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Set&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;HashSet&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Set&lt;HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Set<HashSet<A>> ma) =>
            default(SeqTrans<MSet<HashSet<A>>, Set<HashSet<A>>, MHashSet<A>, HashSet<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Set&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<HashSet<B>> bindT< A, B>(Set<HashSet<A>> ma, Func<A, HashSet<B>> f) =>
            default(SeqTrans<MSet<HashSet<A>>, Set<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MSet<HashSet<B>>, Set<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Set&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Set&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Set&lt;B&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Set<B>> traverse< A, B>(Set<HashSet<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Set&lt;HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Set&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Set<A>> sequence< A>(Set<HashSet<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<HashSet<B>> mapT< A, B>(Set<HashSet<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSet<HashSet<A>>, Set<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Map<MSet<HashSet<B>>, Set<HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Set<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<HashSet<A>>, Set<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Set<HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<HashSet<A>>, Set<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Set<HashSet<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<HashSet<A>>, Set<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Set<HashSet<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<HashSet<A>>, Set<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Set&lt;HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Set<HashSet<A>> ma, Action<A> f) =>
            default(SeqTrans<MSet<HashSet<A>>, Set<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Set&lt;HashSet&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Set<HashSet<A>> filterT< A>(Set<HashSet<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSet<HashSet<A>>, Set<HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MSet<HashSet<A>>, Set<HashSet<A>>, MHashSet<A>, HashSet<A>, A>(ma, 
                    a => pred(a)
                        ? default(MHashSet<A>).Pure(a)
                        : default(MHashSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Set<HashSet<A>> plusT<NUM,  A>(Set<HashSet<A>> x, Set<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;HashSet&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Set<HashSet<A>> subtractT<NUM,  A>(Set<HashSet<A>> x, Set<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Set<HashSet<A>> productT<NUM,  A>(Set<HashSet<A>> x, Set<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Set<HashSet<A>> divideT<NUM,  A>(Set<HashSet<A>> x, Set<HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Set<HashSet<A>> appendT<SEMI,  A>(Set<HashSet<A>> x, Set<HashSet<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Set<HashSet<A>> x, Set<HashSet<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;HashSet&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Set<HashSet<A>> x, Set<HashSet<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<HashSet<B>> applyT< A, B>(Func<A, B> fab, Set<HashSet<A>> fa) =>
            default(ApplSet< HashSet<A>, HashSet<B>>).Apply(
                 default(MSet< Func<HashSet<A>, HashSet<B>>>).Pure((HashSet<A> a) => default(ApplHashSet< A, B>).Apply(
                     default(MHashSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<HashSet<B>> applyT< A, B>(Set<HashSet<Func<A, B>>> fab, Set<HashSet<A>> fa) =>
            default(MSet<HashSet<Func<A, B>>>).Bind<MSet<HashSet<B>>, Set<HashSet<B>>, HashSet<B>>(fab, f =>
                default(MSet<HashSet<A>>).Bind<MSet<HashSet<B>>, Set<HashSet<B>>, HashSet<B>>(fa, a => 
                    default(MSet<HashSet<B>>).Pure(default(ApplHashSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Set&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Set&lt;HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;HashSet&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Set<HashSet<C>> applyT< A, B, C>(Func<A, B, C> fabc, Set<HashSet<A>> fa, Set<HashSet<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class LstT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Set&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Lst&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Set&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Set<Lst<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSet<Lst<A>>, Set<Lst<A>>, MLst<A>, Lst<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Set&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Lst&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Set&lt;Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Set<Lst<A>> ma) =>
            default(SeqTrans<MSet<Lst<A>>, Set<Lst<A>>, MLst<A>, Lst<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Set&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Lst<B>> bindT< A, B>(Set<Lst<A>> ma, Func<A, Lst<B>> f) =>
            default(SeqTrans<MSet<Lst<A>>, Set<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MSet<Lst<B>>, Set<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Set&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Set&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Set&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Lst<Set<B>> traverse< A, B>(Set<Lst<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Set&lt;Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Set&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Lst<Set<A>> sequence< A>(Set<Lst<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Lst<B>> mapT< A, B>(Set<Lst<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSet<Lst<A>>, Set<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Map<MSet<Lst<B>>, Set<Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Set<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Lst<A>>, Set<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Set<Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Lst<A>>, Set<Lst<A>>, MLst<A>, Lst<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Set<Lst<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Lst<A>>, Set<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Set<Lst<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Lst<A>>, Set<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Set&lt;Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Set<Lst<A>> ma, Action<A> f) =>
            default(SeqTrans<MSet<Lst<A>>, Set<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Set&lt;Lst&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Set<Lst<A>> filterT< A>(Set<Lst<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSet<Lst<A>>, Set<Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MSet<Lst<A>>, Set<Lst<A>>, MLst<A>, Lst<A>, A>(ma, 
                    a => pred(a)
                        ? default(MLst<A>).Pure(a)
                        : default(MLst<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Lst&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Set<Lst<A>> plusT<NUM,  A>(Set<Lst<A>> x, Set<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Lst&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Set<Lst<A>> subtractT<NUM,  A>(Set<Lst<A>> x, Set<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Set<Lst<A>> productT<NUM,  A>(Set<Lst<A>> x, Set<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Set<Lst<A>> divideT<NUM,  A>(Set<Lst<A>> x, Set<Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Set<Lst<A>> appendT<SEMI,  A>(Set<Lst<A>> x, Set<Lst<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Set<Lst<A>> x, Set<Lst<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Lst&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Set<Lst<A>> x, Set<Lst<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Lst<B>> applyT< A, B>(Func<A, B> fab, Set<Lst<A>> fa) =>
            default(ApplSet< Lst<A>, Lst<B>>).Apply(
                 default(MSet< Func<Lst<A>, Lst<B>>>).Pure((Lst<A> a) => default(ApplLst< A, B>).Apply(
                     default(MLst< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Lst<B>> applyT< A, B>(Set<Lst<Func<A, B>>> fab, Set<Lst<A>> fa) =>
            default(MSet<Lst<Func<A, B>>>).Bind<MSet<Lst<B>>, Set<Lst<B>>, Lst<B>>(fab, f =>
                default(MSet<Lst<A>>).Bind<MSet<Lst<B>>, Set<Lst<B>>, Lst<B>>(fa, a => 
                    default(MSet<Lst<B>>).Pure(default(ApplLst< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Lst&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Set&lt;Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Lst&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Set<Lst<C>> applyT< A, B, C>(Func<A, B, C> fabc, Set<Lst<A>> fa, Set<Lst<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class FinT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Set&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Fin&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Set&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Set<Fin<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSet<Fin<A>>, Set<Fin<A>>, MFin<A>, Fin<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Set&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Fin&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Set&lt;Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Set<Fin<A>> ma) =>
            default(SeqTrans<MSet<Fin<A>>, Set<Fin<A>>, MFin<A>, Fin<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Set&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Fin<B>> bindT< A, B>(Set<Fin<A>> ma, Func<A, Fin<B>> f) =>
            default(SeqTrans<MSet<Fin<A>>, Set<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MSet<Fin<B>>, Set<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Set&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Set&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Set&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Fin<Set<B>> traverse< A, B>(Set<Fin<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Set&lt;Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Set&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Fin<Set<A>> sequence< A>(Set<Fin<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Fin<B>> mapT< A, B>(Set<Fin<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSet<Fin<A>>, Set<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Map<MSet<Fin<B>>, Set<Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Set<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Fin<A>>, Set<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Set<Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Fin<A>>, Set<Fin<A>>, MFin<A>, Fin<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Set<Fin<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Fin<A>>, Set<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Set<Fin<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Fin<A>>, Set<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Set&lt;Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Set<Fin<A>> ma, Action<A> f) =>
            default(SeqTrans<MSet<Fin<A>>, Set<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Set&lt;Fin&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Set<Fin<A>> filterT< A>(Set<Fin<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSet<Fin<A>>, Set<Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MSet<Fin<A>>, Set<Fin<A>>, MFin<A>, Fin<A>, A>(ma, 
                    a => pred(a)
                        ? default(MFin<A>).Pure(a)
                        : default(MFin<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Fin&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Set<Fin<A>> plusT<NUM,  A>(Set<Fin<A>> x, Set<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Fin&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Set<Fin<A>> subtractT<NUM,  A>(Set<Fin<A>> x, Set<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Set<Fin<A>> productT<NUM,  A>(Set<Fin<A>> x, Set<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Set<Fin<A>> divideT<NUM,  A>(Set<Fin<A>> x, Set<Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Set<Fin<A>> appendT<SEMI,  A>(Set<Fin<A>> x, Set<Fin<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Set<Fin<A>> x, Set<Fin<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Fin&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Set<Fin<A>> x, Set<Fin<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Fin<B>> applyT< A, B>(Func<A, B> fab, Set<Fin<A>> fa) =>
            default(ApplSet< Fin<A>, Fin<B>>).Apply(
                 default(MSet< Func<Fin<A>, Fin<B>>>).Pure((Fin<A> a) => default(ApplFin< A, B>).Apply(
                     default(MFin< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Fin<B>> applyT< A, B>(Set<Fin<Func<A, B>>> fab, Set<Fin<A>> fa) =>
            default(MSet<Fin<Func<A, B>>>).Bind<MSet<Fin<B>>, Set<Fin<B>>, Fin<B>>(fab, f =>
                default(MSet<Fin<A>>).Bind<MSet<Fin<B>>, Set<Fin<B>>, Fin<B>>(fa, a => 
                    default(MSet<Fin<B>>).Pure(default(ApplFin< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Fin&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Set&lt;Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Fin&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Set<Fin<C>> applyT< A, B, C>(Func<A, B, C> fabc, Set<Fin<A>> fa, Set<Fin<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Set&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Option&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Set&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Set<Option<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSet<Option<A>>, Set<Option<A>>, MOption<A>, Option<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Set&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Option&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Set&lt;Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Set<Option<A>> ma) =>
            default(SeqTrans<MSet<Option<A>>, Set<Option<A>>, MOption<A>, Option<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Set&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Option<B>> bindT< A, B>(Set<Option<A>> ma, Func<A, Option<B>> f) =>
            default(SeqTrans<MSet<Option<A>>, Set<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MSet<Option<B>>, Set<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Set&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Set&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Set&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Option<Set<B>> traverse< A, B>(Set<Option<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Set&lt;Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Set&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Option<Set<A>> sequence< A>(Set<Option<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Option<B>> mapT< A, B>(Set<Option<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSet<Option<A>>, Set<Option<A>>, MOption<A>, Option<A>, A>)
                .Map<MSet<Option<B>>, Set<Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Set<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Option<A>>, Set<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Set<Option<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Option<A>>, Set<Option<A>>, MOption<A>, Option<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Set<Option<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Option<A>>, Set<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Set<Option<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Option<A>>, Set<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Set&lt;Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Set<Option<A>> ma, Action<A> f) =>
            default(SeqTrans<MSet<Option<A>>, Set<Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Set&lt;Option&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Set<Option<A>> filterT< A>(Set<Option<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSet<Option<A>>, Set<Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MSet<Option<A>>, Set<Option<A>>, MOption<A>, Option<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOption<A>).Pure(a)
                        : default(MOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Option&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Set<Option<A>> plusT<NUM,  A>(Set<Option<A>> x, Set<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Option&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Set<Option<A>> subtractT<NUM,  A>(Set<Option<A>> x, Set<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Option&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Set<Option<A>> productT<NUM,  A>(Set<Option<A>> x, Set<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Option&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Set<Option<A>> divideT<NUM,  A>(Set<Option<A>> x, Set<Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Option&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Set<Option<A>> appendT<SEMI,  A>(Set<Option<A>> x, Set<Option<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Set<Option<A>> x, Set<Option<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Option&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Set<Option<A>> x, Set<Option<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Option<B>> applyT< A, B>(Func<A, B> fab, Set<Option<A>> fa) =>
            default(ApplSet< Option<A>, Option<B>>).Apply(
                 default(MSet< Func<Option<A>, Option<B>>>).Pure((Option<A> a) => default(ApplOption< A, B>).Apply(
                     default(MOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Option<B>> applyT< A, B>(Set<Option<Func<A, B>>> fab, Set<Option<A>> fa) =>
            default(MSet<Option<Func<A, B>>>).Bind<MSet<Option<B>>, Set<Option<B>>, Option<B>>(fab, f =>
                default(MSet<Option<A>>).Bind<MSet<Option<B>>, Set<Option<B>>, Option<B>>(fa, a => 
                    default(MSet<Option<B>>).Pure(default(ApplOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Option&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Set&lt;Option&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Option&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Set<Option<C>> applyT< A, B, C>(Func<A, B, C> fabc, Set<Option<A>> fa, Set<Option<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Set&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Set&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Set<OptionUnsafe<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSet<OptionUnsafe<A>>, Set<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Set&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Set&lt;OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Set<OptionUnsafe<A>> ma) =>
            default(SeqTrans<MSet<OptionUnsafe<A>>, Set<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Set&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<OptionUnsafe<B>> bindT< A, B>(Set<OptionUnsafe<A>> ma, Func<A, OptionUnsafe<B>> f) =>
            default(SeqTrans<MSet<OptionUnsafe<A>>, Set<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MSet<OptionUnsafe<B>>, Set<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Set&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Set&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Set&lt;B&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Set<B>> traverse< A, B>(Set<OptionUnsafe<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Set&lt;OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Set&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Set<A>> sequence< A>(Set<OptionUnsafe<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<OptionUnsafe<B>> mapT< A, B>(Set<OptionUnsafe<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSet<OptionUnsafe<A>>, Set<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Map<MSet<OptionUnsafe<B>>, Set<OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Set<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<OptionUnsafe<A>>, Set<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Set<OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<OptionUnsafe<A>>, Set<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Set<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<OptionUnsafe<A>>, Set<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Set<OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<OptionUnsafe<A>>, Set<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Set&lt;OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Set<OptionUnsafe<A>> ma, Action<A> f) =>
            default(SeqTrans<MSet<OptionUnsafe<A>>, Set<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Set&lt;OptionUnsafe&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Set<OptionUnsafe<A>> filterT< A>(Set<OptionUnsafe<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSet<OptionUnsafe<A>>, Set<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MSet<OptionUnsafe<A>>, Set<OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOptionUnsafe<A>).Pure(a)
                        : default(MOptionUnsafe<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Set<OptionUnsafe<A>> plusT<NUM,  A>(Set<OptionUnsafe<A>> x, Set<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Set<OptionUnsafe<A>> subtractT<NUM,  A>(Set<OptionUnsafe<A>> x, Set<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Set<OptionUnsafe<A>> productT<NUM,  A>(Set<OptionUnsafe<A>> x, Set<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Set<OptionUnsafe<A>> divideT<NUM,  A>(Set<OptionUnsafe<A>> x, Set<OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Set<OptionUnsafe<A>> appendT<SEMI,  A>(Set<OptionUnsafe<A>> x, Set<OptionUnsafe<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Set<OptionUnsafe<A>> x, Set<OptionUnsafe<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Set<OptionUnsafe<A>> x, Set<OptionUnsafe<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<OptionUnsafe<B>> applyT< A, B>(Func<A, B> fab, Set<OptionUnsafe<A>> fa) =>
            default(ApplSet< OptionUnsafe<A>, OptionUnsafe<B>>).Apply(
                 default(MSet< Func<OptionUnsafe<A>, OptionUnsafe<B>>>).Pure((OptionUnsafe<A> a) => default(ApplOptionUnsafe< A, B>).Apply(
                     default(MOptionUnsafe< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<OptionUnsafe<B>> applyT< A, B>(Set<OptionUnsafe<Func<A, B>>> fab, Set<OptionUnsafe<A>> fa) =>
            default(MSet<OptionUnsafe<Func<A, B>>>).Bind<MSet<OptionUnsafe<B>>, Set<OptionUnsafe<B>>, OptionUnsafe<B>>(fab, f =>
                default(MSet<OptionUnsafe<A>>).Bind<MSet<OptionUnsafe<B>>, Set<OptionUnsafe<B>>, OptionUnsafe<B>>(fa, a => 
                    default(MSet<OptionUnsafe<B>>).Pure(default(ApplOptionUnsafe< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Set&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Set&lt;OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Set<OptionUnsafe<C>> applyT< A, B, C>(Func<A, B, C> fabc, Set<OptionUnsafe<A>> fa, Set<OptionUnsafe<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Set&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Either&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Set&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Set<Either<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSet<Either<L, A>>, Set<Either<L, A>>, MEither<L, A>, Either<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Set&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Either&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Set&lt;Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Set<Either<L, A>> ma) =>
            default(SeqTrans<MSet<Either<L, A>>, Set<Either<L, A>>, MEither<L, A>, Either<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Set&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Either<L, B>> bindT<L, A, B>(Set<Either<L, A>> ma, Func<A, Either<L, B>> f) =>
            default(SeqTrans<MSet<Either<L, A>>, Set<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MSet<Either<L, B>>, Set<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Set&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Set&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Set&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Set<B>> traverse<L, A, B>(Set<Either<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Set&lt;Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Set&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Set<A>> sequence<L, A>(Set<Either<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Either<L, B>> mapT<L, A, B>(Set<Either<L, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSet<Either<L, A>>, Set<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Map<MSet<Either<L, B>>, Set<Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Set<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Either<L, A>>, Set<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Set<Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Either<L, A>>, Set<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Set<Either<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Either<L, A>>, Set<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Set<Either<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Either<L, A>>, Set<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Set&lt;Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Set<Either<L, A>> ma, Action<A> f) =>
            default(SeqTrans<MSet<Either<L, A>>, Set<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Set&lt;Either&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Set<Either<L, A>> filterT<L, A>(Set<Either<L, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSet<Either<L, A>>, Set<Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MSet<Either<L, A>>, Set<Either<L, A>>, MEither<L, A>, Either<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEither<L, A>).Pure(a)
                        : default(MEither<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Set<Either<L, A>> plusT<NUM, L, A>(Set<Either<L, A>> x, Set<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Either&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Set<Either<L, A>> subtractT<NUM, L, A>(Set<Either<L, A>> x, Set<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Set<Either<L, A>> productT<NUM, L, A>(Set<Either<L, A>> x, Set<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Set<Either<L, A>> divideT<NUM, L, A>(Set<Either<L, A>> x, Set<Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Set<Either<L, A>> appendT<SEMI, L, A>(Set<Either<L, A>> x, Set<Either<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Set<Either<L, A>> x, Set<Either<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Either&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Set<Either<L, A>> x, Set<Either<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Set&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Either<L, B>> applyT<L, A, B>(Func<A, B> fab, Set<Either<L, A>> fa) =>
            default(ApplSet< Either<L, A>, Either<L, B>>).Apply(
                 default(MSet< Func<Either<L, A>, Either<L, B>>>).Pure((Either<L, A> a) => default(ApplEither<L, A, B>).Apply(
                     default(MEither<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Set&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Either<L, B>> applyT<L, A, B>(Set<Either<L, Func<A, B>>> fab, Set<Either<L, A>> fa) =>
            default(MSet<Either<L, Func<A, B>>>).Bind<MSet<Either<L, B>>, Set<Either<L, B>>, Either<L, B>>(fab, f =>
                default(MSet<Either<L, A>>).Bind<MSet<Either<L, B>>, Set<Either<L, B>>, Either<L, B>>(fa, a => 
                    default(MSet<Either<L, B>>).Pure(default(ApplEither<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Set&lt;Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Set&lt;Either&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Set<Either<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Set<Either<L, A>> fa, Set<Either<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, L, A>(Set<EitherUnsafe<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSet<EitherUnsafe<L, A>>, Set<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<L, A>(Set<EitherUnsafe<L, A>> ma) =>
            default(SeqTrans<MSet<EitherUnsafe<L, A>>, Set<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Set&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<EitherUnsafe<L, B>> bindT<L, A, B>(Set<EitherUnsafe<L, A>> ma, Func<A, EitherUnsafe<L, B>> f) =>
            default(SeqTrans<MSet<EitherUnsafe<L, A>>, Set<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MSet<EitherUnsafe<L, B>>, Set<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Set&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Set&lt;B&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Set<B>> traverse<L, A, B>(Set<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Set&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Set<A>> sequence<L, A>(Set<EitherUnsafe<L, A>> ma) =>
            ma.Traverse<L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<EitherUnsafe<L, B>> mapT<L, A, B>(Set<EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSet<EitherUnsafe<L, A>>, Set<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Map<MSet<EitherUnsafe<L, B>>, Set<EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, L, A>(Set<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<EitherUnsafe<L, A>>, Set<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, L, A>(Set<EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<EitherUnsafe<L, A>>, Set<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<L, A>(Set<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<EitherUnsafe<L, A>>, Set<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<L, A>(Set<EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<EitherUnsafe<L, A>>, Set<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<L, A>(Set<EitherUnsafe<L, A>> ma, Action<A> f) =>
            default(SeqTrans<MSet<EitherUnsafe<L, A>>, Set<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Set<EitherUnsafe<L, A>> filterT<L, A>(Set<EitherUnsafe<L, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSet<EitherUnsafe<L, A>>, Set<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MSet<EitherUnsafe<L, A>>, Set<EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEitherUnsafe<L, A>).Pure(a)
                        : default(MEitherUnsafe<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Set<EitherUnsafe<L, A>> plusT<NUM, L, A>(Set<EitherUnsafe<L, A>> x, Set<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Set<EitherUnsafe<L, A>> subtractT<NUM, L, A>(Set<EitherUnsafe<L, A>> x, Set<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Set<EitherUnsafe<L, A>> productT<NUM, L, A>(Set<EitherUnsafe<L, A>> x, Set<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Set<EitherUnsafe<L, A>> divideT<NUM, L, A>(Set<EitherUnsafe<L, A>> x, Set<EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Set<EitherUnsafe<L, A>> appendT<SEMI, L, A>(Set<EitherUnsafe<L, A>> x, Set<EitherUnsafe<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, L, A>(Set<EitherUnsafe<L, A>> x, Set<EitherUnsafe<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, L, A>(Set<EitherUnsafe<L, A>> x, Set<EitherUnsafe<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Set&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<EitherUnsafe<L, B>> applyT<L, A, B>(Func<A, B> fab, Set<EitherUnsafe<L, A>> fa) =>
            default(ApplSet< EitherUnsafe<L, A>, EitherUnsafe<L, B>>).Apply(
                 default(MSet< Func<EitherUnsafe<L, A>, EitherUnsafe<L, B>>>).Pure((EitherUnsafe<L, A> a) => default(ApplEitherUnsafe<L, A, B>).Apply(
                     default(MEitherUnsafe<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Set&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<EitherUnsafe<L, B>> applyT<L, A, B>(Set<EitherUnsafe<L, Func<A, B>>> fab, Set<EitherUnsafe<L, A>> fa) =>
            default(MSet<EitherUnsafe<L, Func<A, B>>>).Bind<MSet<EitherUnsafe<L, B>>, Set<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fab, f =>
                default(MSet<EitherUnsafe<L, A>>).Bind<MSet<EitherUnsafe<L, B>>, Set<EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fa, a => 
                    default(MSet<EitherUnsafe<L, B>>).Pure(default(ApplEitherUnsafe<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Set&lt;EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Set&lt;EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Set<EitherUnsafe<L, C>> applyT<L, A, B, C>(Func<A, B, C> fabc, Set<EitherUnsafe<L, A>> fa, Set<EitherUnsafe<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Set&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Try&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Set&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Set<Try<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSet<Try<A>>, Set<Try<A>>, MTry<A>, Try<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Set&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Try&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Set&lt;Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Set<Try<A>> ma) =>
            default(SeqTrans<MSet<Try<A>>, Set<Try<A>>, MTry<A>, Try<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Set&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Try<B>> bindT< A, B>(Set<Try<A>> ma, Func<A, Try<B>> f) =>
            default(SeqTrans<MSet<Try<A>>, Set<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MSet<Try<B>>, Set<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Set&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Set&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Set&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Try<Set<B>> traverse< A, B>(Set<Try<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Set&lt;Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Set&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Try<Set<A>> sequence< A>(Set<Try<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Try<B>> mapT< A, B>(Set<Try<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSet<Try<A>>, Set<Try<A>>, MTry<A>, Try<A>, A>)
                .Map<MSet<Try<B>>, Set<Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Set<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Try<A>>, Set<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Set<Try<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Try<A>>, Set<Try<A>>, MTry<A>, Try<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Set<Try<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Try<A>>, Set<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Set<Try<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Try<A>>, Set<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Set&lt;Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Set<Try<A>> ma, Action<A> f) =>
            default(SeqTrans<MSet<Try<A>>, Set<Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Set&lt;Try&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Set<Try<A>> filterT< A>(Set<Try<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSet<Try<A>>, Set<Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MSet<Try<A>>, Set<Try<A>>, MTry<A>, Try<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTry<A>).Pure(a)
                        : default(MTry<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Try&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Set<Try<A>> plusT<NUM,  A>(Set<Try<A>> x, Set<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Try&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Set<Try<A>> subtractT<NUM,  A>(Set<Try<A>> x, Set<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Try&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Set<Try<A>> productT<NUM,  A>(Set<Try<A>> x, Set<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Try&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Set<Try<A>> divideT<NUM,  A>(Set<Try<A>> x, Set<Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Try&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Set<Try<A>> appendT<SEMI,  A>(Set<Try<A>> x, Set<Try<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Set<Try<A>> x, Set<Try<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Try&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Set<Try<A>> x, Set<Try<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Try<B>> applyT< A, B>(Func<A, B> fab, Set<Try<A>> fa) =>
            default(ApplSet< Try<A>, Try<B>>).Apply(
                 default(MSet< Func<Try<A>, Try<B>>>).Pure((Try<A> a) => default(ApplTry< A, B>).Apply(
                     default(MTry< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Try<B>> applyT< A, B>(Set<Try<Func<A, B>>> fab, Set<Try<A>> fa) =>
            default(MSet<Try<Func<A, B>>>).Bind<MSet<Try<B>>, Set<Try<B>>, Try<B>>(fab, f =>
                default(MSet<Try<A>>).Bind<MSet<Try<B>>, Set<Try<B>>, Try<B>>(fa, a => 
                    default(MSet<Try<B>>).Pure(default(ApplTry< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Try&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Set&lt;Try&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Try&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Set<Try<C>> applyT< A, B, C>(Func<A, B, C> fabc, Set<Try<A>> fa, Set<Try<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryOptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Set&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;TryOption&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Set&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Set<TryOption<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSet<TryOption<A>>, Set<TryOption<A>>, MTryOption<A>, TryOption<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Set&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;TryOption&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Set&lt;TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Set<TryOption<A>> ma) =>
            default(SeqTrans<MSet<TryOption<A>>, Set<TryOption<A>>, MTryOption<A>, TryOption<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Set&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<TryOption<B>> bindT< A, B>(Set<TryOption<A>> ma, Func<A, TryOption<B>> f) =>
            default(SeqTrans<MSet<TryOption<A>>, Set<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MSet<TryOption<B>>, Set<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Set&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Set&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Set&lt;B&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Set<B>> traverse< A, B>(Set<TryOption<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Set&lt;TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Set&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Set<A>> sequence< A>(Set<TryOption<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<TryOption<B>> mapT< A, B>(Set<TryOption<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSet<TryOption<A>>, Set<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Map<MSet<TryOption<B>>, Set<TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Set<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<TryOption<A>>, Set<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Set<TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<TryOption<A>>, Set<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Set<TryOption<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<TryOption<A>>, Set<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Set<TryOption<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<TryOption<A>>, Set<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Set&lt;TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Set<TryOption<A>> ma, Action<A> f) =>
            default(SeqTrans<MSet<TryOption<A>>, Set<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Set&lt;TryOption&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Set<TryOption<A>> filterT< A>(Set<TryOption<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSet<TryOption<A>>, Set<TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MSet<TryOption<A>>, Set<TryOption<A>>, MTryOption<A>, TryOption<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTryOption<A>).Pure(a)
                        : default(MTryOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Set<TryOption<A>> plusT<NUM,  A>(Set<TryOption<A>> x, Set<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;TryOption&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Set<TryOption<A>> subtractT<NUM,  A>(Set<TryOption<A>> x, Set<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Set<TryOption<A>> productT<NUM,  A>(Set<TryOption<A>> x, Set<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Set<TryOption<A>> divideT<NUM,  A>(Set<TryOption<A>> x, Set<TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Set<TryOption<A>> appendT<SEMI,  A>(Set<TryOption<A>> x, Set<TryOption<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Set<TryOption<A>> x, Set<TryOption<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;TryOption&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Set<TryOption<A>> x, Set<TryOption<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<TryOption<B>> applyT< A, B>(Func<A, B> fab, Set<TryOption<A>> fa) =>
            default(ApplSet< TryOption<A>, TryOption<B>>).Apply(
                 default(MSet< Func<TryOption<A>, TryOption<B>>>).Pure((TryOption<A> a) => default(ApplTryOption< A, B>).Apply(
                     default(MTryOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<TryOption<B>> applyT< A, B>(Set<TryOption<Func<A, B>>> fab, Set<TryOption<A>> fa) =>
            default(MSet<TryOption<Func<A, B>>>).Bind<MSet<TryOption<B>>, Set<TryOption<B>>, TryOption<B>>(fab, f =>
                default(MSet<TryOption<A>>).Bind<MSet<TryOption<B>>, Set<TryOption<B>>, TryOption<B>>(fa, a => 
                    default(MSet<TryOption<B>>).Pure(default(ApplTryOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Set&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Set&lt;TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;TryOption&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Set<TryOption<C>> applyT< A, B, C>(Func<A, B, C> fabc, Set<TryOption<A>> fa, Set<TryOption<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class IEnumerableT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Set&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;IEnumerable&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Set&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Set<IEnumerable<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSet<IEnumerable<A>>, Set<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Set&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;IEnumerable&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Set&lt;IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Set<IEnumerable<A>> ma) =>
            default(SeqTrans<MSet<IEnumerable<A>>, Set<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Set&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<IEnumerable<B>> bindT< A, B>(Set<IEnumerable<A>> ma, Func<A, IEnumerable<B>> f) =>
            default(SeqTrans<MSet<IEnumerable<A>>, Set<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MSet<IEnumerable<B>>, Set<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Set&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Set&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Set&lt;B&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Set<B>> traverse< A, B>(Set<IEnumerable<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Set&lt;IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Set&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Set<A>> sequence< A>(Set<IEnumerable<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<IEnumerable<B>> mapT< A, B>(Set<IEnumerable<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSet<IEnumerable<A>>, Set<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Map<MSet<IEnumerable<B>>, Set<IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Set<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<IEnumerable<A>>, Set<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Set<IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<IEnumerable<A>>, Set<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Set<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<IEnumerable<A>>, Set<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Set<IEnumerable<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<IEnumerable<A>>, Set<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Set&lt;IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Set<IEnumerable<A>> ma, Action<A> f) =>
            default(SeqTrans<MSet<IEnumerable<A>>, Set<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Set&lt;IEnumerable&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Set<IEnumerable<A>> filterT< A>(Set<IEnumerable<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSet<IEnumerable<A>>, Set<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MSet<IEnumerable<A>>, Set<IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>(ma, 
                    a => pred(a)
                        ? default(MEnumerable<A>).Pure(a)
                        : default(MEnumerable<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Set<IEnumerable<A>> plusT<NUM,  A>(Set<IEnumerable<A>> x, Set<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Set<IEnumerable<A>> subtractT<NUM,  A>(Set<IEnumerable<A>> x, Set<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Set<IEnumerable<A>> productT<NUM,  A>(Set<IEnumerable<A>> x, Set<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Set<IEnumerable<A>> divideT<NUM,  A>(Set<IEnumerable<A>> x, Set<IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Set<IEnumerable<A>> appendT<SEMI,  A>(Set<IEnumerable<A>> x, Set<IEnumerable<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Set<IEnumerable<A>> x, Set<IEnumerable<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;IEnumerable&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Set<IEnumerable<A>> x, Set<IEnumerable<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<IEnumerable<B>> applyT< A, B>(Func<A, B> fab, Set<IEnumerable<A>> fa) =>
            default(ApplSet< IEnumerable<A>, IEnumerable<B>>).Apply(
                 default(MSet< Func<IEnumerable<A>, IEnumerable<B>>>).Pure((IEnumerable<A> a) => default(ApplEnumerable< A, B>).Apply(
                     default(MEnumerable< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<IEnumerable<B>> applyT< A, B>(Set<IEnumerable<Func<A, B>>> fab, Set<IEnumerable<A>> fa) =>
            default(MSet<IEnumerable<Func<A, B>>>).Bind<MSet<IEnumerable<B>>, Set<IEnumerable<B>>, IEnumerable<B>>(fab, f =>
                default(MSet<IEnumerable<A>>).Bind<MSet<IEnumerable<B>>, Set<IEnumerable<B>>, IEnumerable<B>>(fa, a => 
                    default(MSet<IEnumerable<B>>).Pure(default(ApplEnumerable< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Set&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Set&lt;IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;IEnumerable&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Set<IEnumerable<C>> applyT< A, B, C>(Func<A, B, C> fabc, Set<IEnumerable<A>> fa, Set<IEnumerable<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SeqT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Set&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Seq&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Set&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Set<Seq<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSet<Seq<A>>, Set<Seq<A>>, MSeq<A>, Seq<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Set&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Seq&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Set&lt;Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Set<Seq<A>> ma) =>
            default(SeqTrans<MSet<Seq<A>>, Set<Seq<A>>, MSeq<A>, Seq<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Set&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Seq<B>> bindT< A, B>(Set<Seq<A>> ma, Func<A, Seq<B>> f) =>
            default(SeqTrans<MSet<Seq<A>>, Set<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MSet<Seq<B>>, Set<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Set&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Set&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Set&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Seq<Set<B>> traverse< A, B>(Set<Seq<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Set&lt;Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Set&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Seq<Set<A>> sequence< A>(Set<Seq<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Seq<B>> mapT< A, B>(Set<Seq<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSet<Seq<A>>, Set<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Map<MSet<Seq<B>>, Set<Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Set<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Seq<A>>, Set<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Set<Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Seq<A>>, Set<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Set<Seq<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Seq<A>>, Set<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Set<Seq<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Seq<A>>, Set<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Set&lt;Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Set<Seq<A>> ma, Action<A> f) =>
            default(SeqTrans<MSet<Seq<A>>, Set<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Set&lt;Seq&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Set<Seq<A>> filterT< A>(Set<Seq<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSet<Seq<A>>, Set<Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MSet<Seq<A>>, Set<Seq<A>>, MSeq<A>, Seq<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSeq<A>).Pure(a)
                        : default(MSeq<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Seq&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Set<Seq<A>> plusT<NUM,  A>(Set<Seq<A>> x, Set<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Seq&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Set<Seq<A>> subtractT<NUM,  A>(Set<Seq<A>> x, Set<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Set<Seq<A>> productT<NUM,  A>(Set<Seq<A>> x, Set<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Set<Seq<A>> divideT<NUM,  A>(Set<Seq<A>> x, Set<Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Set<Seq<A>> appendT<SEMI,  A>(Set<Seq<A>> x, Set<Seq<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Set<Seq<A>> x, Set<Seq<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Seq&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Set<Seq<A>> x, Set<Seq<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Seq<B>> applyT< A, B>(Func<A, B> fab, Set<Seq<A>> fa) =>
            default(ApplSet< Seq<A>, Seq<B>>).Apply(
                 default(MSet< Func<Seq<A>, Seq<B>>>).Pure((Seq<A> a) => default(ApplSeq< A, B>).Apply(
                     default(MSeq< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Seq<B>> applyT< A, B>(Set<Seq<Func<A, B>>> fab, Set<Seq<A>> fa) =>
            default(MSet<Seq<Func<A, B>>>).Bind<MSet<Seq<B>>, Set<Seq<B>>, Seq<B>>(fab, f =>
                default(MSet<Seq<A>>).Bind<MSet<Seq<B>>, Set<Seq<B>>, Seq<B>>(fa, a => 
                    default(MSet<Seq<B>>).Pure(default(ApplSeq< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Seq&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Set&lt;Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Seq&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Set<Seq<C>> applyT< A, B, C>(Func<A, B, C> fabc, Set<Seq<A>> fa, Set<Seq<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Set&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Set&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Set&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA,  A>(Set<Set<A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSet<Set<A>>, Set<Set<A>>, MSet<A>, Set<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Set&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Set&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Set&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT< A>(Set<Set<A>> ma) =>
            default(SeqTrans<MSet<Set<A>>, Set<Set<A>>, MSet<A>, Set<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Set&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Set<B>> bindT< A, B>(Set<Set<A>> ma, Func<A, Set<B>> f) =>
            default(SeqTrans<MSet<Set<A>>, Set<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MSet<Set<B>>, Set<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Set&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Set&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Set&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Set<Set<B>> traverse< A, B>(Set<Set<A>> ma, Func<A, B> f) =>
            ma.Traverse< A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Set&lt;Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Set&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse< A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Set<Set<A>> sequence< A>(Set<Set<A>> ma) =>
            ma.Traverse< A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Set<B>> mapT< A, B>(Set<Set<A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSet<Set<A>>, Set<Set<A>>, MSet<A>, Set<A>, A>)
                .Map<MSet<Set<B>>, Set<Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S,  A>(Set<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Set<A>>, Set<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S,  A>(Set<Set<A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Set<A>>, Set<Set<A>>, MSet<A>, Set<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT< A>(Set<Set<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Set<A>>, Set<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT< A>(Set<Set<A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Set<A>>, Set<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Set&lt;Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT< A>(Set<Set<A>> ma, Action<A> f) =>
            default(SeqTrans<MSet<Set<A>>, Set<Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Set&lt;Set&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Set<Set<A>> filterT< A>(Set<Set<A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSet<Set<A>>, Set<Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MSet<Set<A>>, Set<Set<A>>, MSet<A>, Set<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSet<A>).Pure(a)
                        : default(MSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Set&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Set<Set<A>> plusT<NUM,  A>(Set<Set<A>> x, Set<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Set&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Set<Set<A>> subtractT<NUM,  A>(Set<Set<A>> x, Set<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Set&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Set<Set<A>> productT<NUM,  A>(Set<Set<A>> x, Set<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Set&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Set<Set<A>> divideT<NUM,  A>(Set<Set<A>> x, Set<Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Set&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Set<Set<A>> appendT<SEMI,  A>(Set<Set<A>> x, Set<Set<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD,  A>(Set<Set<A>> x, Set<Set<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Set&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ,  A>(Set<Set<A>> x, Set<Set<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Set<B>> applyT< A, B>(Func<A, B> fab, Set<Set<A>> fa) =>
            default(ApplSet< Set<A>, Set<B>>).Apply(
                 default(MSet< Func<Set<A>, Set<B>>>).Pure((Set<A> a) => default(ApplSet< A, B>).Apply(
                     default(MSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Set<B>> applyT< A, B>(Set<Set<Func<A, B>>> fab, Set<Set<A>> fa) =>
            default(MSet<Set<Func<A, B>>>).Bind<MSet<Set<B>>, Set<Set<B>>, Set<B>>(fab, f =>
                default(MSet<Set<A>>).Bind<MSet<Set<B>>, Set<Set<B>>, Set<B>>(fa, a => 
                    default(MSet<Set<B>>).Pure(default(ApplSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Set&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Set&lt;Set&lt;A&gt;&gt;`</param>
        /// <returns>`Set&lt;Set&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Set<Set<C>> applyT< A, B, C>(Func<A, B, C> fabc, Set<Set<A>> fa, Set<Set<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ValidationT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Set&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Set&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Set<Validation<FAIL, A>> ma)
            where NumA : struct, Num<A> =>
                default(SeqTrans<MSet<Validation<FAIL, A>>, Set<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Set&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Set&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Set<Validation<FAIL, A>> ma) =>
            default(SeqTrans<MSet<Validation<FAIL, A>>, Set<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Set&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Validation<FAIL, B>> bindT<FAIL, A, B>(Set<Validation<FAIL, A>> ma, Func<A, Validation<FAIL, B>> f) =>
            default(SeqTrans<MSet<Validation<FAIL, A>>, Set<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MSet<Validation<FAIL, B>>, Set<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Set&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Set&lt;B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Set&lt;B&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Set<B>> traverse<FAIL, A, B>(Set<Validation<FAIL, A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Set&lt;Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Set&lt;A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Set<A>> sequence<FAIL, A>(Set<Validation<FAIL, A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Set<Validation<FAIL, B>> mapT<FAIL, A, B>(Set<Validation<FAIL, A>> ma, Func<A, B> f) =>
            default(SeqTrans<MSet<Validation<FAIL, A>>, Set<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Map<MSet<Validation<FAIL, B>>, Set<Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Set<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Validation<FAIL, A>>, Set<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Set&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Set<Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(SeqTrans<MSet<Validation<FAIL, A>>, Set<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Set<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Validation<FAIL, A>>, Set<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Set<Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(SeqTrans<MSet<Validation<FAIL, A>>, Set<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Set&lt;Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Set<Validation<FAIL, A>> ma, Action<A> f) =>
            default(SeqTrans<MSet<Validation<FAIL, A>>, Set<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Set&lt;Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Set&lt;Validation&lt;FAIL, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Set<Validation<FAIL, A>> filterT<FAIL, A>(Set<Validation<FAIL, A>> ma, Func<A, bool> pred) =>
            default(SeqTrans<MSet<Validation<FAIL, A>>, Set<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MSet<Validation<FAIL, A>>, Set<Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>(ma, 
                    a => pred(a)
                        ? default(MValidation<FAIL, A>).Pure(a)
                        : default(MValidation<FAIL, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Set<Validation<FAIL, A>> plusT<NUM, FAIL, A>(Set<Validation<FAIL, A>> x, Set<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Set<Validation<FAIL, A>> subtractT<NUM, FAIL, A>(Set<Validation<FAIL, A>> x, Set<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Set<Validation<FAIL, A>> productT<NUM, FAIL, A>(Set<Validation<FAIL, A>> x, Set<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Set<Validation<FAIL, A>> divideT<NUM, FAIL, A>(Set<Validation<FAIL, A>> x, Set<Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Set<Validation<FAIL, A>> appendT<SEMI, FAIL, A>(Set<Validation<FAIL, A>> x, Set<Validation<FAIL, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Set<Validation<FAIL, A>> x, Set<Validation<FAIL, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Set&lt;Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Set<Validation<FAIL, A>> x, Set<Validation<FAIL, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Set&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Validation<FAIL, B>> applyT<FAIL, A, B>(Func<A, B> fab, Set<Validation<FAIL, A>> fa) =>
            default(ApplSet< Validation<FAIL, A>, Validation<FAIL, B>>).Apply(
                 default(MSet< Func<Validation<FAIL, A>, Validation<FAIL, B>>>).Pure((Validation<FAIL, A> a) => default(ApplValidation<FAIL, A, B>).Apply(
                     default(MValidation<FAIL, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Set&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Set<Validation<FAIL, B>> applyT<FAIL, A, B>(Set<Validation<FAIL, Func<A, B>>> fab, Set<Validation<FAIL, A>> fa) =>
            default(MSet<Validation<FAIL, Func<A, B>>>).Bind<MSet<Validation<FAIL, B>>, Set<Validation<FAIL, B>>, Validation<FAIL, B>>(fab, f =>
                default(MSet<Validation<FAIL, A>>).Bind<MSet<Validation<FAIL, B>>, Set<Validation<FAIL, B>>, Validation<FAIL, B>>(fa, a => 
                    default(MSet<Validation<FAIL, B>>).Pure(default(ApplValidation<FAIL, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Set&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Set&lt;Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Set&lt;Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Set<Validation<FAIL, C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Set<Validation<FAIL, A>> fa, Set<Validation<FAIL, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ArrT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Validation&lt;FAIL, Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Arr&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Validation&lt;FAIL, Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Validation<FAIL, Arr<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MValidation<FAIL, Arr<A>>, Validation<FAIL, Arr<A>>, MArr<A>, Arr<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Validation&lt;FAIL, Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Arr&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Validation&lt;FAIL, Arr&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Validation<FAIL, Arr<A>> ma) =>
            default(Trans<MValidation<FAIL, Arr<A>>, Validation<FAIL, Arr<A>>, MArr<A>, Arr<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Validation&lt;FAIL, Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Arr<B>> bindT<FAIL, A, B>(Validation<FAIL, Arr<A>> ma, Func<A, Arr<B>> f) =>
            default(Trans<MValidation<FAIL, Arr<A>>, Validation<FAIL, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MValidation<FAIL, Arr<B>>, Validation<FAIL, Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Validation&lt;FAIL, Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Validation&lt;FAIL, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Validation&lt;FAIL, B&gt;&gt;`</returns>
        [Pure]
        public static Arr<Validation<FAIL, B>> traverse<FAIL, A, B>(Validation<FAIL, Arr<A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Validation&lt;FAIL, Arr&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Arr&lt;Validation&lt;FAIL, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Arr&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static Arr<Validation<FAIL, A>> sequence<FAIL, A>(Validation<FAIL, Arr<A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Arr&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Arr<B>> mapT<FAIL, A, B>(Validation<FAIL, Arr<A>> ma, Func<A, B> f) =>
            default(Trans<MValidation<FAIL, Arr<A>>, Validation<FAIL, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Map<MValidation<FAIL, Arr<B>>, Validation<FAIL, Arr<B>>, MArr<B>, Arr<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Validation<FAIL, Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Arr<A>>, Validation<FAIL, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Validation<FAIL, Arr<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Arr<A>>, Validation<FAIL, Arr<A>>, MArr<A>, Arr<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Validation<FAIL, Arr<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Arr<A>>, Validation<FAIL, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Validation<FAIL, Arr<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Arr<A>>, Validation<FAIL, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Validation&lt;FAIL, Arr&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Validation<FAIL, Arr<A>> ma, Action<A> f) =>
            default(Trans<MValidation<FAIL, Arr<A>>, Validation<FAIL, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Arr&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Validation&lt;FAIL, Arr&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Validation<FAIL, Arr<A>> filterT<FAIL, A>(Validation<FAIL, Arr<A>> ma, Func<A, bool> pred) =>
            default(Trans<MValidation<FAIL, Arr<A>>, Validation<FAIL, Arr<A>>, MArr<A>, Arr<A>, A>)
                .Bind<MValidation<FAIL, Arr<A>>, Validation<FAIL, Arr<A>>, MArr<A>, Arr<A>, A>(ma, 
                    a => pred(a)
                        ? default(MArr<A>).Pure(a)
                        : default(MArr<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Arr&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Validation<FAIL, Arr<A>> plusT<NUM, FAIL, A>(Validation<FAIL, Arr<A>> x, Validation<FAIL, Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Arr&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Validation<FAIL, Arr<A>> subtractT<NUM, FAIL, A>(Validation<FAIL, Arr<A>> x, Validation<FAIL, Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Arr&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Validation<FAIL, Arr<A>> productT<NUM, FAIL, A>(Validation<FAIL, Arr<A>> x, Validation<FAIL, Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Arr&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Validation<FAIL, Arr<A>> divideT<NUM, FAIL, A>(Validation<FAIL, Arr<A>> x, Validation<FAIL, Arr<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Arr&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Validation<FAIL, Arr<A>> appendT<SEMI, FAIL, A>(Validation<FAIL, Arr<A>> x, Validation<FAIL, Arr<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Validation<FAIL, Arr<A>> x, Validation<FAIL, Arr<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Arr&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Validation<FAIL, Arr<A>> x, Validation<FAIL, Arr<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Arr<B>> applyT<FAIL, A, B>(Func<A, B> fab, Validation<FAIL, Arr<A>> fa) =>
            default(ApplValidation<FAIL, Arr<A>, Arr<B>>).Apply(
                 default(MValidation<FAIL, Func<Arr<A>, Arr<B>>>).Pure((Arr<A> a) => default(ApplArr< A, B>).Apply(
                     default(MArr< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Arr&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Arr<B>> applyT<FAIL, A, B>(Validation<FAIL, Arr<Func<A, B>>> fab, Validation<FAIL, Arr<A>> fa) =>
            default(MValidation<FAIL, Arr<Func<A, B>>>).Bind<MValidation<FAIL, Arr<B>>, Validation<FAIL, Arr<B>>, Arr<B>>(fab, f =>
                default(MValidation<FAIL, Arr<A>>).Bind<MValidation<FAIL, Arr<B>>, Validation<FAIL, Arr<B>>, Arr<B>>(fa, a => 
                    default(MValidation<FAIL, Arr<B>>).Pure(default(ApplArr< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Arr&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Validation&lt;FAIL, Arr&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Arr&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Validation<FAIL, Arr<C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Validation<FAIL, Arr<A>> fa, Validation<FAIL, Arr<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class HashSetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Validation<FAIL, HashSet<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MValidation<FAIL, HashSet<A>>, Validation<FAIL, HashSet<A>>, MHashSet<A>, HashSet<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Validation<FAIL, HashSet<A>> ma) =>
            default(Trans<MValidation<FAIL, HashSet<A>>, Validation<FAIL, HashSet<A>>, MHashSet<A>, HashSet<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Validation&lt;FAIL, HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, HashSet<B>> bindT<FAIL, A, B>(Validation<FAIL, HashSet<A>> ma, Func<A, HashSet<B>> f) =>
            default(Trans<MValidation<FAIL, HashSet<A>>, Validation<FAIL, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MValidation<FAIL, HashSet<B>>, Validation<FAIL, HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Validation&lt;FAIL, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Validation&lt;FAIL, B&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Validation<FAIL, B>> traverse<FAIL, A, B>(Validation<FAIL, HashSet<A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `HashSet&lt;Validation&lt;FAIL, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`HashSet&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static HashSet<Validation<FAIL, A>> sequence<FAIL, A>(Validation<FAIL, HashSet<A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, HashSet&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, HashSet<B>> mapT<FAIL, A, B>(Validation<FAIL, HashSet<A>> ma, Func<A, B> f) =>
            default(Trans<MValidation<FAIL, HashSet<A>>, Validation<FAIL, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Map<MValidation<FAIL, HashSet<B>>, Validation<FAIL, HashSet<B>>, MHashSet<B>, HashSet<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Validation<FAIL, HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, HashSet<A>>, Validation<FAIL, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Validation<FAIL, HashSet<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, HashSet<A>>, Validation<FAIL, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Validation<FAIL, HashSet<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, HashSet<A>>, Validation<FAIL, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Validation<FAIL, HashSet<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, HashSet<A>>, Validation<FAIL, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Validation<FAIL, HashSet<A>> ma, Action<A> f) =>
            default(Trans<MValidation<FAIL, HashSet<A>>, Validation<FAIL, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Validation<FAIL, HashSet<A>> filterT<FAIL, A>(Validation<FAIL, HashSet<A>> ma, Func<A, bool> pred) =>
            default(Trans<MValidation<FAIL, HashSet<A>>, Validation<FAIL, HashSet<A>>, MHashSet<A>, HashSet<A>, A>)
                .Bind<MValidation<FAIL, HashSet<A>>, Validation<FAIL, HashSet<A>>, MHashSet<A>, HashSet<A>, A>(ma, 
                    a => pred(a)
                        ? default(MHashSet<A>).Pure(a)
                        : default(MHashSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Validation<FAIL, HashSet<A>> plusT<NUM, FAIL, A>(Validation<FAIL, HashSet<A>> x, Validation<FAIL, HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Validation<FAIL, HashSet<A>> subtractT<NUM, FAIL, A>(Validation<FAIL, HashSet<A>> x, Validation<FAIL, HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Validation<FAIL, HashSet<A>> productT<NUM, FAIL, A>(Validation<FAIL, HashSet<A>> x, Validation<FAIL, HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Validation<FAIL, HashSet<A>> divideT<NUM, FAIL, A>(Validation<FAIL, HashSet<A>> x, Validation<FAIL, HashSet<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Validation<FAIL, HashSet<A>> appendT<SEMI, FAIL, A>(Validation<FAIL, HashSet<A>> x, Validation<FAIL, HashSet<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Validation<FAIL, HashSet<A>> x, Validation<FAIL, HashSet<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, HashSet&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Validation<FAIL, HashSet<A>> x, Validation<FAIL, HashSet<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, HashSet<B>> applyT<FAIL, A, B>(Func<A, B> fab, Validation<FAIL, HashSet<A>> fa) =>
            default(ApplValidation<FAIL, HashSet<A>, HashSet<B>>).Apply(
                 default(MValidation<FAIL, Func<HashSet<A>, HashSet<B>>>).Pure((HashSet<A> a) => default(ApplHashSet< A, B>).Apply(
                     default(MHashSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, HashSet&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, HashSet<B>> applyT<FAIL, A, B>(Validation<FAIL, HashSet<Func<A, B>>> fab, Validation<FAIL, HashSet<A>> fa) =>
            default(MValidation<FAIL, HashSet<Func<A, B>>>).Bind<MValidation<FAIL, HashSet<B>>, Validation<FAIL, HashSet<B>>, HashSet<B>>(fab, f =>
                default(MValidation<FAIL, HashSet<A>>).Bind<MValidation<FAIL, HashSet<B>>, Validation<FAIL, HashSet<B>>, HashSet<B>>(fa, a => 
                    default(MValidation<FAIL, HashSet<B>>).Pure(default(ApplHashSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Validation&lt;FAIL, HashSet&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, HashSet&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Validation<FAIL, HashSet<C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Validation<FAIL, HashSet<A>> fa, Validation<FAIL, HashSet<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class LstT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Validation&lt;FAIL, Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Lst&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Validation&lt;FAIL, Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Validation<FAIL, Lst<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MValidation<FAIL, Lst<A>>, Validation<FAIL, Lst<A>>, MLst<A>, Lst<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Validation&lt;FAIL, Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Lst&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Validation&lt;FAIL, Lst&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Validation<FAIL, Lst<A>> ma) =>
            default(Trans<MValidation<FAIL, Lst<A>>, Validation<FAIL, Lst<A>>, MLst<A>, Lst<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Validation&lt;FAIL, Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Lst<B>> bindT<FAIL, A, B>(Validation<FAIL, Lst<A>> ma, Func<A, Lst<B>> f) =>
            default(Trans<MValidation<FAIL, Lst<A>>, Validation<FAIL, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MValidation<FAIL, Lst<B>>, Validation<FAIL, Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Validation&lt;FAIL, Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Validation&lt;FAIL, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Validation&lt;FAIL, B&gt;&gt;`</returns>
        [Pure]
        public static Lst<Validation<FAIL, B>> traverse<FAIL, A, B>(Validation<FAIL, Lst<A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Validation&lt;FAIL, Lst&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Lst&lt;Validation&lt;FAIL, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Lst&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static Lst<Validation<FAIL, A>> sequence<FAIL, A>(Validation<FAIL, Lst<A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Lst&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Lst<B>> mapT<FAIL, A, B>(Validation<FAIL, Lst<A>> ma, Func<A, B> f) =>
            default(Trans<MValidation<FAIL, Lst<A>>, Validation<FAIL, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Map<MValidation<FAIL, Lst<B>>, Validation<FAIL, Lst<B>>, MLst<B>, Lst<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Validation<FAIL, Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Lst<A>>, Validation<FAIL, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Validation<FAIL, Lst<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Lst<A>>, Validation<FAIL, Lst<A>>, MLst<A>, Lst<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Validation<FAIL, Lst<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Lst<A>>, Validation<FAIL, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Validation<FAIL, Lst<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Lst<A>>, Validation<FAIL, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Validation&lt;FAIL, Lst&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Validation<FAIL, Lst<A>> ma, Action<A> f) =>
            default(Trans<MValidation<FAIL, Lst<A>>, Validation<FAIL, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Lst&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Validation&lt;FAIL, Lst&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Validation<FAIL, Lst<A>> filterT<FAIL, A>(Validation<FAIL, Lst<A>> ma, Func<A, bool> pred) =>
            default(Trans<MValidation<FAIL, Lst<A>>, Validation<FAIL, Lst<A>>, MLst<A>, Lst<A>, A>)
                .Bind<MValidation<FAIL, Lst<A>>, Validation<FAIL, Lst<A>>, MLst<A>, Lst<A>, A>(ma, 
                    a => pred(a)
                        ? default(MLst<A>).Pure(a)
                        : default(MLst<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Lst&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Validation<FAIL, Lst<A>> plusT<NUM, FAIL, A>(Validation<FAIL, Lst<A>> x, Validation<FAIL, Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Lst&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Validation<FAIL, Lst<A>> subtractT<NUM, FAIL, A>(Validation<FAIL, Lst<A>> x, Validation<FAIL, Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Lst&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Validation<FAIL, Lst<A>> productT<NUM, FAIL, A>(Validation<FAIL, Lst<A>> x, Validation<FAIL, Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Lst&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Validation<FAIL, Lst<A>> divideT<NUM, FAIL, A>(Validation<FAIL, Lst<A>> x, Validation<FAIL, Lst<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Lst&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Validation<FAIL, Lst<A>> appendT<SEMI, FAIL, A>(Validation<FAIL, Lst<A>> x, Validation<FAIL, Lst<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Validation<FAIL, Lst<A>> x, Validation<FAIL, Lst<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Lst&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Validation<FAIL, Lst<A>> x, Validation<FAIL, Lst<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Lst<B>> applyT<FAIL, A, B>(Func<A, B> fab, Validation<FAIL, Lst<A>> fa) =>
            default(ApplValidation<FAIL, Lst<A>, Lst<B>>).Apply(
                 default(MValidation<FAIL, Func<Lst<A>, Lst<B>>>).Pure((Lst<A> a) => default(ApplLst< A, B>).Apply(
                     default(MLst< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Lst&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Lst<B>> applyT<FAIL, A, B>(Validation<FAIL, Lst<Func<A, B>>> fab, Validation<FAIL, Lst<A>> fa) =>
            default(MValidation<FAIL, Lst<Func<A, B>>>).Bind<MValidation<FAIL, Lst<B>>, Validation<FAIL, Lst<B>>, Lst<B>>(fab, f =>
                default(MValidation<FAIL, Lst<A>>).Bind<MValidation<FAIL, Lst<B>>, Validation<FAIL, Lst<B>>, Lst<B>>(fa, a => 
                    default(MValidation<FAIL, Lst<B>>).Pure(default(ApplLst< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Lst&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Validation&lt;FAIL, Lst&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Lst&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Validation<FAIL, Lst<C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Validation<FAIL, Lst<A>> fa, Validation<FAIL, Lst<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class FinT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Validation&lt;FAIL, Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Fin&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Validation&lt;FAIL, Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Validation<FAIL, Fin<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MValidation<FAIL, Fin<A>>, Validation<FAIL, Fin<A>>, MFin<A>, Fin<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Validation&lt;FAIL, Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Fin&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Validation&lt;FAIL, Fin&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Validation<FAIL, Fin<A>> ma) =>
            default(Trans<MValidation<FAIL, Fin<A>>, Validation<FAIL, Fin<A>>, MFin<A>, Fin<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Validation&lt;FAIL, Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Fin<B>> bindT<FAIL, A, B>(Validation<FAIL, Fin<A>> ma, Func<A, Fin<B>> f) =>
            default(Trans<MValidation<FAIL, Fin<A>>, Validation<FAIL, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MValidation<FAIL, Fin<B>>, Validation<FAIL, Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Validation&lt;FAIL, Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Validation&lt;FAIL, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Validation&lt;FAIL, B&gt;&gt;`</returns>
        [Pure]
        public static Fin<Validation<FAIL, B>> traverse<FAIL, A, B>(Validation<FAIL, Fin<A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Validation&lt;FAIL, Fin&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Fin&lt;Validation&lt;FAIL, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Fin&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static Fin<Validation<FAIL, A>> sequence<FAIL, A>(Validation<FAIL, Fin<A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Fin&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Fin<B>> mapT<FAIL, A, B>(Validation<FAIL, Fin<A>> ma, Func<A, B> f) =>
            default(Trans<MValidation<FAIL, Fin<A>>, Validation<FAIL, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Map<MValidation<FAIL, Fin<B>>, Validation<FAIL, Fin<B>>, MFin<B>, Fin<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Validation<FAIL, Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Fin<A>>, Validation<FAIL, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Validation<FAIL, Fin<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Fin<A>>, Validation<FAIL, Fin<A>>, MFin<A>, Fin<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Validation<FAIL, Fin<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Fin<A>>, Validation<FAIL, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Validation<FAIL, Fin<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Fin<A>>, Validation<FAIL, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Validation&lt;FAIL, Fin&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Validation<FAIL, Fin<A>> ma, Action<A> f) =>
            default(Trans<MValidation<FAIL, Fin<A>>, Validation<FAIL, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Fin&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Validation&lt;FAIL, Fin&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Validation<FAIL, Fin<A>> filterT<FAIL, A>(Validation<FAIL, Fin<A>> ma, Func<A, bool> pred) =>
            default(Trans<MValidation<FAIL, Fin<A>>, Validation<FAIL, Fin<A>>, MFin<A>, Fin<A>, A>)
                .Bind<MValidation<FAIL, Fin<A>>, Validation<FAIL, Fin<A>>, MFin<A>, Fin<A>, A>(ma, 
                    a => pred(a)
                        ? default(MFin<A>).Pure(a)
                        : default(MFin<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Fin&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Validation<FAIL, Fin<A>> plusT<NUM, FAIL, A>(Validation<FAIL, Fin<A>> x, Validation<FAIL, Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Fin&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Validation<FAIL, Fin<A>> subtractT<NUM, FAIL, A>(Validation<FAIL, Fin<A>> x, Validation<FAIL, Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Fin&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Validation<FAIL, Fin<A>> productT<NUM, FAIL, A>(Validation<FAIL, Fin<A>> x, Validation<FAIL, Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Fin&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Validation<FAIL, Fin<A>> divideT<NUM, FAIL, A>(Validation<FAIL, Fin<A>> x, Validation<FAIL, Fin<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Fin&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Validation<FAIL, Fin<A>> appendT<SEMI, FAIL, A>(Validation<FAIL, Fin<A>> x, Validation<FAIL, Fin<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Validation<FAIL, Fin<A>> x, Validation<FAIL, Fin<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Fin&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Validation<FAIL, Fin<A>> x, Validation<FAIL, Fin<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Fin<B>> applyT<FAIL, A, B>(Func<A, B> fab, Validation<FAIL, Fin<A>> fa) =>
            default(ApplValidation<FAIL, Fin<A>, Fin<B>>).Apply(
                 default(MValidation<FAIL, Func<Fin<A>, Fin<B>>>).Pure((Fin<A> a) => default(ApplFin< A, B>).Apply(
                     default(MFin< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Fin&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Fin<B>> applyT<FAIL, A, B>(Validation<FAIL, Fin<Func<A, B>>> fab, Validation<FAIL, Fin<A>> fa) =>
            default(MValidation<FAIL, Fin<Func<A, B>>>).Bind<MValidation<FAIL, Fin<B>>, Validation<FAIL, Fin<B>>, Fin<B>>(fab, f =>
                default(MValidation<FAIL, Fin<A>>).Bind<MValidation<FAIL, Fin<B>>, Validation<FAIL, Fin<B>>, Fin<B>>(fa, a => 
                    default(MValidation<FAIL, Fin<B>>).Pure(default(ApplFin< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Fin&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Validation&lt;FAIL, Fin&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Fin&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Validation<FAIL, Fin<C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Validation<FAIL, Fin<A>> fa, Validation<FAIL, Fin<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Validation&lt;FAIL, Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Option&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Validation&lt;FAIL, Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Validation<FAIL, Option<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MValidation<FAIL, Option<A>>, Validation<FAIL, Option<A>>, MOption<A>, Option<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Validation&lt;FAIL, Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Option&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Validation&lt;FAIL, Option&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Validation<FAIL, Option<A>> ma) =>
            default(Trans<MValidation<FAIL, Option<A>>, Validation<FAIL, Option<A>>, MOption<A>, Option<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Validation&lt;FAIL, Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Option<B>> bindT<FAIL, A, B>(Validation<FAIL, Option<A>> ma, Func<A, Option<B>> f) =>
            default(Trans<MValidation<FAIL, Option<A>>, Validation<FAIL, Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MValidation<FAIL, Option<B>>, Validation<FAIL, Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Validation&lt;FAIL, Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Validation&lt;FAIL, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Validation&lt;FAIL, B&gt;&gt;`</returns>
        [Pure]
        public static Option<Validation<FAIL, B>> traverse<FAIL, A, B>(Validation<FAIL, Option<A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Validation&lt;FAIL, Option&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Option&lt;Validation&lt;FAIL, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Option&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static Option<Validation<FAIL, A>> sequence<FAIL, A>(Validation<FAIL, Option<A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Option&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Option<B>> mapT<FAIL, A, B>(Validation<FAIL, Option<A>> ma, Func<A, B> f) =>
            default(Trans<MValidation<FAIL, Option<A>>, Validation<FAIL, Option<A>>, MOption<A>, Option<A>, A>)
                .Map<MValidation<FAIL, Option<B>>, Validation<FAIL, Option<B>>, MOption<B>, Option<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Validation<FAIL, Option<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Option<A>>, Validation<FAIL, Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Validation<FAIL, Option<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Option<A>>, Validation<FAIL, Option<A>>, MOption<A>, Option<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Validation<FAIL, Option<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Option<A>>, Validation<FAIL, Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Validation<FAIL, Option<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Option<A>>, Validation<FAIL, Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Validation&lt;FAIL, Option&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Validation<FAIL, Option<A>> ma, Action<A> f) =>
            default(Trans<MValidation<FAIL, Option<A>>, Validation<FAIL, Option<A>>, MOption<A>, Option<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Option&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Validation&lt;FAIL, Option&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Validation<FAIL, Option<A>> filterT<FAIL, A>(Validation<FAIL, Option<A>> ma, Func<A, bool> pred) =>
            default(Trans<MValidation<FAIL, Option<A>>, Validation<FAIL, Option<A>>, MOption<A>, Option<A>, A>)
                .Bind<MValidation<FAIL, Option<A>>, Validation<FAIL, Option<A>>, MOption<A>, Option<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOption<A>).Pure(a)
                        : default(MOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Option&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Validation<FAIL, Option<A>> plusT<NUM, FAIL, A>(Validation<FAIL, Option<A>> x, Validation<FAIL, Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Option&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Validation<FAIL, Option<A>> subtractT<NUM, FAIL, A>(Validation<FAIL, Option<A>> x, Validation<FAIL, Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Option&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Validation<FAIL, Option<A>> productT<NUM, FAIL, A>(Validation<FAIL, Option<A>> x, Validation<FAIL, Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Option&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Validation<FAIL, Option<A>> divideT<NUM, FAIL, A>(Validation<FAIL, Option<A>> x, Validation<FAIL, Option<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Option&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Validation<FAIL, Option<A>> appendT<SEMI, FAIL, A>(Validation<FAIL, Option<A>> x, Validation<FAIL, Option<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Validation<FAIL, Option<A>> x, Validation<FAIL, Option<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Option&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Validation<FAIL, Option<A>> x, Validation<FAIL, Option<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Option&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Option<B>> applyT<FAIL, A, B>(Func<A, B> fab, Validation<FAIL, Option<A>> fa) =>
            default(ApplValidation<FAIL, Option<A>, Option<B>>).Apply(
                 default(MValidation<FAIL, Func<Option<A>, Option<B>>>).Pure((Option<A> a) => default(ApplOption< A, B>).Apply(
                     default(MOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Option&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Option&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Option<B>> applyT<FAIL, A, B>(Validation<FAIL, Option<Func<A, B>>> fab, Validation<FAIL, Option<A>> fa) =>
            default(MValidation<FAIL, Option<Func<A, B>>>).Bind<MValidation<FAIL, Option<B>>, Validation<FAIL, Option<B>>, Option<B>>(fab, f =>
                default(MValidation<FAIL, Option<A>>).Bind<MValidation<FAIL, Option<B>>, Validation<FAIL, Option<B>>, Option<B>>(fa, a => 
                    default(MValidation<FAIL, Option<B>>).Pure(default(ApplOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Option&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Validation&lt;FAIL, Option&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Option&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Validation<FAIL, Option<C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Validation<FAIL, Option<A>> fa, Validation<FAIL, Option<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class OptionUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Validation<FAIL, OptionUnsafe<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MValidation<FAIL, OptionUnsafe<A>>, Validation<FAIL, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Validation<FAIL, OptionUnsafe<A>> ma) =>
            default(Trans<MValidation<FAIL, OptionUnsafe<A>>, Validation<FAIL, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Validation&lt;FAIL, OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, OptionUnsafe<B>> bindT<FAIL, A, B>(Validation<FAIL, OptionUnsafe<A>> ma, Func<A, OptionUnsafe<B>> f) =>
            default(Trans<MValidation<FAIL, OptionUnsafe<A>>, Validation<FAIL, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MValidation<FAIL, OptionUnsafe<B>>, Validation<FAIL, OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Validation&lt;FAIL, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Validation&lt;FAIL, B&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Validation<FAIL, B>> traverse<FAIL, A, B>(Validation<FAIL, OptionUnsafe<A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`OptionUnsafe&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static OptionUnsafe<Validation<FAIL, A>> sequence<FAIL, A>(Validation<FAIL, OptionUnsafe<A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, OptionUnsafe<B>> mapT<FAIL, A, B>(Validation<FAIL, OptionUnsafe<A>> ma, Func<A, B> f) =>
            default(Trans<MValidation<FAIL, OptionUnsafe<A>>, Validation<FAIL, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Map<MValidation<FAIL, OptionUnsafe<B>>, Validation<FAIL, OptionUnsafe<B>>, MOptionUnsafe<B>, OptionUnsafe<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Validation<FAIL, OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, OptionUnsafe<A>>, Validation<FAIL, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Validation<FAIL, OptionUnsafe<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, OptionUnsafe<A>>, Validation<FAIL, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Validation<FAIL, OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, OptionUnsafe<A>>, Validation<FAIL, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Validation<FAIL, OptionUnsafe<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, OptionUnsafe<A>>, Validation<FAIL, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Validation<FAIL, OptionUnsafe<A>> ma, Action<A> f) =>
            default(Trans<MValidation<FAIL, OptionUnsafe<A>>, Validation<FAIL, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Validation<FAIL, OptionUnsafe<A>> filterT<FAIL, A>(Validation<FAIL, OptionUnsafe<A>> ma, Func<A, bool> pred) =>
            default(Trans<MValidation<FAIL, OptionUnsafe<A>>, Validation<FAIL, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>)
                .Bind<MValidation<FAIL, OptionUnsafe<A>>, Validation<FAIL, OptionUnsafe<A>>, MOptionUnsafe<A>, OptionUnsafe<A>, A>(ma, 
                    a => pred(a)
                        ? default(MOptionUnsafe<A>).Pure(a)
                        : default(MOptionUnsafe<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Validation<FAIL, OptionUnsafe<A>> plusT<NUM, FAIL, A>(Validation<FAIL, OptionUnsafe<A>> x, Validation<FAIL, OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Validation<FAIL, OptionUnsafe<A>> subtractT<NUM, FAIL, A>(Validation<FAIL, OptionUnsafe<A>> x, Validation<FAIL, OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Validation<FAIL, OptionUnsafe<A>> productT<NUM, FAIL, A>(Validation<FAIL, OptionUnsafe<A>> x, Validation<FAIL, OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Validation<FAIL, OptionUnsafe<A>> divideT<NUM, FAIL, A>(Validation<FAIL, OptionUnsafe<A>> x, Validation<FAIL, OptionUnsafe<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Validation<FAIL, OptionUnsafe<A>> appendT<SEMI, FAIL, A>(Validation<FAIL, OptionUnsafe<A>> x, Validation<FAIL, OptionUnsafe<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Validation<FAIL, OptionUnsafe<A>> x, Validation<FAIL, OptionUnsafe<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Validation<FAIL, OptionUnsafe<A>> x, Validation<FAIL, OptionUnsafe<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, OptionUnsafe<B>> applyT<FAIL, A, B>(Func<A, B> fab, Validation<FAIL, OptionUnsafe<A>> fa) =>
            default(ApplValidation<FAIL, OptionUnsafe<A>, OptionUnsafe<B>>).Apply(
                 default(MValidation<FAIL, Func<OptionUnsafe<A>, OptionUnsafe<B>>>).Pure((OptionUnsafe<A> a) => default(ApplOptionUnsafe< A, B>).Apply(
                     default(MOptionUnsafe< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, OptionUnsafe<B>> applyT<FAIL, A, B>(Validation<FAIL, OptionUnsafe<Func<A, B>>> fab, Validation<FAIL, OptionUnsafe<A>> fa) =>
            default(MValidation<FAIL, OptionUnsafe<Func<A, B>>>).Bind<MValidation<FAIL, OptionUnsafe<B>>, Validation<FAIL, OptionUnsafe<B>>, OptionUnsafe<B>>(fab, f =>
                default(MValidation<FAIL, OptionUnsafe<A>>).Bind<MValidation<FAIL, OptionUnsafe<B>>, Validation<FAIL, OptionUnsafe<B>>, OptionUnsafe<B>>(fa, a => 
                    default(MValidation<FAIL, OptionUnsafe<B>>).Pure(default(ApplOptionUnsafe< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Validation&lt;FAIL, OptionUnsafe&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, OptionUnsafe&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Validation<FAIL, OptionUnsafe<C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Validation<FAIL, OptionUnsafe<A>> fa, Validation<FAIL, OptionUnsafe<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, L, A>(Validation<FAIL, Either<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MValidation<FAIL, Either<L, A>>, Validation<FAIL, Either<L, A>>, MEither<L, A>, Either<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, L, A>(Validation<FAIL, Either<L, A>> ma) =>
            default(Trans<MValidation<FAIL, Either<L, A>>, Validation<FAIL, Either<L, A>>, MEither<L, A>, Either<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Validation&lt;FAIL, Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Either<L, B>> bindT<FAIL, L, A, B>(Validation<FAIL, Either<L, A>> ma, Func<A, Either<L, B>> f) =>
            default(Trans<MValidation<FAIL, Either<L, A>>, Validation<FAIL, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MValidation<FAIL, Either<L, B>>, Validation<FAIL, Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Validation&lt;FAIL, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Validation&lt;FAIL, B&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Validation<FAIL, B>> traverse<FAIL, L, A, B>(Validation<FAIL, Either<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Either&lt;L, Validation&lt;FAIL, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Either&lt;L, Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static Either<L, Validation<FAIL, A>> sequence<FAIL, L, A>(Validation<FAIL, Either<L, A>> ma) =>
            ma.Traverse<FAIL, L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Either&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Either<L, B>> mapT<FAIL, L, A, B>(Validation<FAIL, Either<L, A>> ma, Func<A, B> f) =>
            default(Trans<MValidation<FAIL, Either<L, A>>, Validation<FAIL, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Map<MValidation<FAIL, Either<L, B>>, Validation<FAIL, Either<L, B>>, MEither<L, B>, Either<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, L, A>(Validation<FAIL, Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Either<L, A>>, Validation<FAIL, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, L, A>(Validation<FAIL, Either<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Either<L, A>>, Validation<FAIL, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, L, A>(Validation<FAIL, Either<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Either<L, A>>, Validation<FAIL, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, L, A>(Validation<FAIL, Either<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Either<L, A>>, Validation<FAIL, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, L, A>(Validation<FAIL, Either<L, A>> ma, Action<A> f) =>
            default(Trans<MValidation<FAIL, Either<L, A>>, Validation<FAIL, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Validation<FAIL, Either<L, A>> filterT<FAIL, L, A>(Validation<FAIL, Either<L, A>> ma, Func<A, bool> pred) =>
            default(Trans<MValidation<FAIL, Either<L, A>>, Validation<FAIL, Either<L, A>>, MEither<L, A>, Either<L, A>, A>)
                .Bind<MValidation<FAIL, Either<L, A>>, Validation<FAIL, Either<L, A>>, MEither<L, A>, Either<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEither<L, A>).Pure(a)
                        : default(MEither<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Validation<FAIL, Either<L, A>> plusT<NUM, FAIL, L, A>(Validation<FAIL, Either<L, A>> x, Validation<FAIL, Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Validation<FAIL, Either<L, A>> subtractT<NUM, FAIL, L, A>(Validation<FAIL, Either<L, A>> x, Validation<FAIL, Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Validation<FAIL, Either<L, A>> productT<NUM, FAIL, L, A>(Validation<FAIL, Either<L, A>> x, Validation<FAIL, Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Validation<FAIL, Either<L, A>> divideT<NUM, FAIL, L, A>(Validation<FAIL, Either<L, A>> x, Validation<FAIL, Either<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Validation<FAIL, Either<L, A>> appendT<SEMI, FAIL, L, A>(Validation<FAIL, Either<L, A>> x, Validation<FAIL, Either<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, L, A>(Validation<FAIL, Either<L, A>> x, Validation<FAIL, Either<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Either&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, L, A>(Validation<FAIL, Either<L, A>> x, Validation<FAIL, Either<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Either<L, B>> applyT<FAIL, L, A, B>(Func<A, B> fab, Validation<FAIL, Either<L, A>> fa) =>
            default(ApplValidation<FAIL, Either<L, A>, Either<L, B>>).Apply(
                 default(MValidation<FAIL, Func<Either<L, A>, Either<L, B>>>).Pure((Either<L, A> a) => default(ApplEither<L, A, B>).Apply(
                     default(MEither<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Either&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Either<L, B>> applyT<FAIL, L, A, B>(Validation<FAIL, Either<L, Func<A, B>>> fab, Validation<FAIL, Either<L, A>> fa) =>
            default(MValidation<FAIL, Either<L, Func<A, B>>>).Bind<MValidation<FAIL, Either<L, B>>, Validation<FAIL, Either<L, B>>, Either<L, B>>(fab, f =>
                default(MValidation<FAIL, Either<L, A>>).Bind<MValidation<FAIL, Either<L, B>>, Validation<FAIL, Either<L, B>>, Either<L, B>>(fa, a => 
                    default(MValidation<FAIL, Either<L, B>>).Pure(default(ApplEither<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Validation&lt;FAIL, Either&lt;L, A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Either&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Validation<FAIL, Either<L, C>> applyT<FAIL, L, A, B, C>(Func<A, B, C> fabc, Validation<FAIL, Either<L, A>> fa, Validation<FAIL, Either<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class EitherUnsafeT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, L, A>(Validation<FAIL, EitherUnsafe<L, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MValidation<FAIL, EitherUnsafe<L, A>>, Validation<FAIL, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, L, A>(Validation<FAIL, EitherUnsafe<L, A>> ma) =>
            default(Trans<MValidation<FAIL, EitherUnsafe<L, A>>, Validation<FAIL, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Validation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, EitherUnsafe<L, B>> bindT<FAIL, L, A, B>(Validation<FAIL, EitherUnsafe<L, A>> ma, Func<A, EitherUnsafe<L, B>> f) =>
            default(Trans<MValidation<FAIL, EitherUnsafe<L, A>>, Validation<FAIL, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MValidation<FAIL, EitherUnsafe<L, B>>, Validation<FAIL, EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Validation&lt;FAIL, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Validation&lt;FAIL, B&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Validation<FAIL, B>> traverse<FAIL, L, A, B>(Validation<FAIL, EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, L, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, L, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`EitherUnsafe&lt;L, Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static EitherUnsafe<L, Validation<FAIL, A>> sequence<FAIL, L, A>(Validation<FAIL, EitherUnsafe<L, A>> ma) =>
            ma.Traverse<FAIL, L, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, EitherUnsafe<L, B>> mapT<FAIL, L, A, B>(Validation<FAIL, EitherUnsafe<L, A>> ma, Func<A, B> f) =>
            default(Trans<MValidation<FAIL, EitherUnsafe<L, A>>, Validation<FAIL, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Map<MValidation<FAIL, EitherUnsafe<L, B>>, Validation<FAIL, EitherUnsafe<L, B>>, MEitherUnsafe<L, B>, EitherUnsafe<L, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, L, A>(Validation<FAIL, EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, EitherUnsafe<L, A>>, Validation<FAIL, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, L, A>(Validation<FAIL, EitherUnsafe<L, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, EitherUnsafe<L, A>>, Validation<FAIL, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, L, A>(Validation<FAIL, EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, EitherUnsafe<L, A>>, Validation<FAIL, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, L, A>(Validation<FAIL, EitherUnsafe<L, A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, EitherUnsafe<L, A>>, Validation<FAIL, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, L, A>(Validation<FAIL, EitherUnsafe<L, A>> ma, Action<A> f) =>
            default(Trans<MValidation<FAIL, EitherUnsafe<L, A>>, Validation<FAIL, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Validation<FAIL, EitherUnsafe<L, A>> filterT<FAIL, L, A>(Validation<FAIL, EitherUnsafe<L, A>> ma, Func<A, bool> pred) =>
            default(Trans<MValidation<FAIL, EitherUnsafe<L, A>>, Validation<FAIL, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>)
                .Bind<MValidation<FAIL, EitherUnsafe<L, A>>, Validation<FAIL, EitherUnsafe<L, A>>, MEitherUnsafe<L, A>, EitherUnsafe<L, A>, A>(ma, 
                    a => pred(a)
                        ? default(MEitherUnsafe<L, A>).Pure(a)
                        : default(MEitherUnsafe<L, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Validation<FAIL, EitherUnsafe<L, A>> plusT<NUM, FAIL, L, A>(Validation<FAIL, EitherUnsafe<L, A>> x, Validation<FAIL, EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Validation<FAIL, EitherUnsafe<L, A>> subtractT<NUM, FAIL, L, A>(Validation<FAIL, EitherUnsafe<L, A>> x, Validation<FAIL, EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Validation<FAIL, EitherUnsafe<L, A>> productT<NUM, FAIL, L, A>(Validation<FAIL, EitherUnsafe<L, A>> x, Validation<FAIL, EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Validation<FAIL, EitherUnsafe<L, A>> divideT<NUM, FAIL, L, A>(Validation<FAIL, EitherUnsafe<L, A>> x, Validation<FAIL, EitherUnsafe<L, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Validation<FAIL, EitherUnsafe<L, A>> appendT<SEMI, FAIL, L, A>(Validation<FAIL, EitherUnsafe<L, A>> x, Validation<FAIL, EitherUnsafe<L, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, L, A>(Validation<FAIL, EitherUnsafe<L, A>> x, Validation<FAIL, EitherUnsafe<L, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, L, A>(Validation<FAIL, EitherUnsafe<L, A>> x, Validation<FAIL, EitherUnsafe<L, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, EitherUnsafe<L, B>> applyT<FAIL, L, A, B>(Func<A, B> fab, Validation<FAIL, EitherUnsafe<L, A>> fa) =>
            default(ApplValidation<FAIL, EitherUnsafe<L, A>, EitherUnsafe<L, B>>).Apply(
                 default(MValidation<FAIL, Func<EitherUnsafe<L, A>, EitherUnsafe<L, B>>>).Pure((EitherUnsafe<L, A> a) => default(ApplEitherUnsafe<L, A, B>).Apply(
                     default(MEitherUnsafe<L, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, EitherUnsafe<L, B>> applyT<FAIL, L, A, B>(Validation<FAIL, EitherUnsafe<L, Func<A, B>>> fab, Validation<FAIL, EitherUnsafe<L, A>> fa) =>
            default(MValidation<FAIL, EitherUnsafe<L, Func<A, B>>>).Bind<MValidation<FAIL, EitherUnsafe<L, B>>, Validation<FAIL, EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fab, f =>
                default(MValidation<FAIL, EitherUnsafe<L, A>>).Bind<MValidation<FAIL, EitherUnsafe<L, B>>, Validation<FAIL, EitherUnsafe<L, B>>, EitherUnsafe<L, B>>(fa, a => 
                    default(MValidation<FAIL, EitherUnsafe<L, B>>).Pure(default(ApplEitherUnsafe<L, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Validation&lt;FAIL, EitherUnsafe&lt;L, A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, EitherUnsafe&lt;L, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Validation<FAIL, EitherUnsafe<L, C>> applyT<FAIL, L, A, B, C>(Func<A, B, C> fabc, Validation<FAIL, EitherUnsafe<L, A>> fa, Validation<FAIL, EitherUnsafe<L, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Validation&lt;FAIL, Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Try&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Validation&lt;FAIL, Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Validation<FAIL, Try<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MValidation<FAIL, Try<A>>, Validation<FAIL, Try<A>>, MTry<A>, Try<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Validation&lt;FAIL, Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Try&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Validation&lt;FAIL, Try&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Validation<FAIL, Try<A>> ma) =>
            default(Trans<MValidation<FAIL, Try<A>>, Validation<FAIL, Try<A>>, MTry<A>, Try<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Validation&lt;FAIL, Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Try<B>> bindT<FAIL, A, B>(Validation<FAIL, Try<A>> ma, Func<A, Try<B>> f) =>
            default(Trans<MValidation<FAIL, Try<A>>, Validation<FAIL, Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MValidation<FAIL, Try<B>>, Validation<FAIL, Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Validation&lt;FAIL, Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Validation&lt;FAIL, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Validation&lt;FAIL, B&gt;&gt;`</returns>
        [Pure]
        public static Try<Validation<FAIL, B>> traverse<FAIL, A, B>(Validation<FAIL, Try<A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Validation&lt;FAIL, Try&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Try&lt;Validation&lt;FAIL, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Try&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static Try<Validation<FAIL, A>> sequence<FAIL, A>(Validation<FAIL, Try<A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Try&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Try<B>> mapT<FAIL, A, B>(Validation<FAIL, Try<A>> ma, Func<A, B> f) =>
            default(Trans<MValidation<FAIL, Try<A>>, Validation<FAIL, Try<A>>, MTry<A>, Try<A>, A>)
                .Map<MValidation<FAIL, Try<B>>, Validation<FAIL, Try<B>>, MTry<B>, Try<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Validation<FAIL, Try<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Try<A>>, Validation<FAIL, Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Validation<FAIL, Try<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Try<A>>, Validation<FAIL, Try<A>>, MTry<A>, Try<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Validation<FAIL, Try<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Try<A>>, Validation<FAIL, Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Validation<FAIL, Try<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Try<A>>, Validation<FAIL, Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Validation&lt;FAIL, Try&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Validation<FAIL, Try<A>> ma, Action<A> f) =>
            default(Trans<MValidation<FAIL, Try<A>>, Validation<FAIL, Try<A>>, MTry<A>, Try<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Try&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Validation&lt;FAIL, Try&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Validation<FAIL, Try<A>> filterT<FAIL, A>(Validation<FAIL, Try<A>> ma, Func<A, bool> pred) =>
            default(Trans<MValidation<FAIL, Try<A>>, Validation<FAIL, Try<A>>, MTry<A>, Try<A>, A>)
                .Bind<MValidation<FAIL, Try<A>>, Validation<FAIL, Try<A>>, MTry<A>, Try<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTry<A>).Pure(a)
                        : default(MTry<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Try&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Validation<FAIL, Try<A>> plusT<NUM, FAIL, A>(Validation<FAIL, Try<A>> x, Validation<FAIL, Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Try&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Validation<FAIL, Try<A>> subtractT<NUM, FAIL, A>(Validation<FAIL, Try<A>> x, Validation<FAIL, Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Try&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Validation<FAIL, Try<A>> productT<NUM, FAIL, A>(Validation<FAIL, Try<A>> x, Validation<FAIL, Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Try&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Validation<FAIL, Try<A>> divideT<NUM, FAIL, A>(Validation<FAIL, Try<A>> x, Validation<FAIL, Try<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Try&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Validation<FAIL, Try<A>> appendT<SEMI, FAIL, A>(Validation<FAIL, Try<A>> x, Validation<FAIL, Try<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Validation<FAIL, Try<A>> x, Validation<FAIL, Try<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Try&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Validation<FAIL, Try<A>> x, Validation<FAIL, Try<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Try&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Try<B>> applyT<FAIL, A, B>(Func<A, B> fab, Validation<FAIL, Try<A>> fa) =>
            default(ApplValidation<FAIL, Try<A>, Try<B>>).Apply(
                 default(MValidation<FAIL, Func<Try<A>, Try<B>>>).Pure((Try<A> a) => default(ApplTry< A, B>).Apply(
                     default(MTry< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Try&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Try&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Try<B>> applyT<FAIL, A, B>(Validation<FAIL, Try<Func<A, B>>> fab, Validation<FAIL, Try<A>> fa) =>
            default(MValidation<FAIL, Try<Func<A, B>>>).Bind<MValidation<FAIL, Try<B>>, Validation<FAIL, Try<B>>, Try<B>>(fab, f =>
                default(MValidation<FAIL, Try<A>>).Bind<MValidation<FAIL, Try<B>>, Validation<FAIL, Try<B>>, Try<B>>(fa, a => 
                    default(MValidation<FAIL, Try<B>>).Pure(default(ApplTry< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Try&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Validation&lt;FAIL, Try&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Try&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Validation<FAIL, Try<C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Validation<FAIL, Try<A>> fa, Validation<FAIL, Try<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class TryOptionT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Validation<FAIL, TryOption<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MValidation<FAIL, TryOption<A>>, Validation<FAIL, TryOption<A>>, MTryOption<A>, TryOption<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Validation<FAIL, TryOption<A>> ma) =>
            default(Trans<MValidation<FAIL, TryOption<A>>, Validation<FAIL, TryOption<A>>, MTryOption<A>, TryOption<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Validation&lt;FAIL, TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, TryOption<B>> bindT<FAIL, A, B>(Validation<FAIL, TryOption<A>> ma, Func<A, TryOption<B>> f) =>
            default(Trans<MValidation<FAIL, TryOption<A>>, Validation<FAIL, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MValidation<FAIL, TryOption<B>>, Validation<FAIL, TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Validation&lt;FAIL, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Validation&lt;FAIL, B&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Validation<FAIL, B>> traverse<FAIL, A, B>(Validation<FAIL, TryOption<A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `TryOption&lt;Validation&lt;FAIL, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`TryOption&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static TryOption<Validation<FAIL, A>> sequence<FAIL, A>(Validation<FAIL, TryOption<A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, TryOption&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, TryOption<B>> mapT<FAIL, A, B>(Validation<FAIL, TryOption<A>> ma, Func<A, B> f) =>
            default(Trans<MValidation<FAIL, TryOption<A>>, Validation<FAIL, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Map<MValidation<FAIL, TryOption<B>>, Validation<FAIL, TryOption<B>>, MTryOption<B>, TryOption<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Validation<FAIL, TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, TryOption<A>>, Validation<FAIL, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Validation<FAIL, TryOption<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, TryOption<A>>, Validation<FAIL, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Validation<FAIL, TryOption<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, TryOption<A>>, Validation<FAIL, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Validation<FAIL, TryOption<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, TryOption<A>>, Validation<FAIL, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Validation<FAIL, TryOption<A>> ma, Action<A> f) =>
            default(Trans<MValidation<FAIL, TryOption<A>>, Validation<FAIL, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Validation<FAIL, TryOption<A>> filterT<FAIL, A>(Validation<FAIL, TryOption<A>> ma, Func<A, bool> pred) =>
            default(Trans<MValidation<FAIL, TryOption<A>>, Validation<FAIL, TryOption<A>>, MTryOption<A>, TryOption<A>, A>)
                .Bind<MValidation<FAIL, TryOption<A>>, Validation<FAIL, TryOption<A>>, MTryOption<A>, TryOption<A>, A>(ma, 
                    a => pred(a)
                        ? default(MTryOption<A>).Pure(a)
                        : default(MTryOption<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Validation<FAIL, TryOption<A>> plusT<NUM, FAIL, A>(Validation<FAIL, TryOption<A>> x, Validation<FAIL, TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Validation<FAIL, TryOption<A>> subtractT<NUM, FAIL, A>(Validation<FAIL, TryOption<A>> x, Validation<FAIL, TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Validation<FAIL, TryOption<A>> productT<NUM, FAIL, A>(Validation<FAIL, TryOption<A>> x, Validation<FAIL, TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Validation<FAIL, TryOption<A>> divideT<NUM, FAIL, A>(Validation<FAIL, TryOption<A>> x, Validation<FAIL, TryOption<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Validation<FAIL, TryOption<A>> appendT<SEMI, FAIL, A>(Validation<FAIL, TryOption<A>> x, Validation<FAIL, TryOption<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Validation<FAIL, TryOption<A>> x, Validation<FAIL, TryOption<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, TryOption&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Validation<FAIL, TryOption<A>> x, Validation<FAIL, TryOption<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, TryOption<B>> applyT<FAIL, A, B>(Func<A, B> fab, Validation<FAIL, TryOption<A>> fa) =>
            default(ApplValidation<FAIL, TryOption<A>, TryOption<B>>).Apply(
                 default(MValidation<FAIL, Func<TryOption<A>, TryOption<B>>>).Pure((TryOption<A> a) => default(ApplTryOption< A, B>).Apply(
                     default(MTryOption< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, TryOption&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, TryOption<B>> applyT<FAIL, A, B>(Validation<FAIL, TryOption<Func<A, B>>> fab, Validation<FAIL, TryOption<A>> fa) =>
            default(MValidation<FAIL, TryOption<Func<A, B>>>).Bind<MValidation<FAIL, TryOption<B>>, Validation<FAIL, TryOption<B>>, TryOption<B>>(fab, f =>
                default(MValidation<FAIL, TryOption<A>>).Bind<MValidation<FAIL, TryOption<B>>, Validation<FAIL, TryOption<B>>, TryOption<B>>(fa, a => 
                    default(MValidation<FAIL, TryOption<B>>).Pure(default(ApplTryOption< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Validation&lt;FAIL, TryOption&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, TryOption&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Validation<FAIL, TryOption<C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Validation<FAIL, TryOption<A>> fa, Validation<FAIL, TryOption<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class IEnumerableT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Validation<FAIL, IEnumerable<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MValidation<FAIL, IEnumerable<A>>, Validation<FAIL, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Validation<FAIL, IEnumerable<A>> ma) =>
            default(Trans<MValidation<FAIL, IEnumerable<A>>, Validation<FAIL, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Validation&lt;FAIL, IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, IEnumerable<B>> bindT<FAIL, A, B>(Validation<FAIL, IEnumerable<A>> ma, Func<A, IEnumerable<B>> f) =>
            default(Trans<MValidation<FAIL, IEnumerable<A>>, Validation<FAIL, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MValidation<FAIL, IEnumerable<B>>, Validation<FAIL, IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Validation&lt;FAIL, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Validation&lt;FAIL, B&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Validation<FAIL, B>> traverse<FAIL, A, B>(Validation<FAIL, IEnumerable<A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`IEnumerable&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static IEnumerable<Validation<FAIL, A>> sequence<FAIL, A>(Validation<FAIL, IEnumerable<A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, IEnumerable&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, IEnumerable<B>> mapT<FAIL, A, B>(Validation<FAIL, IEnumerable<A>> ma, Func<A, B> f) =>
            default(Trans<MValidation<FAIL, IEnumerable<A>>, Validation<FAIL, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Map<MValidation<FAIL, IEnumerable<B>>, Validation<FAIL, IEnumerable<B>>, MEnumerable<B>, IEnumerable<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Validation<FAIL, IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, IEnumerable<A>>, Validation<FAIL, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Validation<FAIL, IEnumerable<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, IEnumerable<A>>, Validation<FAIL, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Validation<FAIL, IEnumerable<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, IEnumerable<A>>, Validation<FAIL, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Validation<FAIL, IEnumerable<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, IEnumerable<A>>, Validation<FAIL, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Validation<FAIL, IEnumerable<A>> ma, Action<A> f) =>
            default(Trans<MValidation<FAIL, IEnumerable<A>>, Validation<FAIL, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Validation<FAIL, IEnumerable<A>> filterT<FAIL, A>(Validation<FAIL, IEnumerable<A>> ma, Func<A, bool> pred) =>
            default(Trans<MValidation<FAIL, IEnumerable<A>>, Validation<FAIL, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>)
                .Bind<MValidation<FAIL, IEnumerable<A>>, Validation<FAIL, IEnumerable<A>>, MEnumerable<A>, IEnumerable<A>, A>(ma, 
                    a => pred(a)
                        ? default(MEnumerable<A>).Pure(a)
                        : default(MEnumerable<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Validation<FAIL, IEnumerable<A>> plusT<NUM, FAIL, A>(Validation<FAIL, IEnumerable<A>> x, Validation<FAIL, IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Validation<FAIL, IEnumerable<A>> subtractT<NUM, FAIL, A>(Validation<FAIL, IEnumerable<A>> x, Validation<FAIL, IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Validation<FAIL, IEnumerable<A>> productT<NUM, FAIL, A>(Validation<FAIL, IEnumerable<A>> x, Validation<FAIL, IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Validation<FAIL, IEnumerable<A>> divideT<NUM, FAIL, A>(Validation<FAIL, IEnumerable<A>> x, Validation<FAIL, IEnumerable<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Validation<FAIL, IEnumerable<A>> appendT<SEMI, FAIL, A>(Validation<FAIL, IEnumerable<A>> x, Validation<FAIL, IEnumerable<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Validation<FAIL, IEnumerable<A>> x, Validation<FAIL, IEnumerable<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Validation<FAIL, IEnumerable<A>> x, Validation<FAIL, IEnumerable<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, IEnumerable<B>> applyT<FAIL, A, B>(Func<A, B> fab, Validation<FAIL, IEnumerable<A>> fa) =>
            default(ApplValidation<FAIL, IEnumerable<A>, IEnumerable<B>>).Apply(
                 default(MValidation<FAIL, Func<IEnumerable<A>, IEnumerable<B>>>).Pure((IEnumerable<A> a) => default(ApplEnumerable< A, B>).Apply(
                     default(MEnumerable< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, IEnumerable&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, IEnumerable<B>> applyT<FAIL, A, B>(Validation<FAIL, IEnumerable<Func<A, B>>> fab, Validation<FAIL, IEnumerable<A>> fa) =>
            default(MValidation<FAIL, IEnumerable<Func<A, B>>>).Bind<MValidation<FAIL, IEnumerable<B>>, Validation<FAIL, IEnumerable<B>>, IEnumerable<B>>(fab, f =>
                default(MValidation<FAIL, IEnumerable<A>>).Bind<MValidation<FAIL, IEnumerable<B>>, Validation<FAIL, IEnumerable<B>>, IEnumerable<B>>(fa, a => 
                    default(MValidation<FAIL, IEnumerable<B>>).Pure(default(ApplEnumerable< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Validation&lt;FAIL, IEnumerable&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, IEnumerable&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Validation<FAIL, IEnumerable<C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Validation<FAIL, IEnumerable<A>> fa, Validation<FAIL, IEnumerable<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SeqT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Validation&lt;FAIL, Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Seq&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Validation&lt;FAIL, Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Validation<FAIL, Seq<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MValidation<FAIL, Seq<A>>, Validation<FAIL, Seq<A>>, MSeq<A>, Seq<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Validation&lt;FAIL, Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Seq&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Validation&lt;FAIL, Seq&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Validation<FAIL, Seq<A>> ma) =>
            default(Trans<MValidation<FAIL, Seq<A>>, Validation<FAIL, Seq<A>>, MSeq<A>, Seq<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Validation&lt;FAIL, Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Seq<B>> bindT<FAIL, A, B>(Validation<FAIL, Seq<A>> ma, Func<A, Seq<B>> f) =>
            default(Trans<MValidation<FAIL, Seq<A>>, Validation<FAIL, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MValidation<FAIL, Seq<B>>, Validation<FAIL, Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Validation&lt;FAIL, Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Validation&lt;FAIL, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Validation&lt;FAIL, B&gt;&gt;`</returns>
        [Pure]
        public static Seq<Validation<FAIL, B>> traverse<FAIL, A, B>(Validation<FAIL, Seq<A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Validation&lt;FAIL, Seq&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Seq&lt;Validation&lt;FAIL, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Seq&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static Seq<Validation<FAIL, A>> sequence<FAIL, A>(Validation<FAIL, Seq<A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Seq&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Seq<B>> mapT<FAIL, A, B>(Validation<FAIL, Seq<A>> ma, Func<A, B> f) =>
            default(Trans<MValidation<FAIL, Seq<A>>, Validation<FAIL, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Map<MValidation<FAIL, Seq<B>>, Validation<FAIL, Seq<B>>, MSeq<B>, Seq<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Validation<FAIL, Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Seq<A>>, Validation<FAIL, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Validation<FAIL, Seq<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Seq<A>>, Validation<FAIL, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Validation<FAIL, Seq<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Seq<A>>, Validation<FAIL, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Validation<FAIL, Seq<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Seq<A>>, Validation<FAIL, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Validation&lt;FAIL, Seq&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Validation<FAIL, Seq<A>> ma, Action<A> f) =>
            default(Trans<MValidation<FAIL, Seq<A>>, Validation<FAIL, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Seq&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Validation&lt;FAIL, Seq&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Validation<FAIL, Seq<A>> filterT<FAIL, A>(Validation<FAIL, Seq<A>> ma, Func<A, bool> pred) =>
            default(Trans<MValidation<FAIL, Seq<A>>, Validation<FAIL, Seq<A>>, MSeq<A>, Seq<A>, A>)
                .Bind<MValidation<FAIL, Seq<A>>, Validation<FAIL, Seq<A>>, MSeq<A>, Seq<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSeq<A>).Pure(a)
                        : default(MSeq<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Seq&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Validation<FAIL, Seq<A>> plusT<NUM, FAIL, A>(Validation<FAIL, Seq<A>> x, Validation<FAIL, Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Seq&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Validation<FAIL, Seq<A>> subtractT<NUM, FAIL, A>(Validation<FAIL, Seq<A>> x, Validation<FAIL, Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Seq&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Validation<FAIL, Seq<A>> productT<NUM, FAIL, A>(Validation<FAIL, Seq<A>> x, Validation<FAIL, Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Seq&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Validation<FAIL, Seq<A>> divideT<NUM, FAIL, A>(Validation<FAIL, Seq<A>> x, Validation<FAIL, Seq<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Seq&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Validation<FAIL, Seq<A>> appendT<SEMI, FAIL, A>(Validation<FAIL, Seq<A>> x, Validation<FAIL, Seq<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Validation<FAIL, Seq<A>> x, Validation<FAIL, Seq<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Seq&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Validation<FAIL, Seq<A>> x, Validation<FAIL, Seq<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Seq<B>> applyT<FAIL, A, B>(Func<A, B> fab, Validation<FAIL, Seq<A>> fa) =>
            default(ApplValidation<FAIL, Seq<A>, Seq<B>>).Apply(
                 default(MValidation<FAIL, Func<Seq<A>, Seq<B>>>).Pure((Seq<A> a) => default(ApplSeq< A, B>).Apply(
                     default(MSeq< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Seq&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Seq<B>> applyT<FAIL, A, B>(Validation<FAIL, Seq<Func<A, B>>> fab, Validation<FAIL, Seq<A>> fa) =>
            default(MValidation<FAIL, Seq<Func<A, B>>>).Bind<MValidation<FAIL, Seq<B>>, Validation<FAIL, Seq<B>>, Seq<B>>(fab, f =>
                default(MValidation<FAIL, Seq<A>>).Bind<MValidation<FAIL, Seq<B>>, Validation<FAIL, Seq<B>>, Seq<B>>(fa, a => 
                    default(MValidation<FAIL, Seq<B>>).Pure(default(ApplSeq< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Seq&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Validation&lt;FAIL, Seq&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Seq&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Validation<FAIL, Seq<C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Validation<FAIL, Seq<A>> fa, Validation<FAIL, Seq<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class SetT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Validation&lt;FAIL, Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Set&lt;A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Validation&lt;FAIL, Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Validation<FAIL, Set<A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MValidation<FAIL, Set<A>>, Validation<FAIL, Set<A>>, MSet<A>, Set<A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Validation&lt;FAIL, Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Set&lt;A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Validation&lt;FAIL, Set&lt;A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Validation<FAIL, Set<A>> ma) =>
            default(Trans<MValidation<FAIL, Set<A>>, Validation<FAIL, Set<A>>, MSet<A>, Set<A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Validation&lt;FAIL, Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Set<B>> bindT<FAIL, A, B>(Validation<FAIL, Set<A>> ma, Func<A, Set<B>> f) =>
            default(Trans<MValidation<FAIL, Set<A>>, Validation<FAIL, Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MValidation<FAIL, Set<B>>, Validation<FAIL, Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Validation&lt;FAIL, Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Validation&lt;FAIL, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Validation&lt;FAIL, B&gt;&gt;`</returns>
        [Pure]
        public static Set<Validation<FAIL, B>> traverse<FAIL, A, B>(Validation<FAIL, Set<A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Validation&lt;FAIL, Set&lt;A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Set&lt;Validation&lt;FAIL, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Set&lt;Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static Set<Validation<FAIL, A>> sequence<FAIL, A>(Validation<FAIL, Set<A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Set&lt;B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Set<B>> mapT<FAIL, A, B>(Validation<FAIL, Set<A>> ma, Func<A, B> f) =>
            default(Trans<MValidation<FAIL, Set<A>>, Validation<FAIL, Set<A>>, MSet<A>, Set<A>, A>)
                .Map<MValidation<FAIL, Set<B>>, Validation<FAIL, Set<B>>, MSet<B>, Set<B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Validation<FAIL, Set<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Set<A>>, Validation<FAIL, Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Validation<FAIL, Set<A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Set<A>>, Validation<FAIL, Set<A>>, MSet<A>, Set<A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Validation<FAIL, Set<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Set<A>>, Validation<FAIL, Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Validation<FAIL, Set<A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Set<A>>, Validation<FAIL, Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Validation&lt;FAIL, Set&lt;A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Validation<FAIL, Set<A>> ma, Action<A> f) =>
            default(Trans<MValidation<FAIL, Set<A>>, Validation<FAIL, Set<A>>, MSet<A>, Set<A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Set&lt;A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Validation&lt;FAIL, Set&lt;A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Validation<FAIL, Set<A>> filterT<FAIL, A>(Validation<FAIL, Set<A>> ma, Func<A, bool> pred) =>
            default(Trans<MValidation<FAIL, Set<A>>, Validation<FAIL, Set<A>>, MSet<A>, Set<A>, A>)
                .Bind<MValidation<FAIL, Set<A>>, Validation<FAIL, Set<A>>, MSet<A>, Set<A>, A>(ma, 
                    a => pred(a)
                        ? default(MSet<A>).Pure(a)
                        : default(MSet<A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Set&lt;A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Validation<FAIL, Set<A>> plusT<NUM, FAIL, A>(Validation<FAIL, Set<A>> x, Validation<FAIL, Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Set&lt;A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Validation<FAIL, Set<A>> subtractT<NUM, FAIL, A>(Validation<FAIL, Set<A>> x, Validation<FAIL, Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Set&lt;A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Validation<FAIL, Set<A>> productT<NUM, FAIL, A>(Validation<FAIL, Set<A>> x, Validation<FAIL, Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Set&lt;A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Validation<FAIL, Set<A>> divideT<NUM, FAIL, A>(Validation<FAIL, Set<A>> x, Validation<FAIL, Set<A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Set&lt;A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Validation<FAIL, Set<A>> appendT<SEMI, FAIL, A>(Validation<FAIL, Set<A>> x, Validation<FAIL, Set<A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Validation<FAIL, Set<A>> x, Validation<FAIL, Set<A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Set&lt;A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Validation<FAIL, Set<A>> x, Validation<FAIL, Set<A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Set&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Set<B>> applyT<FAIL, A, B>(Func<A, B> fab, Validation<FAIL, Set<A>> fa) =>
            default(ApplValidation<FAIL, Set<A>, Set<B>>).Apply(
                 default(MValidation<FAIL, Func<Set<A>, Set<B>>>).Pure((Set<A> a) => default(ApplSet< A, B>).Apply(
                     default(MSet< Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Set&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Set&lt;B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Set<B>> applyT<FAIL, A, B>(Validation<FAIL, Set<Func<A, B>>> fab, Validation<FAIL, Set<A>> fa) =>
            default(MValidation<FAIL, Set<Func<A, B>>>).Bind<MValidation<FAIL, Set<B>>, Validation<FAIL, Set<B>>, Set<B>>(fab, f =>
                default(MValidation<FAIL, Set<A>>).Bind<MValidation<FAIL, Set<B>>, Validation<FAIL, Set<B>>, Set<B>>(fa, a => 
                    default(MValidation<FAIL, Set<B>>).Pure(default(ApplSet< A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Set&lt;A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Validation&lt;FAIL, Set&lt;A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Set&lt;B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Validation<FAIL, Set<C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Validation<FAIL, Set<A>> fa, Validation<FAIL, Set<B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
    public static partial class ValidationT
    {
        /// <summary>
        /// Finds total of all the `Num<A>`s in `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` to perform the sum operation on</param>
        /// <returns>Total of all `Num<A>`s in `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static A sumT<NumA, FAIL, A>(Validation<FAIL, Validation<FAIL, A>> ma)
            where NumA : struct, Num<A> =>
                default(Trans<MValidation<FAIL, Validation<FAIL, A>>, Validation<FAIL, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, NumA, A>).Sum(ma);

        /// <summary>
        /// Finds the number of bound values in the `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` to perform the count operation on</param>
        /// <returns>Number of `A`s in `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static int countT<FAIL, A>(Validation<FAIL, Validation<FAIL, A>> ma) =>
            default(Trans<MValidation<FAIL, Validation<FAIL, A>>, Validation<FAIL, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>).Count(ma);

        /// <summary>
        /// Monadic bind operation
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The bind function to apply</param>
        /// <returns>`Validation&lt;FAIL, Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Validation<FAIL, B>> bindT<FAIL, A, B>(Validation<FAIL, Validation<FAIL, A>> ma, Func<A, Validation<FAIL, B>> f) =>
            default(Trans<MValidation<FAIL, Validation<FAIL, A>>, Validation<FAIL, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MValidation<FAIL, Validation<FAIL, B>>, Validation<FAIL, Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Traverse operation.  Takes a value of type `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Validation&lt;FAIL, B&gt;&gt;` (by applying `a` to `f`).  So 
        /// it 'flips' the types whilst maintaining the rules of the inner and outer 
        /// types.  
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Validation&lt;FAIL, B&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Validation<FAIL, B>> traverse<FAIL, A, B>(Validation<FAIL, Validation<FAIL, A>> ma, Func<A, B> f) =>
            ma.Traverse<FAIL, A, B>(f);

        /// <summary>
        /// Sequence operation.  Takes a value of type `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;`, traverses the inner
        /// values of type `A`, and returns `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;`.  So it 'flips' the types
        /// whilst maintaining the rules of the inner and outer types.  This is the
        /// same as calling `ma.Traverse<FAIL, A, A>(identity)`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;`</returns>
        [Pure]
        public static Validation<FAIL, Validation<FAIL, A>> sequence<FAIL, A>(Validation<FAIL, Validation<FAIL, A>> ma) =>
            ma.Traverse<FAIL, A, A>(identity);

        /// <summary>
        /// Functor map operation.  This maps the bound value(s) of the nested monads
        /// using the provided function `f`.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The mapping function to apply</param>
        /// <returns>`Validation&lt;FAIL, Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `f(a)`</returns>
        [Pure]
        public static Validation<FAIL, Validation<FAIL, B>> mapT<FAIL, A, B>(Validation<FAIL, Validation<FAIL, A>> ma, Func<A, B> f) =>
            default(Trans<MValidation<FAIL, Validation<FAIL, A>>, Validation<FAIL, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Map<MValidation<FAIL, Validation<FAIL, B>>, Validation<FAIL, Validation<FAIL, B>>, MValidation<FAIL, B>, Validation<FAIL, B>, B>(ma, f);

        /// <summary>
        /// Create an aggregate value by traversing the bound value(s) of the nested
        /// monadic type, whilst applying the aggregate state and bound value to `f` to
        /// produce the new aggregate state (which is then returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldT<S, FAIL, A>(Validation<FAIL, Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Validation<FAIL, A>>, Validation<FAIL, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, state, f);

        /// <summary>
        /// Create an aggregate value by traversing (in the opposite direction to `Fold`) 
        /// the bound value(s) of the nested monadic type, whilst applying the aggregate 
        /// state and bound value to `f` to produce the new aggregate state (which is then 
        /// returned).
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="S">Aggregate state type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The folding function to apply</param>
        /// <returns>The new aggregate state (which is then returned)</returns>
        [Pure]
        public static S foldBackT<S, FAIL, A>(Validation<FAIL, Validation<FAIL, A>> ma, S state, Func<S, A, S> f) =>
            default(Trans<MValidation<FAIL, Validation<FAIL, A>>, Validation<FAIL, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .FoldBack(ma, state, f);

        /// <summary>
        /// Returns true if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if any of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then false is returned.</returns>
        [Pure]
        public static bool existsT<FAIL, A>(Validation<FAIL, Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Validation<FAIL, A>>, Validation<FAIL, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, false, (s, x) => s || f(x));

        /// <summary>
        /// Returns true if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>True if all of the bound value(s) return true when applied to the 
        /// predicate `f`.  If there are no bound values then true is returned.</returns>
        [Pure]
        public static bool forallT<FAIL, A>(Validation<FAIL, Validation<FAIL, A>> ma, Func<A, bool> f) =>
            default(Trans<MValidation<FAIL, Validation<FAIL, A>>, Validation<FAIL, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, true, (s, x) => s && f(x));

        /// <summary>
        /// Side-effecting operation to iterate all of the bound value(s) in `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The action that contains the side-effects</param>
        public static Unit iterT<FAIL, A>(Validation<FAIL, Validation<FAIL, A>> ma, Action<A> f) =>
            default(Trans<MValidation<FAIL, Validation<FAIL, A>>, Validation<FAIL, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Fold(ma, unit, (s, x) => { f(x); return unit; });

        /// <summary>
        /// Filter operation.  Applies the bound value to the predicate `f`. If
        /// true then that value is retained, else filtered out.
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <param name="ma">The `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` to perform the operation on</param>
        /// <param name="f">The predicate function</param>
        /// <returns>`Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` with the predicate `f(a)` applied</returns>
        [Pure]
        public static Validation<FAIL, Validation<FAIL, A>> filterT<FAIL, A>(Validation<FAIL, Validation<FAIL, A>> ma, Func<A, bool> pred) =>
            default(Trans<MValidation<FAIL, Validation<FAIL, A>>, Validation<FAIL, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>)
                .Bind<MValidation<FAIL, Validation<FAIL, A>>, Validation<FAIL, Validation<FAIL, A>>, MValidation<FAIL, A>, Validation<FAIL, A>, A>(ma, 
                    a => pred(a)
                        ? default(MValidation<FAIL, A>).Pure(a)
                        : default(MValidation<FAIL, A>).Zero());

        /// <summary>
        /// Adds the two inner `Num<A>` types together
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x + y</returns>
        [Pure]
        public static Validation<FAIL, Validation<FAIL, A>> plusT<NUM, FAIL, A>(Validation<FAIL, Validation<FAIL, A>> x, Validation<FAIL, Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Plus, x, y);

        /// <summary>
        /// Finds the difference between two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing x - y</returns>
        [Pure]
        public static Validation<FAIL, Validation<FAIL, A>> subtractT<NUM, FAIL, A>(Validation<FAIL, Validation<FAIL, A>> x, Validation<FAIL, Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Subtract, x, y);

        /// <summary>
        /// Finds the product of two inner `Num<A>` types
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x * y`</returns>
        [Pure]
        public static Validation<FAIL, Validation<FAIL, A>> productT<NUM, FAIL, A>(Validation<FAIL, Validation<FAIL, A>> x, Validation<FAIL, Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Product, x, y);

        /// <summary>
        /// Divides `x` by `y`, which are both `Num<A>`s
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="NUM">`Num<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x / y`</returns>
        [Pure]
        public static Validation<FAIL, Validation<FAIL, A>> divideT<NUM, FAIL, A>(Validation<FAIL, Validation<FAIL, A>> x, Validation<FAIL, Validation<FAIL, A>> y) where NUM : struct, Num<A> =>
            applyT(default(NUM).Divide, x, y);

        /// <summary>
        /// Semigroup append operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="SEMI">`Semigroup<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x ++ y`</returns>
        [Pure]
        public static Validation<FAIL, Validation<FAIL, A>> appendT<SEMI, FAIL, A>(Validation<FAIL, Validation<FAIL, A>> x, Validation<FAIL, Validation<FAIL, A>> y) where SEMI : struct, Semigroup<A> =>
            applyT(default(SEMI).Append, x, y);

        /// <summary>
        /// `Ord` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="ORD">`Ord<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>If `x` is less than `y`: `-1`.  If `x` is greater than `y`: `+1`.  If `x` is equal to `y`: `0`</returns>
        [Pure]
        public static int compareT<ORD, FAIL, A>(Validation<FAIL, Validation<FAIL, A>> x, Validation<FAIL, Validation<FAIL, A>> y) where ORD : struct, Ord<A> =>
            applyT(default(ORD).Compare, x, y).FoldT(0,(_, v) => v);

        /// <summary>
        /// `Eq` compare operation on the inner bound values
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="EQ">`Eq<A>` class instance</typeparam>
        /// <param name="x">The left hand side of the operation</param>
        /// <param name="y">The right hand side of the operation</param>
        /// <returns>`Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;` which is the result of performing `x == y`</returns>
        [Pure]
        public static bool equalsT<EQ, FAIL, A>(Validation<FAIL, Validation<FAIL, A>> x, Validation<FAIL, Validation<FAIL, A>> y) where EQ : struct, Eq<A> =>
            applyT(default(EQ).Equals, x, y).FoldT(true,(s, v) => s && v);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Validation<FAIL, B>> applyT<FAIL, A, B>(Func<A, B> fab, Validation<FAIL, Validation<FAIL, A>> fa) =>
            default(ApplValidation<FAIL, Validation<FAIL, A>, Validation<FAIL, B>>).Apply(
                 default(MValidation<FAIL, Func<Validation<FAIL, A>, Validation<FAIL, B>>>).Pure((Validation<FAIL, A> a) => default(ApplValidation<FAIL, A, B>).Apply(
                     default(MValidation<FAIL, Func<A, B>>).Pure(fab), 
                     a)),
                 fa);

        /// <summary>
        /// Apply `fa` to `fab`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fab">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fab(fa)`</returns>
        [Pure]
        public static Validation<FAIL, Validation<FAIL, B>> applyT<FAIL, A, B>(Validation<FAIL, Validation<FAIL, Func<A, B>>> fab, Validation<FAIL, Validation<FAIL, A>> fa) =>
            default(MValidation<FAIL, Validation<FAIL, Func<A, B>>>).Bind<MValidation<FAIL, Validation<FAIL, B>>, Validation<FAIL, Validation<FAIL, B>>, Validation<FAIL, B>>(fab, f =>
                default(MValidation<FAIL, Validation<FAIL, A>>).Bind<MValidation<FAIL, Validation<FAIL, B>>, Validation<FAIL, Validation<FAIL, B>>, Validation<FAIL, B>>(fa, a => 
                    default(MValidation<FAIL, Validation<FAIL, B>>).Pure(default(ApplValidation<FAIL, A, B>).Apply(f, a))));

        /// <summary>
        /// Apply `fa` and `fb` to `fabc`
        /// </summary>
        /// <typeparam name="A">Inner bound value type</typeparam>
        /// <typeparam name="B">Resulting bound value type</typeparam>
        /// <param name="fabc">Functor</param>
        /// <param name="fa">Monad of `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <param name="fb">Monad of `Validation&lt;FAIL, Validation&lt;FAIL, A&gt;&gt;`</param>
        /// <returns>`Validation&lt;FAIL, Validation&lt;FAIL, B&gt;&gt;` which is the result of performing `fabc(fa, fb)`</returns>
        [Pure]
        public static Validation<FAIL, Validation<FAIL, C>> applyT<FAIL, A, B, C>(Func<A, B, C> fabc, Validation<FAIL, Validation<FAIL, A>> fa, Validation<FAIL, Validation<FAIL, B>> fb) =>
            curry(fabc).ApplyT(fa).ApplyT(fb);
    }
}
